require("source-map-support").install();
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 30);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _templateObject = _taggedTemplateLiteral(['Node version must be ', ' or\n                      greater. You are using ', '.'], ['Node version must be ', ' or\n                      greater. You are using ', '.']);

exports.singleLineString = singleLineString;
exports.getRootExpression = getRootExpression;
exports.getNodeReference = getNodeReference;
exports.getVariable = getVariable;
exports.gettext = gettext;
exports.checkMinNodeVersion = checkMinNodeVersion;
exports.getPackageTypeAsString = getPackageTypeAsString;
exports.ignorePrivateFunctions = ignorePrivateFunctions;
exports.ensureFilenameExists = ensureFilenameExists;
exports.isLocalUrl = isLocalUrl;
exports.apiToMessage = apiToMessage;

var _url = __webpack_require__(128);

var _url2 = _interopRequireDefault(_url);

var _semver = __webpack_require__(127);

var _semver2 = _interopRequireDefault(_semver);

var _const = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
 * Template tag for removing whitespace and new lines
 * in order to be able to use multiline template strings
 * as a single string.
 *
 * Usage: singleLineString`foo bar baz
 *                    whatever`;
 *
 * Will output: 'foo bar baz whatever'
 *
 */
function singleLineString(strings) {
  // Interweave the strings with the
  // substitution vars first.
  var output = '';

  for (var _len = arguments.length, vars = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    vars[_key - 1] = arguments[_key];
  }

  for (var i = 0; i < vars.length; i++) {
    output += strings[i] + vars[i];
  }
  output += strings[vars.length];

  // Split on newlines.
  var lines = output.split(/(?:\r\n|\n|\r)/);

  // Rip out the leading whitespace.
  return lines.map(function (line) {
    return line.replace(/^\s+/gm, '');
  }).join(' ').trim();
}

/*
 * Takes an AST node and returns the root property.
 *
 * example: foo().bar.baz() will return the AST node for foo.
 */
function getRootExpression(node) {
  var root = node.callee;

  // If we encounter a member, grab the parent
  if (node.callee.type === 'MemberExpression') {
    var parent = node.callee.object;
    while (parent.type !== 'Identifier') {
      if (parent.callee.type === 'MemberExpression') {
        parent = parent.callee.object;
      } else {
        parent = parent.callee;
      }
    }
    root = parent;
  }

  return root;
}

/*
 * Returns the name of the reference node passed.
 *
 * example: var foo = document;
 *  The node for foo will return 'document'
 */
function getNodeReference(context, node) {
  var variables = context.getScope().variables;
  var scopeVar;

  // Just return the value if the node passed in is a reference to a literal.
  if (typeof node === 'undefined' || node.type === 'Literal') {
    return node;
  }

  // Finds variable reference in current scope.
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = variables[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var variable = _step.value;

      if (variable.name === node.name) {
        scopeVar = variable;
        break;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (scopeVar && scopeVar.defs && scopeVar.defs[0] && scopeVar.defs[0].parent && scopeVar.defs[0].parent.parent && scopeVar.defs[0].parent.parent.body) {
    // This represents all occurrences of the variable
    var occurances = scopeVar.defs[0].parent.parent.body;
    var lastAssignment = void 0;

    if (occurances instanceof Array) {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = occurances[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var occurance = _step2.value;

          if (occurance.type === 'VariableDeclaration' && occurance.declarations[0].init !== null) {
            // Get what the name of what it was assigned to or the raw
            // value depending on the initalization
            lastAssignment = occurance.declarations[0].init;
          } else if (occurance.type === 'ExpressionStatement' && occurance.expression.type === 'AssignmentExpression') {
            // Get the right hand side of the assignment
            lastAssignment = occurance.expression.right;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    // Return the name of the first definition of the variable which
    // corresponds to the node passed in.
    if (lastAssignment) {
      return lastAssignment;
    }
  }

  // If that variable doesn't exist in scope, then just return the node's
  // name.
  return node;
}

/*
 * Get a variable from a eslint context object if it exists, otherwise
 * undefined.
 */
function getVariable(context, name) {
  var variables = context.getScope().variables;
  var result;
  variables.forEach(function (variable) {
    if (variable.name === name && variable.defs && variable.defs[0] && variable.defs[0].name && variable.defs[0].name.parent) {
      result = variable.defs[0].name.parent.init;
    }
  });
  return result;
}

/*
 * Gettext utils. No-op until we have proper
 * a proper l10n solution.
 *
 */
function gettext(str) {
  return str;
}

/*
 * Check the minimum node version is met
 */
function checkMinNodeVersion(minVersion) {
  var _process = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process;

  return new Promise(function (resolve) {
    minVersion = minVersion || '0.12.0';
    if (!_semver2.default.gte(_process.version, minVersion)) {
      throw new Error(singleLineString(_templateObject, minVersion, _process.version));
    } else {
      resolve();
    }
  });
}

function getPackageTypeAsString(numericPackageType) {
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = Object.keys(_const.PACKAGE_TYPES)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var packageType = _step3.value;

      if (parseInt(numericPackageType, 10) === _const.PACKAGE_TYPES[packageType]) {
        return packageType;
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  throw new Error('Invalid package type constant "' + numericPackageType + '"');
}

/*
 * Looks through all exported functions and returns only
 * "public" *functions* that aren't prefixed with an _
 *
 * Used for ignoring private functions and constants in rules files.
 * Rules can have private functions we don't run; anything that
 * starts with an "_" shouldn't be returned.
 *
 * This exists because we export private functions in rule files
 * for testing.
 */
function ignorePrivateFunctions(list) {
  var filteredList = {};

  for (var functionName in list) {
    if (functionName.startsWith('_') === false && typeof list[functionName] === 'function') {
      filteredList[functionName] = list[functionName];
    }
  }

  return filteredList;
}

/*
 * Check a filename to make sure it's valid; used by scanners so we never
 * accept new scanners that don't specify which file they're referencing.
 */
function ensureFilenameExists(filename) {
  if (typeof filename !== 'string' || filename.length < 1) {
    throw new Error('Filename is required');
  }
}

function isLocalUrl(urlInput) {
  var parsedUrl = _url2.default.parse(urlInput);
  var protocol = parsedUrl.protocol;
  var path = parsedUrl.path;
  // Check protocol is chrome: or resource: if set.
  // Details on the chrome protocol are here: https://goo.gl/W52T0Q
  // Details on resource protocol are here: https://goo.gl/HHqeJA
  if (protocol && !_const.LOCAL_PROTOCOLS.includes(protocol)) {
    return false;
  }
  // Disallow protocol-free remote urls.
  if (path.startsWith('//')) {
    return false;
  }
  return true;
}

function apiToMessage(string) {
  return string.replace(/^extension/, 'ext').replace(/\./g, '_').toUpperCase().substr(0, 25);
}

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TEMPORARY_APIS = exports.DEPRECATED_APIS = exports.FLAGGED_FILE_MAGIC_NUMBERS_LENGTH = exports.FLAGGED_FILE_MAGIC_NUMBERS = exports.FLAGGED_FILE_EXTENSIONS = exports.ALREADY_SIGNED_REGEX = exports.FLAGGED_FILE_REGEX = exports.HIDDEN_FILE_REGEX = exports.MAX_FILE_SIZE_TO_PARSE_MB = exports.MAX_FILE_SIZE_MB = exports.VALID_MANIFEST_VERSION = exports.CHROME_MANIFEST = exports.MANIFEST_JSON = exports.INSTALL_RDF = exports.LOW_LEVEL_MODULES = exports.BANNED_IDENTIFIERS = exports.LOCAL_PROTOCOLS = exports.ADDON_TYPE_MAP = exports.PACKAGE_TYPES = exports.PACKAGE_SUBPACKAGE = exports.PACKAGE_MULTI = exports.PACKAGE_SEARCHPROV = exports.PACKAGE_LANGPACK = exports.PACKAGE_DICTIONARY = exports.PACKAGE_THEME = exports.PACKAGE_EXTENSION = exports.PACKAGE_ANY = exports.HTML_TAGS_WITH_REQUIRED_ATTRIBUTES = exports.RDF_OBSOLETE_TAGS = exports.RDF_UNALLOWED_IF_LISTED_TAGS = exports.RDF_UNALLOWED_TAGS = exports.RDF_DEFAULT_NAMESPACE = exports.MESSAGE_TYPES = exports.ESLINT_TYPES = exports.VALIDATION_WARNING = exports.VALIDATION_NOTICE = exports.VALIDATION_ERROR = exports.ESLINT_OVERWRITE_MESSAGE = exports.ESLINT_RULE_MAPPING = exports.EXTERNAL_RULE_MAPPING = exports.ESLINT_WARNING = exports.ESLINT_ERROR = exports.NO_COMPRESSION = exports.DEFLATE_COMPRESSION = undefined;

var _javascript = __webpack_require__(5);

var DEFLATE_COMPRESSION = exports.DEFLATE_COMPRESSION = 8;
var NO_COMPRESSION = exports.NO_COMPRESSION = 0;

var ESLINT_ERROR = exports.ESLINT_ERROR = 2;
var ESLINT_WARNING = exports.ESLINT_WARNING = 1;

// 3rd party / eslint-internal rules
var EXTERNAL_RULE_MAPPING = exports.EXTERNAL_RULE_MAPPING = {
  'no-eval': [ESLINT_WARNING, { allowIndirect: false }],
  'no-implied-eval': ESLINT_WARNING,
  'no-new-func': ESLINT_WARNING,
  'no-unsafe-innerhtml/no-unsafe-innerhtml': ESLINT_WARNING
};

var ESLINT_RULE_MAPPING = exports.ESLINT_RULE_MAPPING = Object.assign({
  'banned-identifiers': ESLINT_WARNING,
  'deprecated-entities': ESLINT_WARNING,
  'event-listener-fourth': ESLINT_WARNING,
  'global-require-arg': ESLINT_WARNING,
  'init-null-arg': ESLINT_WARNING,
  'low-level-module': ESLINT_WARNING,
  'mozindexeddb': ESLINT_WARNING,
  'mozindexeddb-property': ESLINT_WARNING,
  'only-prefs-in-defaults': ESLINT_WARNING,
  'opendialog-nonlit-uri': ESLINT_WARNING,
  'opendialog-remote-uri': ESLINT_WARNING,
  'shallow-wrapper': ESLINT_WARNING,
  'webextension-api': ESLINT_WARNING,
  'webextension-unsupported-api': ESLINT_WARNING,
  'widget-module': ESLINT_WARNING
}, EXTERNAL_RULE_MAPPING);

var ESLINT_OVERWRITE_MESSAGE = exports.ESLINT_OVERWRITE_MESSAGE = {
  'no-eval': _javascript.DANGEROUS_EVAL,
  'no-implied-eval': _javascript.NO_IMPLIED_EVAL,
  'no-new-func': _javascript.DANGEROUS_EVAL,
  'no-unsafe-innerhtml/no-unsafe-innerhtml': _javascript.UNSAFE_DYNAMIC_VARIABLE_ASSIGNMENT,
  'webextension-unsupported-api': _javascript.UNSUPPORTED_API
};

var VALIDATION_ERROR = exports.VALIDATION_ERROR = 'error';
var VALIDATION_NOTICE = exports.VALIDATION_NOTICE = 'notice';
var VALIDATION_WARNING = exports.VALIDATION_WARNING = 'warning';

var ESLINT_TYPES = exports.ESLINT_TYPES = {
  0: VALIDATION_NOTICE,
  1: VALIDATION_WARNING,
  2: VALIDATION_ERROR
};

var MESSAGE_TYPES = exports.MESSAGE_TYPES = [VALIDATION_ERROR, VALIDATION_NOTICE, VALIDATION_WARNING];

var RDF_DEFAULT_NAMESPACE = exports.RDF_DEFAULT_NAMESPACE = 'http://www.mozilla.org/2004/em-rdf#';

var RDF_UNALLOWED_TAGS = exports.RDF_UNALLOWED_TAGS = ['hidden'];
var RDF_UNALLOWED_IF_LISTED_TAGS = exports.RDF_UNALLOWED_IF_LISTED_TAGS = ['updateKey', 'updateURL'];
var RDF_OBSOLETE_TAGS = exports.RDF_OBSOLETE_TAGS = ['file', 'requires', 'skin'];

var HTML_TAGS_WITH_REQUIRED_ATTRIBUTES = exports.HTML_TAGS_WITH_REQUIRED_ATTRIBUTES = {
  prefwindow: ['id']
};

// Package type constants.
var PACKAGE_ANY = exports.PACKAGE_ANY = 0;
var PACKAGE_EXTENSION = exports.PACKAGE_EXTENSION = 1;
var PACKAGE_THEME = exports.PACKAGE_THEME = 2;
var PACKAGE_DICTIONARY = exports.PACKAGE_DICTIONARY = 3;
var PACKAGE_LANGPACK = exports.PACKAGE_LANGPACK = 4;
var PACKAGE_SEARCHPROV = exports.PACKAGE_SEARCHPROV = 5;
var PACKAGE_MULTI = exports.PACKAGE_MULTI = 1; // A multi extension is an extension
var PACKAGE_SUBPACKAGE = exports.PACKAGE_SUBPACKAGE = 7;

var PACKAGE_TYPES = exports.PACKAGE_TYPES = {
  PACKAGE_ANY: PACKAGE_ANY,
  PACKAGE_EXTENSION: PACKAGE_EXTENSION,
  PACKAGE_THEME: PACKAGE_THEME,
  PACKAGE_DICTIONARY: PACKAGE_DICTIONARY,
  PACKAGE_LANGPACK: PACKAGE_LANGPACK,
  PACKAGE_SEARCHPROV: PACKAGE_SEARCHPROV,
  PACKAGE_MULTI: PACKAGE_MULTI,
  PACKAGE_SUBPACKAGE: PACKAGE_SUBPACKAGE
};

// Types from install.rdf don't match the types
// we use internally. This provides a mapping.
var ADDON_TYPE_MAP = exports.ADDON_TYPE_MAP = {
  2: PACKAGE_EXTENSION,
  4: PACKAGE_THEME,
  8: PACKAGE_LANGPACK,
  32: PACKAGE_MULTI,
  64: PACKAGE_DICTIONARY,
  // New "experiment" type: see bug 1220097
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1220583
  128: PACKAGE_EXTENSION
};

var LOCAL_PROTOCOLS = exports.LOCAL_PROTOCOLS = ['chrome:', 'resource:'];

// If you add to this you'll need to additionally
// update _BANNED_IDENTIFIERS_MAP with details in
// messages/javascript.
var BANNED_IDENTIFIERS = exports.BANNED_IDENTIFIERS = ['newThread', 'processNextEvent'];

var LOW_LEVEL_MODULES = exports.LOW_LEVEL_MODULES = [
// Added from bugs 689340, 731109
'chrome', 'window-utils', 'observer-service',
// Added from bug 845492
'window/utils', 'sdk/window/utils', 'sdk/deprecated/window-utils', 'tab/utils', 'sdk/tab/utils', 'system/events', 'sdk/system/events'];

var INSTALL_RDF = exports.INSTALL_RDF = 'install.rdf';
var MANIFEST_JSON = exports.MANIFEST_JSON = 'manifest.json';
var CHROME_MANIFEST = exports.CHROME_MANIFEST = 'chrome.manifest';

var VALID_MANIFEST_VERSION = exports.VALID_MANIFEST_VERSION = 2;

// The max file size in MB that the
// io classes will open as strings or streams.
var MAX_FILE_SIZE_MB = exports.MAX_FILE_SIZE_MB = 100;
// This is the limit in megabytes of a file we will parse (eg. CSS, JS, etc.)
// A singular CSS/JS file over 4MB seems bad and may actually be full of data
// best stored in JSON/some other data format rather than code.
// https://github.com/mozilla/addons-linter/issues/730
// We increased this limit from 2MB to 4MB as per:
// https://github.com/mozilla/addons/issues/181
//
// We should be careful about increasing this any further.
var MAX_FILE_SIZE_TO_PARSE_MB = exports.MAX_FILE_SIZE_TO_PARSE_MB = 4;

var HIDDEN_FILE_REGEX = exports.HIDDEN_FILE_REGEX = /^__MACOSX\//;
var FLAGGED_FILE_REGEX = exports.FLAGGED_FILE_REGEX = /thumbs\.db$|\.DS_Store$|\.orig$|\.old$|\~$/i;
var ALREADY_SIGNED_REGEX = exports.ALREADY_SIGNED_REGEX = /^META\-INF\/manifest\.mf/;

var FLAGGED_FILE_EXTENSIONS = exports.FLAGGED_FILE_EXTENSIONS = ['.class', '.dll', '.dylib', '.exe', '.jar', '.sh', '.so', '.swf'];

// A list of magic numbers that we won't allow.
var FLAGGED_FILE_MAGIC_NUMBERS = exports.FLAGGED_FILE_MAGIC_NUMBERS = [[0x4d, 0x5a], // EXE or DLL,
[0x5a, 0x4d], // Alternative EXE or DLL
[0x7f, 0x45, 0x4c, 0x46], // UNIX elf
[0x23, 0x21], // Shell script
[0xca, 0xfe, 0xba, 0xbe], // Java + Mach-O (dylib)
[0xca, 0xfe, 0xd0, 0x0d], // Java packed
[0x43, 0x57, 0x53]];

// Based on the above, this is how deep we need to look into a file.
var FLAGGED_FILE_MAGIC_NUMBERS_LENGTH = exports.FLAGGED_FILE_MAGIC_NUMBERS_LENGTH = 4;

var DEPRECATED_APIS = exports.DEPRECATED_APIS = ['app.getDetails', 'extension.onRequest', 'extension.onRequestExternal', 'extension.sendRequest', 'tabs.getAllInWindow', 'tabs.getSelected', 'tabs.onActiveChanged', 'tabs.onSelectionChanged', 'tabs.sendRequest'];

// These are APIs that will cause problems when loaded temporarily
// in about:debugging.
var TEMPORARY_APIS = exports.TEMPORARY_APIS = ['identity.getRedirectURL', 'storage.local', 'storage.sync'];

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _chromemanifest = __webpack_require__(32);

Object.keys(_chromemanifest).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _chromemanifest[key];
    }
  });
});

var _css = __webpack_require__(33);

Object.keys(_css).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _css[key];
    }
  });
});

var _html = __webpack_require__(34);

Object.keys(_html).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _html[key];
    }
  });
});

var _javascript = __webpack_require__(5);

Object.keys(_javascript).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _javascript[key];
    }
  });
});

var _json = __webpack_require__(35);

Object.keys(_json).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _json[key];
    }
  });
});

var _layout = __webpack_require__(36);

Object.keys(_layout).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _layout[key];
    }
  });
});

var _manifestjson = __webpack_require__(37);

Object.keys(_manifestjson).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _manifestjson[key];
    }
  });
});

var _rdf = __webpack_require__(38);

Object.keys(_rdf).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _rdf[key];
    }
  });
});

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLogger = createLogger;

var _bunyan = __webpack_require__(116);

var _bunyan2 = _interopRequireDefault(_bunyan);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createLogger() {
  var _process = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process;

  var level = _process.env.LOG_LEVEL || 'fatal';
  var logLevels = Object.keys(_bunyan2.default.levelFromName);
  if (logLevels.indexOf(level) === -1) {
    throw new Error('LOG_LEVEL must be one of ' + logLevels.join(', '));
  }
  return _bunyan2.default.createLogger({
    name: 'AddonLinterJS',
    stream: process.stdout,
    level: level
  });
}

exports.default = createLogger();

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BaseScanner = function () {
  _createClass(BaseScanner, null, [{
    key: 'fileResultType',
    get: function get() {
      /*
      Because each scanner expects a certain kind of data from the
      io libraries, a string or stream for example, we'll let the
      scanner define the type of data it expects. Most default to
      string.
       This can be overridden on the class.
       Because contents is passed to the constructor, we need to be
      able to access this before the constructor.
      */
      return 'string';
    }
  }]);

  function BaseScanner(contents, filename) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, BaseScanner);

    this.contents = contents;
    this.filename = filename;
    this.options = options;
    this.linterMessages = [];
    this._defaultRules = [];
    this._parsedContent = null;
    this._rulesProcessed = 0;

    (0, _utils.ensureFilenameExists)(this.filename);
  }

  _createClass(BaseScanner, [{
    key: 'scan',
    value: function scan() {
      var _this = this;

      var _rules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._defaultRules;

      return new Promise(function (resolve, reject) {
        _this.getContents().then(function (contents) {
          var promises = [];
          // Ignore private functions exported in rule files.
          //
          // (These are exported for testing purposes, but we don't want
          // to include them in our linter's rules.)
          var rules = (0, _utils.ignorePrivateFunctions)(_rules);

          for (var rule in rules) {
            _this._rulesProcessed++;

            promises.push(rules[rule](contents, _this.filename, _this.options));
          }

          return Promise.all(promises);
        }).then(function (ruleResults) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = ruleResults[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var messages = _step.value;

              _this.linterMessages = _this.linterMessages.concat(messages);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          resolve(_this.linterMessages);
        }).catch(reject);
      });
    }
  }, {
    key: 'getContents',
    value: function getContents() {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        if (_this2._parsedContent !== null) {
          return resolve(_this2._parsedContent);
        }

        _this2._getContents().then(function (contents) {
          _this2._parsedContent = contents;

          resolve(_this2._parsedContent);
        }).catch(reject);
      });
    }
  }, {
    key: '_getContents',
    value: function _getContents() {
      return Promise.reject(new Error('_getContents is not implemented'));
    }
  }]);

  return BaseScanner;
}();

exports.default = BaseScanner;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IDENTITY_GETREDIRECTURL = exports.STORAGE_SYNC = exports.STORAGE_LOCAL = exports.TABS_SENDREQUEST = exports.TABS_ONSELECTIONCHANGED = exports.TABS_ONACTIVECHANGED = exports.TABS_GETSELECTED = exports.TABS_GETALLINWINDOW = exports.EXT_SENDREQUEST = exports.EXT_ONREQUESTEXTERNAL = exports.EXT_ONREQUEST = exports.APP_GETDETAILS = exports.UNSUPPORTED_API = exports.UNSAFE_DYNAMIC_VARIABLE_ASSIGNMENT = exports.KNOWN_LIBRARY = exports.UNADVISED_LIBRARY = exports.BANNED_LIBRARY = exports.LOW_LEVEL_MODULE = exports.TAB_URL_OVERRIDE = exports.NSI_SOUND_PLAY = exports.INIT_NULL_ARG = exports.NSI_DNS_SERVICE_RESOLVE = exports.NO_DOCUMENT_WRITE = exports.ONLY_PREFS_IN_DEFAULTS = exports.UNEXPECTED_GLOGAL_ARG = exports.DEPREC_SDK_MOD_WIDGET = exports.NO_IMPLIED_EVAL = exports.DANGEROUS_EVAL = exports.BANNED_PROCESSNEXTEVENT = exports.BANNED_NEWTHREAD = exports._BANNED_IDENTIFIERS_MAP = exports.OPENDIALOG_NONLIT_URI = exports.OPENDIALOG_REMOTE_URI = exports.SHALLOW_WRAPPER = exports.MOZINDEXEDDB_PROPERTY = exports.MOZINDEXEDDB = exports.EVENT_LISTENER_FOURTH = exports.JS_SYNTAX_ERROR = undefined;

var _templateObject = _taggedTemplateLiteral(['There is a JavaScript syntax error in your\n    code; validation cannot continue on this file.'], ['There is a JavaScript syntax error in your\n    code; validation cannot continue on this file.']),
    _templateObject2 = _taggedTemplateLiteral(['When called with a truthy forth argument,\n    listeners can be triggered potentially unsafely by untrusted code. This\n    requires careful review.'], ['When called with a truthy forth argument,\n    listeners can be triggered potentially unsafely by untrusted code. This\n    requires careful review.']),
    _templateObject3 = _taggedTemplateLiteral(['Extensions using shallow XPCOM wrappers\n    cannot be automatically signed.'], ['Extensions using shallow XPCOM wrappers\n    cannot be automatically signed.']),
    _templateObject4 = _taggedTemplateLiteral(['Calling \'', '\' with variable\n      parameters can result in potential security vulnerabilities if the\n      variable contains a remote URI. Consider using \'window.open\' with\n      the \'chrome=no\' flag.'], ['Calling \'', '\' with variable\n      parameters can result in potential security vulnerabilities if the\n      variable contains a remote URI. Consider using \'window.open\' with\n      the \'chrome=no\' flag.']),
    _templateObject5 = _taggedTemplateLiteral(['Calling \'', '\' with a non-local\n      URI will result in the dialog being opened with chrome privileges.'], ['Calling \'', '\' with a non-local\n      URI will result in the dialog being opened with chrome privileges.']),
    _templateObject6 = _taggedTemplateLiteral(['Creating threads from JavaScript is a common cause\n    of crashes and is unsupported in recent versions of the platform'], ['Creating threads from JavaScript is a common cause\n    of crashes and is unsupported in recent versions of the platform']),
    _templateObject7 = _taggedTemplateLiteral(['Spinning the event loop with processNextEvent is a\n    common cause of deadlocks, crashes, and other errors due to unintended\n    reentrancy. Please use asynchronous callbacks instead wherever possible'], ['Spinning the event loop with processNextEvent is a\n    common cause of deadlocks, crashes, and other errors due to unintended\n    reentrancy. Please use asynchronous callbacks instead wherever possible']),
    _templateObject8 = _taggedTemplateLiteral(['Evaluation of strings as code can lead to\n    security vulnerabilities and performance issues, even in the\n    most innocuous of circumstances. Please avoid using `eval` and the\n    `Function` constructor when at all possible.\''], ['Evaluation of strings as code can lead to\n    security vulnerabilities and performance issues, even in the\n    most innocuous of circumstances. Please avoid using \\`eval\\` and the\n    \\`Function\\` constructor when at all possible.\'']),
    _templateObject9 = _taggedTemplateLiteral(['setTimeout, setInterval and execScript\n    functions should be called only with function expressions as their\n    first argument'], ['setTimeout, setInterval and execScript\n    functions should be called only with function expressions as their\n    first argument']),
    _templateObject10 = _taggedTemplateLiteral(['The \'widget\' module has been deprecated\n    due to a number of performance and usability issues, and has been\n    removed from the SDK as of Firefox 40. Please use the\n    \'sdk/ui/button/action\' or \'sdk/ui/button/toggle\' module instead.\n    See https://developer.mozilla.org/Add-ons/SDK/High-Level_APIs/ui\n    for more information.'], ['The \'widget\' module has been deprecated\n    due to a number of performance and usability issues, and has been\n    removed from the SDK as of Firefox 40. Please use the\n    \'sdk/ui/button/action\' or \'sdk/ui/button/toggle\' module instead.\n    See https://developer.mozilla.org/Add-ons/SDK/High-Level_APIs/ui\n    for more information.']),
    _templateObject11 = _taggedTemplateLiteral(['Passing a global as an argument\n    is not recommended. Please make this a var instead.'], ['Passing a global as an argument\n    is not recommended. Please make this a var instead.']),
    _templateObject12 = _taggedTemplateLiteral(['Preference files are only allowed to call the\n    pref() and user_pref() functions. Please move other code outside preference\n    defaults file.'], ['Preference files are only allowed to call the\n    pref() and user_pref() functions. Please move other code outside preference\n    defaults file.']),
    _templateObject13 = _taggedTemplateLiteral(['document.write will fail in many\n    circumstances when used in extensions, and has potentially severe security\n    repercussions when used improperly. Therefore, it should not be used.'], ['document.write will fail in many\n    circumstances when used in extensions, and has potentially severe security\n    repercussions when used improperly. Therefore, it should not be used.']),
    _templateObject14 = _taggedTemplateLiteral(['The \'nsIDNSService.resolve\' method performs a\n    synchronous DNS lookup, which will freeze the UI. This can result in severe\n    performance issues. \'nsIDNSService.asyncResolve()\' should be used\n    instead.'], ['The \'nsIDNSService.resolve\' method performs a\n    synchronous DNS lookup, which will freeze the UI. This can result in severe\n    performance issues. \'nsIDNSService.asyncResolve()\' should be used\n    instead.']),
    _templateObject15 = _taggedTemplateLiteral(['Calling \'nsITransferable.init()\' with a null\n    first argument has the potential to leak data across private browsing mode\n    sessions. \'null\' is  appropriate only when reading data or writing data\n    which is not associated with a particular window.'], ['Calling \'nsITransferable.init()\' with a null\n    first argument has the potential to leak data across private browsing mode\n    sessions. \'null\' is  appropriate only when reading data or writing data\n    which is not associated with a particular window.']),
    _templateObject16 = _taggedTemplateLiteral(['The \'nsISound.play\' function is synchronous,\n    and thus freezes the interface while the sound is playing. It should be\n    avoided in favor of the HTML5 audio APIs.'], ['The \'nsISound.play\' function is synchronous,\n    and thus freezes the interface while the sound is playing. It should be\n    avoided in favor of the HTML5 audio APIs.']),
    _templateObject17 = _taggedTemplateLiteral(['Extensions must not alter user preferences such\n    as the new tab URL without explicit user consent.'], ['Extensions must not alter user preferences such\n    as the new tab URL without explicit user consent.']),
    _templateObject18 = _taggedTemplateLiteral(['Extensions must not alter user preferences\n    such as the new tab URL without explicit user consent. Such changes must\n    also be reverted when the extension is disabled or uninstalled.'], ['Extensions must not alter user preferences\n    such as the new tab URL without explicit user consent. Such changes must\n    also be reverted when the extension is disabled or uninstalled.']),
    _templateObject19 = _taggedTemplateLiteral(['Your add-on uses an interface which\n    bypasses the high-level protections of the add-on SDK. This interface\n    should be avoided, and its use may significantly complicate\n    your review process'], ['Your add-on uses an interface which\n    bypasses the high-level protections of the add-on SDK. This interface\n    should be avoided, and its use may significantly complicate\n    your review process']),
    _templateObject20 = _taggedTemplateLiteral(['Your add-on uses a JavaScript library we\n    consider unsafe. Read more: https://bit.ly/1TRIyZY'], ['Your add-on uses a JavaScript library we\n    consider unsafe. Read more: https://bit.ly/1TRIyZY']),
    _templateObject21 = _taggedTemplateLiteral(['Your add-on uses a JavaScript library we do\n    not recommend. Read more: https://bit.ly/1TRIyZY'], ['Your add-on uses a JavaScript library we do\n    not recommend. Read more: https://bit.ly/1TRIyZY']),
    _templateObject22 = _taggedTemplateLiteral(['JavaScript libraries are discouraged for\n    simple add-ons, but are generally accepted.'], ['JavaScript libraries are discouraged for\n    simple add-ons, but are generally accepted.']),
    _templateObject23 = _taggedTemplateLiteral(['Due to both security and performance\n    concerns, this may not be set using dynamic values which have\n    not been adequately sanitized. This can lead to security issues or fairly\n    serious performance degradation.'], ['Due to both security and performance\n    concerns, this may not be set using dynamic values which have\n    not been adequately sanitized. This can lead to security issues or fairly\n    serious performance degradation.']),
    _templateObject24 = _taggedTemplateLiteral(['This API has been deprecated by Chrome\n      and has not been implemented by Firefox.'], ['This API has been deprecated by Chrome\n      and has not been implemented by Firefox.']),
    _templateObject25 = _taggedTemplateLiteral(['This API can cause issues when loaded\n      temporarily using about:debugging in Firefox unless you specify\n      applications > gecko > id in the manifest. Please see:\n      https://mzl.la/2hizK4a for more.'], ['This API can cause issues when loaded\n      temporarily using about:debugging in Firefox unless you specify\n      applications > gecko > id in the manifest. Please see:\n      https://mzl.la/2hizK4a for more.']);

exports._nonLiteralUri = _nonLiteralUri;
exports._methodPassedRemoteUri = _methodPassedRemoteUri;
exports._bannedIdentifier = _bannedIdentifier;

var _utils = __webpack_require__(0);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var JS_SYNTAX_ERROR = exports.JS_SYNTAX_ERROR = {
  code: 'JS_SYNTAX_ERROR',
  legacyCode: ['testcases_scripting', 'test_js_file', 'syntax_error'],
  message: (0, _utils.gettext)('JavaScript syntax error'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject))
};

var EVENT_LISTENER_FOURTH = exports.EVENT_LISTENER_FOURTH = {
  code: 'EVENT_LISTENER_FOURTH',
  message: (0, _utils.gettext)('addEventListener` called with truthy fourth argument.'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject2)),
  legacyCode: ['js', 'instanceactions', 'addEventListener_fourth']
};

var MOZINDEXEDDB = exports.MOZINDEXEDDB = {
  code: 'MOZINDEXEDDB',
  // Original code appeared to have a non-unique err_id which is no
  // use for comparsions. ('testcases_regex', 'generic', '_generated')
  legacyCode: null,
  message: (0, _utils.gettext)('mozIndexedDB has been removed; use indexedDB instead'),
  description: (0, _utils.gettext)('mozIndexedDB has been removed; use indexedDB instead.')
};

var MOZINDEXEDDB_PROPERTY = exports.MOZINDEXEDDB_PROPERTY = {
  code: 'MOZINDEXEDDB_PROPERTY',
  // Original code appeared to have a non-unique err_id which is no
  // use for comparsions. ('testcases_regex', 'generic', '_generated')
  legacyCode: null,
  message: (0, _utils.gettext)('mozIndexedDB used as an object key/property'),
  description: (0, _utils.gettext)('mozIndexedDB has been removed; use indexedDB instead.')
};

var SHALLOW_WRAPPER = exports.SHALLOW_WRAPPER = {
  code: 'SHALLOW_WRAPPER',
  legacyCode: ['testcases_js_xpcom', 'xpcnativewrapper', 'shallow'],
  message: (0, _utils.gettext)('Shallow XPCOM wrappers should not be used'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject3))
};

function _nonLiteralUri(method) {
  return {
    code: (method + '_NONLIT_URI').toUpperCase(),
    legacyCode: ['js', 'instanceactions', method + '_nonliteral'],
    message: (0, _utils.gettext)('\'' + method + '\' called with a non-literal uri'),
    description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject4, method))
  };
}

function _methodPassedRemoteUri(method) {
  return {
    code: (method + '_REMOTE_URI').toUpperCase(),
    legacyCode: ['js', 'instanceactions', method + '_remote_uri'],
    message: (0, _utils.gettext)('\'' + method + '\' called with non-local URI'),
    description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject5, method))
  };
}

var OPENDIALOG_REMOTE_URI = exports.OPENDIALOG_REMOTE_URI = _methodPassedRemoteUri('openDialog');
var OPENDIALOG_NONLIT_URI = exports.OPENDIALOG_NONLIT_URI = _nonLiteralUri('openDialog');

var _BANNED_IDENTIFIERS_MAP = exports._BANNED_IDENTIFIERS_MAP = {
  newThread: (0, _utils.singleLineString)(_templateObject6),
  processNextEvent: (0, _utils.singleLineString)(_templateObject7)
};

function _bannedIdentifier(name) {
  return {
    code: 'BANNED_' + name.toUpperCase(),
    legacyCode: ['js', 'actions', 'banned_identifier'],
    message: (0, _utils.gettext)('Banned or deprecated JavaScript Identifier'),
    description: _BANNED_IDENTIFIERS_MAP[name]
  };
}

var BANNED_NEWTHREAD = exports.BANNED_NEWTHREAD = _bannedIdentifier('newThread');
var BANNED_PROCESSNEXTEVENT = exports.BANNED_PROCESSNEXTEVENT = _bannedIdentifier('processNextEvent');

var DANGEROUS_EVAL = exports.DANGEROUS_EVAL = {
  code: 'DANGEROUS_EVAL',
  message: null,
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject8)),
  legacyCode: null
};

var NO_IMPLIED_EVAL = exports.NO_IMPLIED_EVAL = {
  code: 'NO_IMPLIED_EVAL',
  message: null,
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject9)),
  legacyCode: null
};

var DEPREC_SDK_MOD_WIDGET = exports.DEPREC_SDK_MOD_WIDGET = {
  code: 'DEPREC_SDK_MOD_WIDGET',
  message: (0, _utils.gettext)('Use of deprecated SDK module'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject10)),
  legacyCode: null
};

var UNEXPECTED_GLOGAL_ARG = exports.UNEXPECTED_GLOGAL_ARG = {
  code: 'UNEXPECTED_GLOGAL_ARG',
  message: (0, _utils.gettext)('Unexpected global passed as an argument'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject11)),
  legacyCode: null
};

var ONLY_PREFS_IN_DEFAULTS = exports.ONLY_PREFS_IN_DEFAULTS = {
  code: 'ONLY_PREFS_IN_DEFAULTS',
  message: (0, _utils.gettext)('Complex code should not appear in preference defaults files'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject12)),
  legacyCode: ['testcases_javascript_actions', '_call_expression', 'complex_prefs_defaults_code']
};

var NO_DOCUMENT_WRITE = exports.NO_DOCUMENT_WRITE = {
  code: 'NO_DOCUMENT_WRITE',
  message: (0, _utils.gettext)('Use of document.write strongly discouraged.'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject13)),
  legacyCode: ['js', 'document.write', 'evil']
};

var NSI_DNS_SERVICE_RESOLVE = exports.NSI_DNS_SERVICE_RESOLVE = {
  code: 'NSI_DNS_SERVICE_RESOLVE',
  message: (0, _utils.gettext)('nsIDNSService.resolve() should not be used.'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject14)),
  legacyCode: ['testcases_javascript_entity_values', 'nsIDNSServiceResolve', null]
};

var INIT_NULL_ARG = exports.INIT_NULL_ARG = {
  code: 'INIT_NULL_ARG',
  message: (0, _utils.gettext)('`init` should not be called with a null first argument'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject15)),
  legacyCode: ['js_entity_values', 'nsITransferable', 'init']
};

var NSI_SOUND_PLAY = exports.NSI_SOUND_PLAY = {
  code: 'NSI_SOUND_PLAY',
  message: (0, _utils.gettext)('nsISound.play should not be used.'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject16)),
  legacyCode: ['testcases_javascript_entity_values', 'nsISound_play', null]
};

var TAB_URL_OVERRIDE = exports.TAB_URL_OVERRIDE = {
  code: 'TAB_URL_OVERRIDE',
  message: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject17)),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject18)),
  legacyCode: ['js_entity_values', 'NewTabURL', 'override']
};

var LOW_LEVEL_MODULE = exports.LOW_LEVEL_MODULE = {
  code: 'LOW_LEVEL_MODULE',
  message: (0, _utils.gettext)('Usage of low-level or non-SDK interface'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject19)),
  legacyCode: null
};

var BANNED_LIBRARY = exports.BANNED_LIBRARY = {
  code: 'BANNED_LIBRARY',
  message: (0, _utils.gettext)('Banned 3rd-party JS library'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject20)),
  legacyCode: null
};

var UNADVISED_LIBRARY = exports.UNADVISED_LIBRARY = {
  code: 'UNADVISED_LIBRARY',
  message: (0, _utils.gettext)('Unadvised 3rd-party JS library'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject21)),
  legacyCode: null
};

var KNOWN_LIBRARY = exports.KNOWN_LIBRARY = {
  code: 'KNOWN_LIBRARY',
  message: (0, _utils.gettext)('Known JS library detected'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject22)),
  legacyCode: ['testcases_content', 'test_packed_packages', 'blacklisted_js_library']
};

var UNSAFE_DYNAMIC_VARIABLE_ASSIGNMENT = exports.UNSAFE_DYNAMIC_VARIABLE_ASSIGNMENT = {
  code: 'UNSAFE_VAR_ASSIGNMENT',
  // Uses original message from eslint
  message: null,
  legacyCode: null,
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject23))
};

var UNSUPPORTED_API = exports.UNSUPPORTED_API = {
  code: 'UNSUPPORTED_API',
  message: null,
  messageFormat: (0, _utils.gettext)('{{api}} is not supported'),
  description: (0, _utils.gettext)('This API has not been implemented by Firefox.'),
  legacyCode: null
};

function deprecatedAPI(api) {
  return {
    code: (0, _utils.apiToMessage)(api),
    legacyCode: ['js', 'deprecated', api],
    message: (0, _utils.gettext)('"' + api + '" is deprecated or unimplemented'),
    description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject24))
  };
}

var APP_GETDETAILS = exports.APP_GETDETAILS = deprecatedAPI('app.getDetails');
var EXT_ONREQUEST = exports.EXT_ONREQUEST = deprecatedAPI('extension.onRequest');
var EXT_ONREQUESTEXTERNAL = exports.EXT_ONREQUESTEXTERNAL = deprecatedAPI('extension.onRequestExternal');
var EXT_SENDREQUEST = exports.EXT_SENDREQUEST = deprecatedAPI('extension.sendRequest');
var TABS_GETALLINWINDOW = exports.TABS_GETALLINWINDOW = deprecatedAPI('tabs.getAllInWindow');
var TABS_GETSELECTED = exports.TABS_GETSELECTED = deprecatedAPI('tabs.getSelected');
var TABS_ONACTIVECHANGED = exports.TABS_ONACTIVECHANGED = deprecatedAPI('tabs.onActiveChanged');
var TABS_ONSELECTIONCHANGED = exports.TABS_ONSELECTIONCHANGED = deprecatedAPI('tabs.onSelectionChanged');
var TABS_SENDREQUEST = exports.TABS_SENDREQUEST = deprecatedAPI('tabs.sendRequest');

function temporaryAPI(api) {
  return {
    code: (0, _utils.apiToMessage)(api),
    legacyCode: ['js', 'temporary', api],
    message: (0, _utils.gettext)('"' + api + '" can cause issues when loaded temporarily'),
    description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject25))
  };
}

var STORAGE_LOCAL = exports.STORAGE_LOCAL = temporaryAPI('storage.local');
var STORAGE_SYNC = exports.STORAGE_SYNC = temporaryAPI('storage.sync');
var IDENTITY_GETREDIRECTURL = exports.IDENTITY_GETREDIRECTURL = temporaryAPI('identity.getRedirectURL');

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _templateObject = _taggedTemplateLiteral(['Config requested from CLI, but not in CLI mode.\n      Please supply a config instead of relying on the getConfig() call.'], ['Config requested from CLI, but not in CLI mode.\n      Please supply a config instead of relying on the getConfig() call.']);

exports.getConfig = getConfig;
exports.terminalWidth = terminalWidth;

var _yargs = __webpack_require__(130);

var _yargs2 = _interopRequireDefault(_yargs);

var _logger = __webpack_require__(3);

var _logger2 = _interopRequireDefault(_logger);

var _utils = __webpack_require__(0);

var _package = __webpack_require__(75);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function getConfig() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$useCLI = _ref.useCLI,
      useCLI = _ref$useCLI === undefined ? true : _ref$useCLI;

  if (useCLI === false) {
    _logger2.default.error((0, _utils.singleLineString)(_templateObject));
    throw new Error('Cannot request config from CLI in library mode');
  }

  return _yargs2.default.usage('Usage: ./$0 [options] addon-package-or-dir \n\n\n      Add-ons Linter (JS Edition) v' + _package.version).option('log-level', {
    describe: 'The log-level to generate',
    type: 'string',
    default: 'fatal',
    choices: ['fatal', 'error', 'warn', 'info', 'debug', 'trace']
  }).option('warnings-as-errors', {
    describe: 'Treat warning as errors',
    type: 'boolean',
    default: false
  }).option('output', {
    alias: 'o',
    describe: 'The type of output to generate',
    type: 'string',
    default: 'text',
    choices: ['json', 'text']
  }).option('metadata', {
    describe: 'Output only metadata as JSON',
    type: 'boolean',
    default: 'false'
  }).option('pretty', {
    describe: 'Prettify JSON output',
    type: 'boolean',
    default: false
  }).option('stack', {
    describe: 'Show stacktraces when errors are thrown',
    type: 'boolean',
    default: false
  }).option('boring', {
    describe: 'Disables colorful shell output',
    type: 'boolean',
    default: false
  }).option('self-hosted', {
    describe: 'Disables messages related to hosting on addons.mozilla.org.',
    type: 'boolean',
    default: false
  }).option('scan-file', {
    alias: ['f'],
    describe: 'Scan a selected file',
    type: 'string',
    requiresArg: true
  })
  // Require one non-option.
  .demand(1).help('help').alias('h', 'help').wrap(terminalWidth());
}

function terminalWidth() {
  var _process = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process;

  if (_process && _process.stdout && _process.stdout.columns > 0) {
    var width = _process.stdout.columns - 2;
    // Terminals less than ten pixels wide seem silly.
    if (width < 10) {
      width = 10;
    }

    return width;
  } else {
    return 78;
  }
}

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IOBase = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _templateObject = _taggedTemplateLiteral(['Unexpected fileStreamType\n          value "', '" should be one of "string",\n          "stream" or "chunk"'], ['Unexpected fileStreamType\n          value "', '" should be one of "string",\n          "stream" or "chunk"']);

var _utils = __webpack_require__(0);

var _const = __webpack_require__(1);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Base class for io operations for both an Xpi or
 * a directory
 */
var IOBase = exports.IOBase = function () {
  function IOBase(packageOrDirPath) {
    _classCallCheck(this, IOBase);

    this.path = packageOrDirPath;
    this.files = {};
    this.entries = [];
    // If this is too large the node process will hit a RangeError
    // when it runs out of memory.
    this.maxSizeBytes = 1024 * 1024 * _const.MAX_FILE_SIZE_MB;
    // A callback that accepts a relative file path and returns
    // true if the path should be included in results for scanning.
    this.shouldScanFile = function () {
      return true;
    };
  }

  _createClass(IOBase, [{
    key: 'setScanFileCallback',
    value: function setScanFileCallback(callback) {
      if (typeof callback === 'function') {
        this.shouldScanFile = callback;
      }
    }
  }, {
    key: 'getFile',
    value: function getFile(path) {
      var fileStreamType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'string';

      switch (fileStreamType) {
        case 'stream':
          return this.getFileAsStream(path);
        case 'string':
          return this.getFileAsString(path);
        case 'chunk':
          // Assuming that chunk is going to be primarily used for finding magic
          // numbers in files, then there's no need to have the default be longer
          // than that.
          return this.getChunkAsBuffer(path, _const.FLAGGED_FILE_MAGIC_NUMBERS_LENGTH);

        default:
          throw new Error((0, _utils.singleLineString)(_templateObject, fileStreamType));
      }
    }
  }, {
    key: 'getFilesByExt',
    value: function getFilesByExt() {
      for (var _len = arguments.length, extensions = Array(_len), _key = 0; _key < _len; _key++) {
        extensions[_key] = arguments[_key];
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {

        for (var _iterator = extensions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var ext = _step.value;

          if (ext.indexOf('.') !== 0) {
            // We use Promise.reject as we're not inside a `then()` or a
            // Promise constructor callback.
            // If we throw here it won't be caught.
            return Promise.reject(new Error("File extension must start with '.'"));
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return this.getFiles().then(function (filesObject) {
        var files = [];

        for (var filename in filesObject) {
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = extensions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var ext = _step2.value;

              if (filename.endsWith(ext)) {
                files.push(filename);
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }

        return files;
      });
    }
  }, {
    key: 'getFiles',
    value: function getFiles() {
      return Promise.reject(new Error('getFiles is not implemented'));
    }
  }, {
    key: 'getFileAsStream',
    value: function getFileAsStream() {
      return Promise.reject(new Error('getFileAsStream is not implemented'));
    }
  }, {
    key: 'getFileAsString',
    value: function getFileAsString() {
      return Promise.reject(new Error('getFileAsString is not implemented'));
    }
  }, {
    key: 'getChunkAsBuffer',
    value: function getChunkAsBuffer() {
      return Promise.reject(new Error('getChunkAsBuffer is not implemented'));
    }
  }]);

  return IOBase;
}();

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readdirPromise = exports.lstatPromise = undefined;
exports.walkPromise = walkPromise;

var _fs = __webpack_require__(8);

var _path = __webpack_require__(6);

var path = _interopRequireWildcard(_path);

var _logger = __webpack_require__(3);

var _logger2 = _interopRequireDefault(_logger);

var _es6Promisify = __webpack_require__(122);

var _es6Promisify2 = _interopRequireDefault(_es6Promisify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var lstatPromise = exports.lstatPromise = (0, _es6Promisify2.default)(_fs.lstat);
var readdirPromise = exports.readdirPromise = (0, _es6Promisify2.default)(_fs.readdir);

function walkPromise(curPath) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$shouldIncludePat = _ref.shouldIncludePath,
      shouldIncludePath = _ref$shouldIncludePat === undefined ? function () {
    return true;
  } : _ref$shouldIncludePat;

  var result = {};
  // Set a basePath var with the initial path
  // so all file paths (the result keys) can
  // be relative to the starting point.
  var basePath = curPath;

  return function walk(curPath) {
    return lstatPromise(curPath).then(function (stat) {
      var relPath = path.relative(basePath, curPath);
      if (!shouldIncludePath(relPath, stat.isDirectory())) {
        _logger2.default.debug('Skipping file path: ' + relPath);
        return result;
      } else if (stat.isFile()) {
        var size = stat.size;

        result[relPath] = { size: size };
      } else if (stat.isDirectory()) {
        return readdirPromise(curPath).then(function (files) {
          // Map the list of files and make a list of readdir
          // promises to pass to Promise.all so we can recursively
          // get the data on all the files in the directory.
          return Promise.all(files.map(function (fileName) {
            return walk(path.join(curPath, fileName));
          }));
        }).then(function () {
          return result;
        });
      }
    });
  }(curPath);
}

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Xpi = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _templateObject = _taggedTemplateLiteral(['DuplicateZipEntry: Entry\n        "', '" has already been seen'], ['DuplicateZipEntry: Entry\n        "', '" has already been seen']);

var _yauzl = __webpack_require__(21);

var _yauzl2 = _interopRequireDefault(_yauzl);

var _stripBomStream = __webpack_require__(19);

var _stripBomStream2 = _interopRequireDefault(_stripBomStream);

var _firstChunkStream = __webpack_require__(17);

var _firstChunkStream2 = _interopRequireDefault(_firstChunkStream);

var _base = __webpack_require__(9);

var _logger = __webpack_require__(3);

var _logger2 = _interopRequireDefault(_logger);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * Simple Promise wrapper for the Yauzl unzipping lib to unpack add-on .xpis.
 * Note: We're using the autoclose feature of yauzl as a result every operation
 * will open the zip, do something and then close it implicitly.
 * This makes the API easy to use and the consumer doesn't need to remember to
 * close the zipfile.
 *
 */

var Xpi = exports.Xpi = function (_IOBase) {
  _inherits(Xpi, _IOBase);

  function Xpi(filePath) {
    var zipLib = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _yauzl2.default;

    _classCallCheck(this, Xpi);

    var _this = _possibleConstructorReturn(this, (Xpi.__proto__ || Object.getPrototypeOf(Xpi)).call(this, filePath));

    _this.zipLib = zipLib;
    return _this;
  }

  _createClass(Xpi, [{
    key: 'open',
    value: function open() {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        _this2.zipLib.open(_this2.path, function (err, zipfile) {
          if (err) {
            return reject(err);
          }
          resolve(zipfile);
        });
      });
    }
  }, {
    key: 'handleEntry',
    value: function handleEntry(entry, reject) {
      if (/\/$/.test(entry.fileName)) {
        return;
      }
      if (!this.shouldScanFile(entry.fileName)) {
        _logger2.default.debug('Skipping file: ' + entry.fileName);
        return;
      }
      if (this.entries.includes(entry.fileName)) {
        _logger2.default.info('Found duplicate file entry: "%s" in package', entry.fileName);
        reject(new Error((0, _utils.singleLineString)(_templateObject, entry.fileName)));
      }
      this.entries.push(entry.fileName);
      this.files[entry.fileName] = entry;
    }
  }, {
    key: 'getFiles',
    value: function getFiles(_onEventsSubscribed) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        // If we have already processed the file and have data
        // on this instance return that.
        if (Object.keys(_this3.files).length) {
          var wantedFiles = {};
          Object.keys(_this3.files).forEach(function (fileName) {
            if (_this3.shouldScanFile(fileName)) {
              wantedFiles[fileName] = _this3.files[fileName];
            } else {
              _logger2.default.debug('Skipping cached file: ' + fileName);
            }
          });
          return resolve(wantedFiles);
        }

        return _this3.open().then(function (zipfile) {

          zipfile.on('entry', function (entry) {
            _this3.handleEntry(entry, reject);
          });

          // When the last entry has been processed
          // and the fd is closed resolve the promise.
          // Note: we cannot use 'end' here as 'end' is fired
          // after the last entry event is emitted and streams
          // may still be being read with openReadStream.
          zipfile.on('close', function () {
            resolve(_this3.files);
          });

          if (_onEventsSubscribed) {
            // Run optional callback when we know the event handlers
            // have been inited. Useful for testing.
            if (typeof _onEventsSubscribed === 'function') {
              _onEventsSubscribed();
            }
          }
        }).catch(reject);
      });
    }
  }, {
    key: 'checkPath',
    value: function checkPath(path) {
      if (!this.files.hasOwnProperty(path)) {
        throw new Error('Path "' + path + '" does not exist in this XPI');
      }

      if (this.files[path].uncompressedSize > this.maxSizeBytes) {
        throw new Error('File "' + path + '" is too large. Aborting.');
      }
    }
  }, {
    key: 'getFileAsStream',
    value: function getFileAsStream(path) {
      var _this4 = this;

      return new Promise(function (resolve, reject) {
        _this4.checkPath(path);
        return _this4.open().then(function (zipfile) {
          zipfile.openReadStream(_this4.files[path], function (err, readStream) {
            if (err) {
              return reject(err);
            }
            resolve(readStream.pipe((0, _stripBomStream2.default)()));
          });
        }).catch(reject);
      });
    }
  }, {
    key: 'getFileAsString',
    value: function getFileAsString(path) {
      return this.getFileAsStream(path).then(function (fileStream) {
        return new Promise(function (resolve, reject) {
          var fileString = '';
          fileStream.on('data', function (chunk) {
            fileString += chunk;
          });

          // Once the file is assembled, resolve the promise.
          fileStream.on('end', function () {
            resolve(fileString);
          });

          fileStream.on('error', reject);
        });
      });
    }
  }, {
    key: 'getChunkAsBuffer',
    value: function getChunkAsBuffer(path, chunkLength) {
      var _this5 = this;

      return new Promise(function (resolve, reject) {
        _this5.checkPath(path);
        return _this5.open().then(function (zipfile) {
          zipfile.openReadStream(_this5.files[path], function (err, readStream) {
            if (err) {
              return reject(err);
            }
            readStream.pipe((0, _firstChunkStream2.default)({ chunkLength: chunkLength }, function (_, enc) {
              resolve(enc);
            }));
          });
        }).catch(reject);
      });
    }
  }]);

  return Xpi;
}(_base.IOBase);

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _esprima = __webpack_require__(124);

var _esprima2 = _interopRequireDefault(_esprima);

var _relaxedJson = __webpack_require__(18);

var _relaxedJson2 = _interopRequireDefault(_relaxedJson);

var _messages = __webpack_require__(2);

var messages = _interopRequireWildcard(_messages);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var JSONParser = function () {
  function JSONParser(jsonString, collector) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref$filename = _ref.filename,
        filename = _ref$filename === undefined ? null : _ref$filename;

    _classCallCheck(this, JSONParser);

    // Add the JSON string to the object; we'll use this for testing.
    this._jsonString = jsonString;

    // Provides ability to directly add messages to
    // the collector.
    this.collector = collector;

    // Set the filename for this file
    this.filename = filename;

    // This marks whether a JSON file is valid; in the case of the base JSON
    // parser, that's just whether it can be parsed and has duplicate keys.
    this.isValid = null;
  }

  _createClass(JSONParser, [{
    key: 'parse',
    value: function parse() {
      var _this = this;

      var RelaxedJSON = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _relaxedJson2.default;

      try {
        this.parsedJSON = JSON.parse(this._jsonString);
      } catch (originalError) {
        // First we'll try to remove comments with esprima;
        // WebExtension manifests can contain comments, so we'll strip
        // them out and see if we can parse the JSON.
        // If not it's just garbage JSON and we error.
        //
        // Originally from https://github.com/abarreir/crx2ff/blob/d2b882056f902d751ad05e329efda7eddcb9d268/libs/ext-converter.js#L19-L37
        var manifestString = 'var o = ' + this._jsonString;
        try {
          // This converts the JSON into a real JS object, and removes any
          // comments from the JS code.
          // This has some drawbacks because JSON and JS are not _100%_
          // compatible. This is largely to do with Unicode characters we
          // wouldn't expect to see in manifests anyway, and it should simply be
          // a JSON parse error anyway.
          // See:
          // http://stackoverflow.com/questions/23752156/are-all-json-objects-also-valid-javascript-objects/23753148#23753148
          // https://github.com/judofyr/timeless/issues/57#issuecomment-31872462
          var tokens = _esprima2.default.tokenize(manifestString, { comment: true }).slice(3);
          this._jsonString = tokens.reduce(function (json, token) {
            // Ignore line comments (`// comments`) and just return the existing
            // json we've built.
            if (token.type === 'LineComment') {
              return json;
            }

            // Block comments are not allowed, so this is an error.
            if (token.type === 'BlockComment') {
              _this.collector.addError(messages.JSON_BLOCK_COMMENTS);
              _this.isValid = false;
            }

            return '' + json + token.value;
          }, '');

          // We found block-level comments, so this manifest is not valid.
          // Don't bother parsing it again.
          if (this.isValid === false) {
            return;
          }

          this.parsedJSON = JSON.parse(this._jsonString);
        } catch (error) {
          // There was still an error, so looks like this manifest is actually
          // invalid.
          var errorData = Object.assign({}, messages.JSON_INVALID, {
            file: this.filename,
            description: error.message
          });
          this.collector.addError(errorData);
          this.isValid = false;
          return;
        }
      }

      // Check for duplicate keys, which renders the manifest invalid.
      this._checkForDuplicateKeys(RelaxedJSON);

      // If never marked as invalid, this is a valid JSON file.
      if (this.isValid !== false) {
        this.isValid = true;
      }
    }
  }, {
    key: '_checkForDuplicateKeys',
    value: function _checkForDuplicateKeys() {
      var RelaxedJSON = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _relaxedJson2.default;

      try {
        RelaxedJSON.parse(this._jsonString, { duplicate: true, tolerant: true });
      } catch (err) {
        if (err.warnings && err.warnings.length > 0) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = err.warnings[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var error = _step.value;

              if (error.message.startsWith('Duplicate key:')) {
                var message = Object.assign({}, messages.JSON_DUPLICATE_KEY, {
                  file: this.filename,
                  line: error.line,
                  description: error.message + ' found in JSON'
                });
                this.collector.addError(message);
                this.isValid = false;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }
      }
    }
  }]);

  return JSONParser;
}();

exports.default = JSONParser;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.hasBrowserApi = hasBrowserApi;
exports.isDeprecatedApi = isDeprecatedApi;
exports.isTemporaryApi = isTemporaryApi;

var _const = __webpack_require__(1);

var _imported = __webpack_require__(15);

var _imported2 = _interopRequireDefault(_imported);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var schemaArrayNames = ['functions', 'events'];
var schemaObjectNames = ['types', 'properties'];
var schemas = _imported2.default.reduce(function (all, current) {
  return _extends({}, all, _defineProperty({}, current.id, current));
}, {});

function hasBrowserApi(namespace, property) {
  var schema = schemas[namespace];
  // We "have" the API if it's deprecated or temporary so
  // we don't double warn.
  if (isDeprecatedApi(namespace, property) || isTemporaryApi(namespace, property)) {
    return true;
  }
  if (!schema) {
    return false;
  }
  return hasObjectProperty(schema, property) || hasArrayProperty(schema, property);
}

function hasObjectProperty(schema, property) {
  return schemaObjectNames.some(function (schemaProperty) {
    return schema[schemaProperty] && property in schema[schemaProperty];
  });
}

function hasArrayProperty(schema, property) {
  return schemaArrayNames.some(function (schemaProperty) {
    var namespaceProperties = schema[schemaProperty];
    return Array.isArray(namespaceProperties) && namespaceProperties.some(function (schemaItem) {
      return schemaItem.name === property;
    });
  });
}

function isDeprecatedApi(namespace, property) {
  return _const.DEPRECATED_APIS.includes(namespace + '.' + property);
}

function isTemporaryApi(namespace, property) {
  return _const.TEMPORARY_APIS.includes(namespace + '.' + property);
}

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isToolkitVersionString = isToolkitVersionString;
exports.isValidVersionString = isValidVersionString;
exports.isRelativeURL = isRelativeURL;

var _urlParse = __webpack_require__(20);

var _urlParse2 = _interopRequireDefault(_urlParse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var VALIDNUMRX = /^[0-9]{1,5}$/;

// Firefox's version format is laxer than Chrome's, it accepts:
// https://developer.mozilla.org/en-US/docs/Toolkit_version_format
// We choose a slightly restricted version of that format (but still more
// permissive than Chrome) to allow Beta addons, per:
// https://developer.mozilla.org/en-US/Add-ons/AMO/Policy/Maintenance
var TOOLKIT_VERSION_REGEX = /^(\d+\.?){1,3}\.(\d+([A-z]+(\-?[\dA-z]+)?))$/;

function isToolkitVersionString(version) {
  return TOOLKIT_VERSION_REGEX.test(version) && isValidVersionString(version);
}

function isValidVersionString(version) {
  // We should be starting with a string.
  if (typeof version !== 'string') {
    return false;
  }
  // If valid toolkit version string, return true early
  if (TOOLKIT_VERSION_REGEX.test(version)) {
    return true;
  }
  var parts = version.split('.');
  if (parts.length > 4) {
    return false;
  }
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = parts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var part = _step.value;

      // Leading or multiple zeros not allowed.
      if (part.startsWith('0') && part.length > 1) {
        return false;
      }
      // Disallow things like 123e5 which parseInt will convert.
      if (!VALIDNUMRX.test(part)) {
        return false;
      }
      part = parseInt(part, 10);
      if (Number.isNaN(part) || part < 0 || part > 65535) {
        return false;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return true;
}

function isRelativeURL(url) {
  var parsed = (0, _urlParse2.default)(url);

  if (parsed.protocol !== '' || parsed.href.startsWith('//')) {
    return false;
  }

  return true;
}

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var req = __webpack_require__(76);
exports.default = req.keys().map(function (key) {
  return req(key);
});

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = {
	"id": "manifest",
	"permissions": [],
	"definitions": {},
	"refs": {},
	"types": {
		"WebExtensionManifest": {
			"allOf": [
				{
					"type": "object",
					"description": "Represents a WebExtension manifest.json file",
					"properties": {
						"manifest_version": {
							"type": "integer",
							"minimum": 2,
							"maximum": 2
						},
						"minimum_chrome_version": {
							"type": "string"
						},
						"applications": {
							"type": "object",
							"properties": {
								"gecko": {
									"$ref": "#/types/FirefoxSpecificProperties"
								}
							}
						},
						"browser_specific_settings": {
							"type": "object",
							"properties": {
								"gecko": {
									"$ref": "#/types/FirefoxSpecificProperties"
								}
							}
						},
						"name": {
							"type": "string",
							"preprocess": "localize",
							"maxLength": 45,
							"minLength": 2
						},
						"short_name": {
							"type": "string",
							"preprocess": "localize"
						},
						"description": {
							"type": "string",
							"preprocess": "localize"
						},
						"author": {
							"type": "string",
							"preprocess": "localize",
							"onError": "warn"
						},
						"version": {
							"type": "string",
							"description": "Version string must be a string comprising one to four dot-separated integers (0-65535). E.g: 1.2.3.",
							"format": "versionString"
						},
						"homepage_url": {
							"type": "string",
							"format": "ignore",
							"preprocess": "localize",
							"oneOf": [
								{
									"format": "url"
								},
								{
									"pattern": "^__MSG_.*?__$"
								}
							]
						},
						"icons": {
							"type": "object",
							"patternProperties": {
								"^[1-9]\\d*$": {
									"type": "string"
								}
							},
							"additionalProperties": false
						},
						"incognito": {
							"type": "string",
							"enum": [
								"spanning"
							],
							"onError": "warn"
						},
						"background": {
							"anyOf": [
								{
									"type": "object",
									"properties": {
										"page": {
											"$ref": "manifest#/types/ExtensionURL"
										},
										"persistent": {
											"$ref": "#/types/PersistentBackgroundProperty"
										}
									},
									"required": [
										"page"
									],
									"additionalProperties": false
								},
								{
									"type": "object",
									"properties": {
										"scripts": {
											"type": "array",
											"items": {
												"$ref": "manifest#/types/ExtensionURL"
											}
										},
										"persistent": {
											"$ref": "#/types/PersistentBackgroundProperty"
										}
									},
									"required": [
										"scripts"
									],
									"additionalProperties": false
								}
							]
						},
						"options_ui": {
							"type": "object",
							"properties": {
								"page": {
									"$ref": "manifest#/types/ExtensionURL"
								},
								"browser_style": {
									"type": "boolean"
								},
								"chrome_style": {
									"type": "boolean"
								},
								"open_in_tab": {
									"type": "boolean"
								}
							},
							"additionalProperties": {
								"deprecated": "An unexpected property was found in the WebExtension manifest"
							},
							"required": [
								"page"
							]
						},
						"content_scripts": {
							"type": "array",
							"items": {
								"$ref": "#/types/ContentScript"
							}
						},
						"content_security_policy": {
							"type": "string",
							"format": "contentSecurityPolicy",
							"onError": "warn"
						},
						"permissions": {
							"type": "array",
							"items": {
								"anyOf": [
									{
										"$ref": "#/types/Permission"
									},
									{
										"type": "string",
										"deprecated": "Unknown permission ${value}",
										"format": "deprecated"
									}
								]
							},
							"uniqueItems": true
						},
						"web_accessible_resources": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"developer": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string",
									"preprocess": "localize"
								},
								"url": {
									"type": "string",
									"preprocess": "localize"
								}
							}
						}
					},
					"required": [
						"manifest_version",
						"name",
						"version"
					]
				},
				{
					"$ref": "browserAction#/definitions/WebExtensionManifest"
				},
				{
					"$ref": "commands#/definitions/WebExtensionManifest"
				},
				{
					"$ref": "devtools#/definitions/WebExtensionManifest"
				},
				{
					"$ref": "extension_protocol_handlers#/definitions/WebExtensionManifest"
				},
				{
					"$ref": "i18n#/definitions/WebExtensionManifest"
				},
				{
					"$ref": "omnibox#/definitions/WebExtensionManifest"
				},
				{
					"$ref": "pageAction#/definitions/WebExtensionManifest"
				},
				{
					"$ref": "sidebarAction#/definitions/WebExtensionManifest"
				},
				{
					"$ref": "theme#/definitions/WebExtensionManifest"
				},
				{
					"$ref": "url_overrides#/definitions/WebExtensionManifest"
				}
			]
		},
		"Permission": {
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"alarms",
						"clipboardRead",
						"clipboardWrite",
						"geolocation",
						"idle",
						"notifications",
						"storage"
					]
				},
				{
					"$ref": "#/types/MatchPattern"
				},
				{
					"$ref": "bookmarks#/definitions/Permission"
				},
				{
					"$ref": "browsingData#/definitions/Permission"
				},
				{
					"$ref": "contextMenus#/definitions/Permission"
				},
				{
					"$ref": "contextualIdentities#/definitions/Permission"
				},
				{
					"$ref": "cookies#/definitions/Permission"
				},
				{
					"$ref": "downloads#/definitions/Permission"
				},
				{
					"$ref": "experiments#/definitions/Permission"
				},
				{
					"$ref": "history#/definitions/Permission"
				},
				{
					"$ref": "identity#/definitions/Permission"
				},
				{
					"$ref": "management#/definitions/Permission"
				},
				{
					"$ref": "privacy#/definitions/Permission"
				},
				{
					"$ref": "runtime#/definitions/Permission"
				},
				{
					"$ref": "sessions#/definitions/Permission"
				},
				{
					"$ref": "tabs#/definitions/Permission"
				},
				{
					"$ref": "topSites#/definitions/Permission"
				},
				{
					"$ref": "webNavigation#/definitions/Permission"
				},
				{
					"$ref": "webRequest#/definitions/Permission"
				}
			]
		},
		"HttpURL": {
			"type": "string",
			"format": "url",
			"pattern": "^https?://.*$"
		},
		"ExtensionURL": {
			"type": "string",
			"format": "strictRelativeUrl"
		},
		"ExtensionID": {
			"anyOf": [
				{
					"type": "string",
					"pattern": "^\\{[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\\}$"
				},
				{
					"type": "string",
					"pattern": "^[a-zA-Z0-9-._]*@[a-zA-Z0-9-._]+$"
				}
			]
		},
		"FirefoxSpecificProperties": {
			"type": "object",
			"properties": {
				"id": {
					"$ref": "#/types/ExtensionID"
				},
				"update_url": {
					"type": "string",
					"format": "secureUrl"
				},
				"strict_min_version": {
					"type": "string",
					"default": "42a1",
					"description": "Minimum version of Gecko to support. Defaults to '42a1'. (Requires Gecko 45)",
					"pattern": "^[0-9]{1,3}(\\.[a-z0-9]+)+$"
				},
				"strict_max_version": {
					"type": "string",
					"default": "*",
					"description": "Maximum version of Gecko to support. Defaults to '*'. (Requires Gecko 45)",
					"pattern": "^[0-9]{1,3}(\\.[a-z0-9*]+)+$"
				}
			}
		},
		"MatchPattern": {
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"<all_urls>"
					]
				},
				{
					"type": "string",
					"pattern": "^(https?|file|ftp|\\*)://(\\*|\\*\\.[^*/]+|[^*/]+)/.*$"
				},
				{
					"type": "string",
					"pattern": "^file:///.*$"
				}
			]
		},
		"ContentScript": {
			"type": "object",
			"description": "Details of the script or CSS to inject. Either the code or the file property must be set, but both may not be set at the same time. Based on InjectDetails, but using underscore rather than camel case naming conventions.",
			"properties": {
				"matches": {
					"type": "array",
					"minItems": 1,
					"items": {
						"$ref": "#/types/MatchPattern"
					}
				},
				"exclude_matches": {
					"type": "array",
					"minItems": 1,
					"items": {
						"$ref": "#/types/MatchPattern"
					}
				},
				"include_globs": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"exclude_globs": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"css": {
					"type": "array",
					"description": "The list of CSS files to inject",
					"items": {
						"$ref": "manifest#/types/ExtensionURL"
					}
				},
				"js": {
					"type": "array",
					"description": "The list of CSS files to inject",
					"items": {
						"$ref": "manifest#/types/ExtensionURL"
					}
				},
				"all_frames": {
					"type": "boolean",
					"description": "If allFrames is <code>true</code>, implies that the JavaScript or CSS should be injected into all frames of current page. By default, it's <code>false</code> and is only injected into the top frame."
				},
				"match_about_blank": {
					"type": "boolean",
					"description": "If matchAboutBlank is true, then the code is also injected in about:blank and about:srcdoc frames if your extension has access to its parent document. Code cannot be inserted in top-level about:-frames. By default it is <code>false</code>."
				},
				"run_at": {
					"allOf": [
						{
							"$ref": "extensionTypes#/types/RunAt"
						},
						{
							"description": "The soonest that the JavaScript or CSS will be injected into the tab. Defaults to \"document_idle\"."
						}
					]
				}
			},
			"required": [
				"matches"
			]
		},
		"IconPath": {
			"anyOf": [
				{
					"type": "object",
					"patternProperties": {
						"^[1-9]\\d*$": {
							"$ref": "manifest#/types/ExtensionURL"
						}
					},
					"additionalProperties": false
				},
				{
					"$ref": "manifest#/types/ExtensionURL"
				}
			]
		},
		"IconImageData": {
			"anyOf": [
				{
					"type": "object",
					"patternProperties": {
						"^[1-9]\\d*$": {
							"$ref": "#/types/ImageData"
						}
					},
					"additionalProperties": false
				},
				{
					"$ref": "#/types/ImageData"
				}
			]
		},
		"ImageData": {
			"type": "object",
			"isInstanceOf": "ImageData",
			"postprocess": "convertImageDataToURL"
		},
		"UnrecognizedProperty": {
			"deprecated": "An unexpected property was found in the WebExtension manifest."
		},
		"PersistentBackgroundProperty": {
			"type": "boolean",
			"deprecated": "Event pages are not currently supported. This will run as a persistent background page."
		}
	},
	"$ref": "#/types/WebExtensionManifest"
};

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = require("first-chunk-stream");

/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = require("relaxed-json");

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = require("strip-bom-stream");

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = require("url-parse");

/***/ }),
/* 21 */
/***/ (function(module, exports) {

module.exports = require("yauzl");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _templateObject = _taggedTemplateLiteral(['colorize passed invalid type.\n          Should be one of ', ''], ['colorize passed invalid type.\n          Should be one of ', '']),
    _templateObject2 = _taggedTemplateLiteral(['No ', ' or ', '\n                   was found in the package metadata'], ['No ', ' or ', '\n                   was found in the package metadata']);

var _path = __webpack_require__(6);

var _columnify = __webpack_require__(119);

var _columnify2 = _interopRequireDefault(_columnify);

var _chalk = __webpack_require__(117);

var _chalk2 = _interopRequireDefault(_chalk);

var _dispensary = __webpack_require__(121);

var _dispensary2 = _interopRequireDefault(_dispensary);

var _utils = __webpack_require__(10);

var _cli = __webpack_require__(7);

var _const = __webpack_require__(1);

var constants = _interopRequireWildcard(_const);

var _libraries = __webpack_require__(29);

var _messages = __webpack_require__(2);

var messages = _interopRequireWildcard(_messages);

var _utils2 = __webpack_require__(0);

var _logger = __webpack_require__(3);

var _logger2 = _interopRequireDefault(_logger);

var _collector = __webpack_require__(25);

var _collector2 = _interopRequireDefault(_collector);

var _installrdf = __webpack_require__(40);

var _installrdf2 = _interopRequireDefault(_installrdf);

var _manifestjson = __webpack_require__(41);

var _manifestjson2 = _interopRequireDefault(_manifestjson);

var _binary = __webpack_require__(66);

var _binary2 = _interopRequireDefault(_binary);

var _chromemanifest = __webpack_require__(67);

var _chromemanifest2 = _interopRequireDefault(_chromemanifest);

var _css = __webpack_require__(68);

var _css2 = _interopRequireDefault(_css);

var _filename = __webpack_require__(69);

var _filename2 = _interopRequireDefault(_filename);

var _html = __webpack_require__(70);

var _html2 = _interopRequireDefault(_html);

var _javascript = __webpack_require__(71);

var _javascript2 = _interopRequireDefault(_javascript);

var _json = __webpack_require__(72);

var _json2 = _interopRequireDefault(_json);

var _rdf = __webpack_require__(73);

var _rdf2 = _interopRequireDefault(_rdf);

var _io = __webpack_require__(28);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Linter = function () {
  function Linter(config) {
    _classCallCheck(this, Linter);

    this.config = config;
    this.packagePath = config._[0];
    this.io;
    this.chalk = new _chalk2.default.constructor({ enabled: !this.config.boring });
    this.collector = new _collector2.default(config);
    this.addonMetadata = null;
    this.shouldScanFile = this.shouldScanFile.bind(this);
  }

  _createClass(Linter, [{
    key: 'colorize',
    value: function colorize(type) {
      switch (type) {
        case constants.VALIDATION_ERROR:
          return this.chalk.red;
        case constants.VALIDATION_WARNING:
          return this.chalk.yellow;
        case constants.VALIDATION_NOTICE:
          return this.chalk.blue;
        default:
          throw new Error((0, _utils2.singleLineString)(_templateObject, constants.MESSAGE_TYPES.join(', ')));
      }
    }
  }, {
    key: 'handleError',
    value: function handleError(err) {
      var _console = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : console;

      if (err.message.includes('DuplicateZipEntry')) {
        this.collector.addError(messages.DUPLICATE_XPI_ENTRY);
        this.print(_console);
      } else if (err.message.includes('end of central directory record signature not found')) {
        this.collector.addError(messages.BAD_ZIPFILE);
        this.print(_console);
      } else {
        if (this.config.stack === true) {
          _console.error(err.stack);
        } else {
          _console.error(this.chalk.red(err.message || err));
        }
      }
    }
  }, {
    key: 'print',
    value: function print() {
      var _console = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : console;

      if (this.config.output === 'none') {
        return;
      }
      if (this.config.output === 'json') {
        _console.log(this.toJSON(this.config.pretty));
      } else {
        _console.log(this.textOutput());
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$input = _ref.input,
          input = _ref$input === undefined ? this.output : _ref$input,
          _ref$pretty = _ref.pretty,
          pretty = _ref$pretty === undefined ? this.config.pretty : _ref$pretty,
          _ref$_JSON = _ref._JSON,
          _JSON = _ref$_JSON === undefined ? JSON : _ref$_JSON;

      var args = [input];
      if (pretty === true) {
        args.push(null);
        args.push(4);
      }
      return _JSON.stringify.apply(null, args);
    }
  }, {
    key: 'textOutput',
    value: function textOutput() {
      var _this = this;

      var _terminalWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _cli.terminalWidth;

      var maxColumns = _terminalWidth();
      var out = [];

      out.push((0, _utils2.gettext)('Validation Summary:'));
      out.push('');
      out.push((0, _columnify2.default)(this.output.summary, {
        showHeaders: false,
        minWidth: 15
      }));
      out.push('');

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        var _loop = function _loop() {
          var type = _step.value;
          messageType = type + 's';

          if (_this.output[messageType].length) {
            outputConfig = {
              code: {
                dataTransform: function dataTransform(value) {
                  return _this.colorize(type)(value);
                },
                headingTransform: function headingTransform() {
                  return (0, _utils2.gettext)('Code');
                },
                maxWidth: 35
              },
              message: {
                headingTransform: function headingTransform() {
                  return (0, _utils2.gettext)('Message');
                },
                maxWidth: (maxColumns - 35) * .25
              },
              description: {
                headingTransform: function headingTransform() {
                  return (0, _utils2.gettext)('Description');
                },
                maxWidth: (maxColumns - 35) * .5
              },
              file: {
                headingTransform: function headingTransform() {
                  return (0, _utils2.gettext)('File');
                },
                maxWidth: (maxColumns - 35) * .25
              },
              line: {
                headingTransform: function headingTransform() {
                  return (0, _utils2.gettext)('Line');
                },
                maxWidth: 6
              },
              column: {
                headingTransform: function headingTransform() {
                  return (0, _utils2.gettext)('Column');
                },
                maxWidth: 6
              }
            };
            outputColumns = ['code', 'message', 'description', 'file', 'line', 'column'];

            // If the terminal is this small we cave and don't size things
            // contextually anymore.

            if (maxColumns < 60) {
              delete outputColumns[outputColumns.indexOf('column')];
              delete outputConfig.column;
              delete outputColumns[outputColumns.indexOf('description')];
              delete outputConfig.description;
              delete outputColumns[outputColumns.indexOf('line')];
              delete outputConfig.line;

              outputConfig.message.maxWidth = 15;
              outputConfig.file.maxWidth = 15;
            } else if (maxColumns < 78) {
              delete outputColumns[outputColumns.indexOf('description')];
              delete outputConfig.description;

              outputConfig.message.maxWidth = (maxColumns - 47) * .5;
              outputConfig.file.maxWidth = (maxColumns - 35) * .5;
            }

            out.push(messageType.toUpperCase() + ':');
            out.push('');
            out.push((0, _columnify2.default)(_this.output[messageType], {
              maxWidth: 35,
              columns: outputColumns,
              columnSplitter: '   ',
              config: outputConfig
            }));
          }
        };

        for (var _iterator = constants.MESSAGE_TYPES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var messageType;
          var outputConfig;
          var outputColumns;

          _loop();
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (this.output.scanFile) {
        out.push('Selected files: ' + this.output.scanFile.join(', '));
        out.push('');
      }

      return out.join('\n');
    }
  }, {
    key: 'getAddonMetadata',
    value: function getAddonMetadata() {
      var _this2 = this;

      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref2$_log = _ref2._log,
          _log = _ref2$_log === undefined ? _logger2.default : _ref2$_log,
          _ref2$ManifestJSONPar = _ref2.ManifestJSONParser,
          ManifestJSONParser = _ref2$ManifestJSONPar === undefined ? _manifestjson2.default : _ref2$ManifestJSONPar;

      if (this.addonMetadata !== null) {
        _log.debug('Metadata already set; returning cached metadata.');
        return Promise.resolve(this.addonMetadata);
      }

      return this.io.getFiles().then(function (files) {
        if (files.hasOwnProperty(_const.INSTALL_RDF) && files.hasOwnProperty(_const.MANIFEST_JSON)) {
          _log.warn('Both ' + _const.INSTALL_RDF + ' and ' + _const.MANIFEST_JSON + ' found');
          _this2.collector.addError(messages.MULTIPLE_MANIFESTS);
          return {};
        } else if (files.hasOwnProperty(_const.INSTALL_RDF)) {
          _log.info('Retrieving metadata from install.rdf');
          return _this2.io.getFileAsString(_const.INSTALL_RDF).then(function (rdfString) {
            // Gets an xml document object.
            var rdfScanner = new _rdf2.default(rdfString, _const.INSTALL_RDF);
            return rdfScanner.getContents();
          }).then(function (xmlDoc) {
            _log.info('Got xmlDoc, running InstallRdfParser.getMetadata()');
            return new _installrdf2.default(xmlDoc, _this2.collector).getMetadata();
          });
        } else if (files.hasOwnProperty(_const.MANIFEST_JSON)) {
          _log.info('Retrieving metadata from manifest.json');
          return _this2.io.getFileAsString(_const.MANIFEST_JSON).then(function (json) {
            var manifestParser = new ManifestJSONParser(json, _this2.collector, { selfHosted: _this2.config.selfHosted, io: _this2.io });
            return manifestParser.getMetadata();
          });
        } else {
          _log.warn((0, _utils2.singleLineString)(_templateObject2, _const.INSTALL_RDF, _const.MANIFEST_JSON));
          _this2.collector.addNotice(messages.TYPE_NO_MANIFEST_JSON);
          _this2.collector.addNotice(messages.TYPE_NO_INSTALL_RDF);
          return {};
        }
      }).then(function (addonMetadata) {
        _this2.addonMetadata = addonMetadata;

        // The type must be explicitly defined. This behaviour differs the
        // historical approach by the amo-validator.
        // See mozilla/addons-linter#411.
        // In due course metadata checking code may surpass this error
        // being added here.
        if (!_this2.addonMetadata.type) {
          _log.error('Addon type lookup failed');
          _this2.collector.addError(messages.TYPE_NOT_DETERMINED);
        }

        return _this2.addonMetadata;
      });
    }
  }, {
    key: 'checkFileExists',
    value: function checkFileExists(filepath) {
      var _lstatPromise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _utils.lstatPromise;

      var invalidMessage = new Error('Path "' + filepath + '" is not a file or directory or does not exist.');
      return _lstatPromise(filepath).then(function (stats) {
        if (stats.isFile() === true || stats.isDirectory() === true) {
          return stats;
        } else {
          throw invalidMessage;
        }
      }).catch(function (err) {
        if (err.code !== 'ENOENT') {
          throw err;
        } else {
          throw invalidMessage;
        }
      });
    }
  }, {
    key: 'scanFiles',
    value: function scanFiles(files) {
      var promises = [];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = files[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var filename = _step2.value;

          promises.push(this.scanFile(filename));
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return Promise.all(promises);
    }
  }, {
    key: 'getScanner',
    value: function getScanner(filename) {
      if (filename === _const.CHROME_MANIFEST) {
        return _chromemanifest2.default;
      }

      if (filename.match(constants.HIDDEN_FILE_REGEX) || filename.match(constants.FLAGGED_FILE_REGEX) || constants.FLAGGED_FILE_EXTENSIONS.includes((0, _path.extname)(filename)) || filename.match(constants.ALREADY_SIGNED_REGEX)) {
        return _filename2.default;
      }

      switch ((0, _path.extname)(filename)) {
        case '.css':
          return _css2.default;
        case '.html':
        case '.htm':
          return _html2.default;
        case '.js':
          return _javascript2.default;
        case '.json':
          return _json2.default;
        case '.rdf':
          return _rdf2.default;
        default:
          return _binary2.default;
      }
    }
  }, {
    key: 'scanFile',
    value: function scanFile(filename) {
      var _this3 = this;

      var ScannerClass = this.getScanner(filename);
      return this.io.getFile(filename, ScannerClass.fileResultType).then(function (fileData) {
        // First: check that this file is under our 2MB parsing limit. Otherwise
        // it will be very slow and may crash the lint with an out-of-memory
        // error.
        var fileSize = typeof _this3.io.files[filename].size !== 'undefined' ? _this3.io.files[filename].size : _this3.io.files[filename].uncompressedSize;
        var maxSize = 1024 * 1024 * constants.MAX_FILE_SIZE_TO_PARSE_MB;

        if (ScannerClass !== _binary2.default && fileSize >= maxSize) {
          var filesizeError = Object.assign({}, messages.FILE_TOO_LARGE, {
            file: filename,
            type: constants.VALIDATION_ERROR
          });
          return Promise.resolve([filesizeError]);
        }

        var scanner = new ScannerClass(fileData, filename, {
          addonMetadata: _this3.addonMetadata,
          // This is for the JSONScanner, which is a bit of an anomaly and
          // accesses the collector directly.
          // TODO: Bring this in line with other scanners, see:
          // https://github.com/mozilla/addons-linter/issues/895
          collector: _this3.collector
        });

        return scanner.scan();
      })
      // messages should be a list of raw message data objects.
      .then(function (messages) {
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = messages[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var message = _step3.value;

            if (typeof message.type === 'undefined') {
              throw new Error('message.type must be defined');
            }
            _this3.collector._addMessage(message.type, message);
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        return _this3.output;
      });
    }
  }, {
    key: 'extractMetadata',
    value: function extractMetadata() {
      var _this4 = this;

      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref3$_Crx = _ref3._Crx,
          _Crx = _ref3$_Crx === undefined ? _io.Crx : _ref3$_Crx,
          _ref3$_console = _ref3._console,
          _console = _ref3$_console === undefined ? console : _ref3$_console,
          _ref3$_Directory = _ref3._Directory,
          _Directory = _ref3$_Directory === undefined ? _io.Directory : _ref3$_Directory,
          _ref3$_Xpi = _ref3._Xpi,
          _Xpi = _ref3$_Xpi === undefined ? _io.Xpi : _ref3$_Xpi;

      return (0, _utils2.checkMinNodeVersion)().then(function () {
        return _this4.checkFileExists(_this4.packagePath);
      }).then(function (stats) {
        if (stats.isFile() === true) {
          if (_this4.packagePath.endsWith('.crx')) {
            _logger2.default.info('Package is a file ending in .crx; parsing as a CRX');
            return new _Crx(_this4.packagePath);
          } else {
            _logger2.default.info('Package is a file. Attempting to parse as an .xpi/.zip');
            return new _Xpi(_this4.packagePath);
          }
        } else if (stats.isDirectory()) {
          _logger2.default.info('Package path is a directory. Parsing as a directory');
          return new _Directory(_this4.packagePath);
        }
      }).then(function (io) {
        io.setScanFileCallback(_this4.shouldScanFile);
        _this4.io = io;
        return _this4.getAddonMetadata();
      }).then(function (addonMetadata) {
        return _this4.markSpecialFiles(addonMetadata);
      }).then(function (addonMetadata) {
        _logger2.default.info('Metadata option is set to %s', _this4.config.metadata);
        if (_this4.config.metadata === true) {
          var metadataObject = {
            // Reflects if errors were encountered in extraction
            // of metadata.
            hasErrors: _this4.output.errors.length !== 0,
            metadata: addonMetadata
          };

          // If errors exist the data is available via the
          // errors list.
          if (metadataObject.hasErrors) {
            metadataObject.errors = _this4.output.errors;
          }

          _console.log(_this4.toJSON({ input: metadataObject }));
        }

        return addonMetadata;
      });
    }
  }, {
    key: 'shouldScanFile',
    value: function shouldScanFile(fileOrDirName, isDir) {
      if (this.config.shouldScanFile) {
        return this.config.shouldScanFile(fileOrDirName, isDir);
      }

      if (this.config.scanFile) {
        var manifestFileNames = ['install.rdf', 'manifest.json', 'package.json'];

        // Always scan sub directories and the manifest files,
        // or the linter will not be able to detect the addon type.
        if (isDir || manifestFileNames.includes(fileOrDirName)) {
          return true;
        }

        return this.config.scanFile.some(function (v) {
          return v === fileOrDirName;
        });
      }

      // Defaults to true.
      return true;
    }
  }, {
    key: 'scan',
    value: function scan() {
      var _this5 = this;

      var deps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return this.extractMetadata(deps).then(function () {
        return _this5.io.getFiles();
      }).then(function (files) {
        if (_this5.config.scanFile) {
          if (!_this5.config.scanFile.some(function (f) {
            return Object.keys(files).includes(f);
          })) {
            var _files = _this5.config.scanFile.join(', ');
            throw new Error('Selected file(s) not found: ' + _files);
          }
        }

        // Known libraries do not need to be scanned
        var filesWithoutJSLibraries = Object.keys(files).filter(function (file) {
          return !_this5.addonMetadata.jsLibs.hasOwnProperty(file);
        }, _this5);
        return _this5.scanFiles(filesWithoutJSLibraries);
      }).then(function () {
        _this5.print();
        // This is skipped in the code coverage because the
        // test runs against un-instrumented code.
        /* istanbul ignore if  */
        if (_this5.config.runAsBinary === true) {
          var exitCode = _this5.output.errors.length > 0 ? 1 : 0;
          if (exitCode === 0 && _this5.config.warningsAsErrors === true) {
            exitCode = _this5.output.warnings.length > 0 ? 1 : 0;
          }
          process.exit(exitCode);
        }
      }).catch(function (err) {
        _this5.handleError(err, deps._console);
        throw err;
      });
    }
  }, {
    key: 'run',
    value: function run() {
      var _this6 = this;

      var deps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (this.config.metadata === true) {
        return this.extractMetadata(deps).then(function () {
          // This is skipped in the code coverage because the
          // test runs against un-instrumented code.
          /* istanbul ignore if  */
          if (_this6.config.runAsBinary === true) {
            process.exit(_this6.output.errors.length > 0 ? 1 : 0);
          }
        }).catch(function (err) {
          _logger2.default.debug(err);
          _this6.handleError(err, deps._console);
          throw err;
        });
      } else {
        return this.scan(deps);
      }
    }
  }, {
    key: 'markSpecialFiles',
    value: function markSpecialFiles(addonMetadata) {
      var _this7 = this;

      return this._markEmptyFiles(addonMetadata).then(function (addonMetadata) {
        return _this7._markJSLibs(addonMetadata);
      }).then(function (addonMetadata) {
        return _this7._markBannedLibs(addonMetadata);
      });
    }
  }, {
    key: '_markBannedLibs',
    value: function _markBannedLibs(addonMetadata) {
      var _unadvisedLibraries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _libraries.UNADVISED_LIBRARIES;

      for (var pathToFile in addonMetadata.jsLibs) {
        if (_libraries.BANNED_LIBRARIES.includes(addonMetadata.jsLibs[pathToFile])) {
          this.collector.addError(Object.assign({}, messages.BANNED_LIBRARY, {
            file: pathToFile
          }));
        }

        if (_unadvisedLibraries.includes(addonMetadata.jsLibs[pathToFile])) {
          this.collector.addWarning(Object.assign({}, messages.UNADVISED_LIBRARY, {
            file: pathToFile
          }));
        }
      }

      return addonMetadata;
    }
  }, {
    key: '_markEmptyFiles',
    value: function _markEmptyFiles(addonMetadata) {
      var emptyFiles = [];

      return this.io.getFiles().then(function (files) {
        for (var filename in files) {
          if (typeof files[filename].size === 'undefined' && typeof files[filename].uncompressedSize === 'undefined') {
            throw new Error('No size available for ' + filename);
          }

          if (files[filename].size === 0 || files[filename].uncompressedSize === 0) {
            emptyFiles.push(filename);
          }
        }

        addonMetadata.emptyFiles = emptyFiles;
        return addonMetadata;
      });
    }
  }, {
    key: '_markJSLibs',
    value: function _markJSLibs(addonMetadata) {
      var _this8 = this;

      var dispensary = new _dispensary2.default();
      var jsLibs = {};
      var promises = [];

      return this.io.getFilesByExt('.js').then(function (files) {
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          var _loop2 = function _loop2() {
            var filename = _step4.value;

            promises.push(_this8.io.getFile(filename).then(function (file) {
              var hashResult = dispensary.match(file);

              if (hashResult !== false) {
                _logger2.default.debug(hashResult + ' detected in ' + filename);
                jsLibs[filename] = hashResult;

                _this8.collector.addNotice(Object.assign({}, messages.KNOWN_LIBRARY, {
                  file: filename
                }));
              }
            }));
          };

          for (var _iterator4 = files[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            _loop2();
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        return Promise.all(promises);
      }).then(function () {
        addonMetadata.jsLibs = jsLibs;
        return addonMetadata;
      });
    }
  }, {
    key: 'config',
    set: function set(cfg) {
      this._config = cfg;

      // normalize the scanFile option:
      // convert into an array if needed and filter out any undefined
      // or empty strings.
      if (this._config.scanFile) {
        var scanFile = Array.isArray(this._config.scanFile) ? this._config.scanFile : [this._config.scanFile];
        scanFile = scanFile.filter(function (el) {
          return el && el.length > 0;
        });

        this._config.scanFile = scanFile;
      }
    },
    get: function get() {
      return this._config;
    }
  }, {
    key: 'output',
    get: function get() {
      var output = {
        count: this.collector.length,
        summary: {},
        metadata: this.addonMetadata
      };

      if (this.config.scanFile) {
        output.scanFile = this.config.scanFile;
      }

      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = constants.MESSAGE_TYPES[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var _type = _step5.value;

          var messageType = _type + 's';
          output[messageType] = this.collector[messageType];
          output.summary[messageType] = this.collector[messageType].length;
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      return output;
    }
  }]);

  return Linter;
}();

exports.default = Linter;

/***/ }),
/* 23 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 24 */
/***/ (function(module, exports) {

module.exports = require("babel-polyfill");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _message = __webpack_require__(31);

var _message2 = _interopRequireDefault(_message);

var _const = __webpack_require__(1);

var constants = _interopRequireWildcard(_const);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// "I have a display case ready and waiting for our newest acquisitions!"
// --Taneleer Tivan


var Collector = function () {
  function Collector() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Collector);

    this.config = config;
    this.messagesByDataPath = {};

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = constants.MESSAGE_TYPES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var type = _step.value;

        this[type + 's'] = [];
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  _createClass(Collector, [{
    key: '_addMessage',
    value: function _addMessage(type, opts) {
      var _Message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _message2.default;

      // Filter the messages reported by file when the Linter has been configured
      // with a custom scanFile array using --scan-file CLI option.
      if (this.config.scanFile && opts.file) {
        if (!this.config.scanFile.some(function (v) {
          return v === opts.file;
        })) {
          return;
        }
      }

      // Message will throw for incorrect types.
      // we have a test to ensure that is the case.
      var message = new _Message(type, opts);
      if (typeof this.messageList(type) === 'undefined') {
        throw new Error('Message type "' + type + '" not currently collected');
      }

      if (!this.isDuplicateMessage(message)) {
        this._recordMessage(message, type);
      }
    }
  }, {
    key: 'messageList',
    value: function messageList(type) {
      return this[type + 's'];
    }
  }, {
    key: 'messagesAtDataPath',
    value: function messagesAtDataPath(dataPath) {
      if (dataPath === undefined) {
        throw new Error('dataPath is required');
      }
      if (!this.messagesByDataPath[dataPath]) {
        this.messagesByDataPath[dataPath] = [];
      }
      return this.messagesByDataPath[dataPath];
    }
  }, {
    key: '_recordMessage',
    value: function _recordMessage(message, type) {
      if (message.dataPath) {
        this.messagesAtDataPath(message.dataPath).push(message);
      }
      this.messageList(type).push(message);
    }
  }, {
    key: 'isDuplicateMessage',
    value: function isDuplicateMessage(message) {
      if (message.dataPath) {
        var previousMessages = this.messagesAtDataPath(message.dataPath);
        return previousMessages.some(function (prevMessage) {
          return prevMessage.matches(message);
        });
      }
      return false;
    }
  }, {
    key: 'addError',
    value: function addError(opts) {
      this._addMessage(constants.VALIDATION_ERROR, opts);
    }
  }, {
    key: 'addNotice',
    value: function addNotice(opts) {
      this._addMessage(constants.VALIDATION_NOTICE, opts);
    }
  }, {
    key: 'addWarning',
    value: function addWarning(opts) {
      this._addMessage(constants.VALIDATION_WARNING, opts);
    }
  }, {
    key: 'length',
    get: function get() {
      var len = 0;
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = constants.MESSAGE_TYPES[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var type = _step2.value;

          len += this[type + 's'].length;
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return len;
    }
  }]);

  return Collector;
}();

exports.default = Collector;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Crx = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs2 = __webpack_require__(8);

var _fs3 = _interopRequireDefault(_fs2);

var _crxParser = __webpack_require__(120);

var _crxParser2 = _interopRequireDefault(_crxParser);

var _yauzl = __webpack_require__(21);

var _yauzl2 = _interopRequireDefault(_yauzl);

var _logger = __webpack_require__(3);

var _logger2 = _interopRequireDefault(_logger);

var _xpi = __webpack_require__(11);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * A CRX file is just a ZIP file (eg an XPI) with some extra header
 * information. So we handle opening the file with a CRX parser, then treat
 * it like an XPI after that.
 *
 */
var Crx = exports.Crx = function (_Xpi) {
  _inherits(Crx, _Xpi);

  function Crx(filePath) {
    var zipLib = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _yauzl2.default;

    var _parseCRX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _crxParser2.default;

    var _fs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _fs3.default;

    _classCallCheck(this, Crx);

    var _this = _possibleConstructorReturn(this, (Crx.__proto__ || Object.getPrototypeOf(Crx)).call(this, filePath, zipLib));

    _this.fs = _fs;
    _this.parseCRX = _parseCRX;
    return _this;
  }

  _createClass(Crx, [{
    key: 'open',
    value: function open() {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        // First, read the file manually, as we need to pass the whole thing
        // to crx-parser.
        _this2.fs.readFile(_this2.path, function (err, buffer) {
          if (err) {
            return reject(err);
          }
          // Parse out the CRX header data from the actual ZIP contents.
          _this2.parseCRX(buffer, function (err, data) {
            if (err) {
              return reject(err);
            }

            _logger2.default.debug('Obtained zip data from CRX file', data);
            // Finally we can read in the zip data as a buffer into yauzl.
            _this2.zipLib.fromBuffer(data.body, function (err, zipFile) {
              if (err) {
                return reject(err);
              }

              resolve(zipFile);
            });
          });
        });
      });
    }
  }, {
    key: 'getFiles',
    value: function getFiles(_onEventsSubscribed) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        // If we have already processed the file and have data
        // on this instance return that.
        if (Object.keys(_this3.files).length) {
          return resolve(_this3.files);
        }

        return _this3.open().then(function (zipfile) {

          zipfile.on('entry', function (entry) {
            _this3.handleEntry(entry, reject);
          });

          // We use the 'end' event here because we're reading the CRX in
          // from a buffer (because we have to unpack the header info from it
          // first). The 'close' event is never fired when using yauzl's
          // `fromBuffer()` method.
          zipfile.on('end', function () {
            resolve(_this3.files);
          });

          if (_onEventsSubscribed) {
            // Run optional callback when we know the event handlers
            // have been inited. Useful for testing.
            if (typeof _onEventsSubscribed === 'function') {
              _onEventsSubscribed();
            }
          }
        }).catch(reject);
      });
    }
  }]);

  return Crx;
}(_xpi.Xpi);

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Directory = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _templateObject = _taggedTemplateLiteral(['Files already exist for directory\n               "', '" returning cached data'], ['Files already exist for directory\n               "', '" returning cached data']);

var _path = __webpack_require__(6);

var path = _interopRequireWildcard(_path);

var _fs = __webpack_require__(8);

var _firstChunkStream = __webpack_require__(17);

var _firstChunkStream2 = _interopRequireDefault(_firstChunkStream);

var _stripBomStream = __webpack_require__(19);

var _stripBomStream2 = _interopRequireDefault(_stripBomStream);

var _base = __webpack_require__(9);

var _utils = __webpack_require__(10);

var _utils2 = __webpack_require__(0);

var _logger = __webpack_require__(3);

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Directory = exports.Directory = function (_IOBase) {
  _inherits(Directory, _IOBase);

  function Directory() {
    _classCallCheck(this, Directory);

    return _possibleConstructorReturn(this, (Directory.__proto__ || Object.getPrototypeOf(Directory)).apply(this, arguments));
  }

  _createClass(Directory, [{
    key: 'getFiles',
    value: function getFiles() {
      var _this2 = this;

      var _walkPromise = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _utils.walkPromise;

      // If we have already processed this directory and have data
      // on this instance return that.
      if (Object.keys(this.files).length) {
        _logger2.default.info((0, _utils2.singleLineString)(_templateObject, this.path));
        return Promise.resolve(this.files);
      }

      return _walkPromise(this.path, {
        shouldIncludePath: function shouldIncludePath() {
          return _this2.shouldScanFile.apply(_this2, arguments);
        }
      }).then(function (files) {
        _this2.files = files;
        _this2.entries = Object.keys(files);
        return files;
      });
    }
  }, {
    key: 'getPath',
    value: function getPath(relativeFilePath) {
      if (!this.files.hasOwnProperty(relativeFilePath)) {
        return Promise.reject(new Error('Path "' + relativeFilePath + '" does not exist in this dir.'));
      }

      if (this.files[relativeFilePath].size > this.maxSizeBytes) {
        return Promise.reject(new Error('File "' + relativeFilePath + '" is too large. Aborting'));
      }

      var absoluteDirPath = path.resolve(this.path);
      var filePath = path.resolve(path.join(absoluteDirPath, relativeFilePath));

      // This is belt and braces. Should never happen that a file was in
      // the files object and yet doesn't meet these requirements.
      if (!filePath.startsWith(absoluteDirPath) || relativeFilePath.startsWith('/')) {
        return Promise.reject(new Error('Path argument must be relative to ' + this.path));
      }

      return Promise.resolve(filePath);
    }
  }, {
    key: 'getFileAsStream',
    value: function getFileAsStream(relativeFilePath) {
      return this.getPath(relativeFilePath).then(function (filePath) {
        return Promise.resolve((0, _fs.createReadStream)(filePath, {
          flags: 'r',
          encoding: 'utf8',
          autoClose: true
        }).pipe((0, _stripBomStream2.default)()));
      });
    }
  }, {
    key: 'getFileAsString',
    value: function getFileAsString(path) {
      return this.getFileAsStream(path).then(function (readStream) {
        return new Promise(function (resolve, reject) {
          var content = '';
          readStream.on('readable', function () {
            var chunk;
            while (null !== (chunk = readStream.read())) {
              content += chunk.toString();
            }
          });

          readStream.on('end', function () {
            resolve(content);
          });

          readStream.on('error', reject);
        });
      });
    }
  }, {
    key: 'getChunkAsBuffer',
    value: function getChunkAsBuffer(relativeFilePath, chunkLength) {
      return this.getPath(relativeFilePath).then(function (filePath) {
        return new Promise(function (resolve) {
          (0, _fs.createReadStream)(filePath, {
            flags: 'r',
            // This is important because you don't want to encode the
            // bytes if you are doing a binary check.
            encoding: null,
            autoClose: true
          }).pipe((0, _firstChunkStream2.default)({ chunkLength: chunkLength }, function (_, enc) {
            resolve(enc);
          }));
        });
      });
    }
  }]);

  return Directory;
}(_base.IOBase);

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _crx = __webpack_require__(26);

Object.keys(_crx).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _crx[key];
    }
  });
});

var _directory = __webpack_require__(27);

Object.keys(_directory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _directory[key];
    }
  });
});

var _xpi = __webpack_require__(11);

Object.keys(_xpi).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _xpi[key];
    }
  });
});

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var BANNED_LIBRARIES = exports.BANNED_LIBRARIES = ['angularjs.1.0.1.angular.js', 'angularjs.1.0.1.angular.min.js', 'angularjs.1.0.2.angular.js', 'angularjs.1.0.2.angular.min.js', 'angularjs.1.0.3.angular.js', 'angularjs.1.0.3.angular.min.js', 'angularjs.1.0.4.angular.js', 'angularjs.1.0.4.angular.min.js', 'angularjs.1.0.5.angular.js', 'angularjs.1.0.5.angular.min.js', 'angularjs.1.0.6.angular.js', 'angularjs.1.0.6.angular.min.js', 'angularjs.1.0.7.angular.js', 'angularjs.1.0.7.angular.min.js', 'angularjs.1.0.8.angular.js', 'angularjs.1.0.8.angular.min.js', 'angularjs.1.1.1.angular.js', 'angularjs.1.1.1.angular.min.js', 'angularjs.1.1.3.angular.js', 'angularjs.1.1.3.angular.min.js', 'angularjs.1.1.4.angular.js', 'angularjs.1.1.4.angular.min.js', 'angularjs.1.1.5.angular.js', 'angularjs.1.1.5.angular.min.js', 'angularjs.1.2.0.angular.js', 'angularjs.1.2.0.angular.min.js', 'angularjs.1.2.1.angular.js', 'angularjs.1.2.1.angular.min.js', 'angularjs.1.2.2.angular.min.js', 'angularjs.1.2.10.angular.js', 'angularjs.1.2.10.angular.min.js', 'angularjs.1.2.11.angular.js', 'angularjs.1.2.11.angular.min.js', 'angularjs.1.2.12.angular.js', 'angularjs.1.2.12.angular.min.js', 'angularjs.1.2.13.angular.js', 'angularjs.1.2.13.angular.min.js', 'angularjs.1.2.14.angular.js', 'angularjs.1.2.14.angular.min.js', 'angularjs.1.2.15.angular.js', 'angularjs.1.2.15.angular.min.js', 'angularjs.1.2.16.angular.js', 'angularjs.1.2.16.angular.min.js', 'angularjs.1.2.17.angular.js', 'angularjs.1.2.17.angular.min.js', 'angularjs.1.2.18.angular.js', 'angularjs.1.2.18.angular.min.js', 'angularjs.1.2.19.angular.js', 'angularjs.1.2.19.angular.min.js', 'angularjs.1.2.20.angular.js', 'angularjs.1.2.20.angular.min.js', 'angularjs.1.2.21.angular.js', 'angularjs.1.2.21.angular.min.js', 'angularjs.1.2.22.angular.js', 'angularjs.1.2.22.angular.min.js', 'angularjs.1.2.23.angular.js', 'angularjs.1.2.23.angular.min.js', 'angularjs.1.2.24.angular.js', 'angularjs.1.2.24.angular.min.js', 'angularjs.1.2.25.angular.js', 'angularjs.1.2.25.angular.min.js', 'angularjs.1.2.26.angular.js', 'angularjs.1.2.26.angular.min.js', 'angularjs.1.2.27.angular.js', 'angularjs.1.2.27.angular.min.js', 'angularjs.1.2.28.angular.js', 'angularjs.1.2.28.angular.min.js', 'angularjs.1.2.29.angular.js', 'angularjs.1.2.29.angular.min.js', 'angularjs.1.2.3.angular.js', 'angularjs.1.2.3.angular.min.js', 'angularjs.1.2.4.angular.js', 'angularjs.1.2.4.angular.min.js', 'angularjs.1.2.5.angular.js', 'angularjs.1.2.5.angular.min.js', 'angularjs.1.2.6.angular.js', 'angularjs.1.2.6.angular.min.js', 'angularjs.1.2.7.angular.js', 'angularjs.1.2.7.angular.min.js', 'angularjs.1.2.8.angular.js', 'angularjs.1.2.8.angular.min.js', 'angularjs.1.2.9.angular.js', 'angularjs.1.2.9.angular.min.js', 'angularjs.1.3.0.angular.js', 'angularjs.1.3.0.angular.min.js', 'angularjs.1.3.1.angular.js', 'angularjs.1.3.1.angular.min.js', 'angularjs.1.3.2.angular.js', 'angularjs.1.3.2.angular.min.js', 'angularjs.1.3.3.angular.js', 'angularjs.1.3.3.angular.min.js', 'angularjs.1.3.4.angular.js', 'angularjs.1.3.4.angular.min.js', 'angularjs.1.3.5.angular.js', 'angularjs.1.3.5.angular.min.js', 'angularjs.1.3.6.angular.js', 'angularjs.1.3.6.angular.min.js', 'angularjs.1.3.7.angular.js', 'angularjs.1.3.7.angular.min.js', 'angularjs.1.3.8.angular.js', 'angularjs.1.3.8.angular.min.js', 'angularjs.1.3.9.angular.js', 'angularjs.1.3.9.angular.min.js', 'angularjs.1.3.10.angular.js', 'angularjs.1.3.10.angular.min.js', 'angularjs.1.3.11.angular.js', 'angularjs.1.3.11.angular.min.js', 'angularjs.1.3.12.angular.js', 'angularjs.1.3.12.angular.min.js', 'angularjs.1.3.13.angular.js', 'angularjs.1.3.13.angular.min.js', 'angularjs.1.3.14.angular.js', 'angularjs.1.3.14.angular.min.js', 'angularjs.1.3.15.angular.js', 'angularjs.1.3.15.angular.min.js', 'angularjs.1.3.16.angular.js', 'angularjs.1.3.16.angular.min.js', 'angularjs.1.3.17.angular.js', 'angularjs.1.3.17.angular.min.js', 'angularjs.1.3.18.angular.js', 'angularjs.1.3.18.angular.min.js', 'angularjs.1.3.19.angular.js', 'angularjs.1.3.19.angular.min.js', 'angularjs.1.3.20.angular.js', 'angularjs.1.3.20.angular.min.js', 'angularjs.1.4.0.angular.js', 'angularjs.1.4.0.angular.min.js', 'angularjs.1.4.1.angular.js', 'angularjs.1.4.1.angular.min.js', 'angularjs.1.4.2.angular.js', 'angularjs.1.4.2.angular.min.js', 'angularjs.1.4.3.angular.js', 'angularjs.1.4.3.angular.min.js', 'angularjs.1.4.4.angular.js', 'angularjs.1.4.4.angular.min.js', 'angularjs.1.4.5.angular.js', 'angularjs.1.4.5.angular.min.js', 'angularjs.1.4.6.angular.js', 'angularjs.1.4.6.angular.min.js', 'angularjs.1.4.7.angular.js', 'angularjs.1.4.7.angular.min.js', 'angularjs.1.4.8.angular.js', 'angularjs.1.4.8.angular.min.js', 'angularjs.1.4.9.angular.js', 'angularjs.1.4.9.angular.min.js', 'angularjs.1.4.10.angular.js', 'angularjs.1.4.10.angular.min.js', 'angularjs.1.5.0.angular.js', 'angularjs.1.5.0.angular.min.js', 'angularjs.1.5.1.angular.js', 'angularjs.1.5.1.angular.min.js', 'angularjs.1.5.2.angular.js', 'angularjs.1.5.2.angular.min.js', 'angularjs.1.5.3.angular.js', 'angularjs.1.5.3.angular.min.js', 'angularjs.1.5.4.angular.js', 'angularjs.1.5.4.angular.min.js', 'angularjs.1.5.5.angular.js', 'angularjs.1.5.5.angular.min.js', 'angularjs.1.5.6.angular.js', 'angularjs.1.5.6.angular.min.js', 'angularjs.1.5.7.angular.js', 'angularjs.1.5.7.angular.min.js', 'angularjs.1.5.8.angular.js', 'angularjs.1.5.8.angular.min.js', 'angularjs.1.5.9.angular.js', 'angularjs.1.5.9.angular.min.js', 'angularjs.1.6.0.angular.js', 'angularjs.1.6.0.angular.min.js', 'angularjs.1.6.1.angular.js', 'angularjs.1.6.1.angular.min.js', 'angularjs.1.6.2.angular.js', 'angularjs.1.6.2.angular.min.js', 'jquery.1.0.1.jquery.js', 'jquery.1.0.2.jquery.js', 'jquery.1.0.3.jquery.js', 'jquery.1.0.4.jquery.js', 'jquery.1.1.1.jquery.js', 'jquery.1.1.2.jquery.js', 'jquery.1.1.jquery.js', 'jquery.1.4.1.jquery.js', 'jquery.1.4.1.jquery.min.js', 'jquery.1.4.2.jquery.js', 'jquery.1.4.2.jquery.min.js', 'jquery.1.4.4.jquery.js', 'jquery.1.4.4.jquery.min.js', 'jquery.1.4.jquery.js', 'jquery.1.4.jquery.min.js', 'jquery.1.5.1.jquery.js', 'jquery.1.5.1.jquery.min.js', 'jquery.1.5.2.jquery.js', 'jquery.1.5.2.jquery.min.js', 'jquery.1.5.jquery.js', 'jquery.1.5.jquery.min.js', 'jquery.1.6.1.jquery.js', 'jquery.1.6.1.jquery.min.js', 'jquery.1.6.2.jquery.js', 'jquery.1.6.2.jquery.min.js', 'jquery.1.6.3.jquery.js', 'jquery.1.6.3.jquery.min.js', 'jquery.1.6.4.jquery.js', 'jquery.1.6.4.jquery.min.js', 'jquery.1.6.jquery.js', 'jquery.1.6.jquery.min.js', 'jquery.1.7.jquery.js', 'jquery.1.7.jquery.min.js', 'jquery.1.7.1.jquery.js', 'jquery.1.7.1.jquery.min.js', 'jquery.1.7.2.jquery.js', 'jquery.1.7.2.jquery.min.js', 'jquery.1.8.0.jquery.js', 'jquery.1.8.0.jquery.min.js', 'jquery.1.8.1.jquery.js', 'jquery.1.8.1.jquery.min.js', 'jquery.1.8.2.jquery.js', 'jquery.1.8.2.jquery.min.js', 'jquery.1.8.3.jquery.js', 'jquery.1.8.3.jquery.min.js', 'jquery.1.9.0.jquery.js', 'jquery.1.9.0.jquery.min.js', 'jquery.1.9.1.jquery.js', 'jquery.1.9.1.jquery.min.js', 'jquery.1.10.0.jquery.js', 'jquery.1.10.0.jquery.min.js', 'jquery.1.10.1.jquery.js', 'jquery.1.10.1.jquery.min.js', 'jquery.1.10.2.jquery.js', 'jquery.1.10.2.jquery.min.js', 'jquery.1.11.0.jquery.js', 'jquery.1.11.0.jquery.min.js', 'jquery.1.11.1.jquery.js', 'jquery.1.11.1.jquery.min.js', 'jquery.1.11.2.jquery.js', 'jquery.1.11.2.jquery.min.js', 'jquery.1.11.3.jquery.js', 'jquery.1.11.3.jquery.min.js', 'jquery.1.12.0.jquery.js', 'jquery.1.12.0.jquery.min.js', 'jquery.1.12.1.jquery.js', 'jquery.1.12.1.jquery.min.js', 'jquery.1.12.2.jquery.js', 'jquery.1.12.2.jquery.min.js', 'jquery.1.12.3.jquery.js', 'jquery.1.12.3.jquery.min.js', 'jquery.1.12.4.jquery.js', 'jquery.1.12.4.jquery.min.js'];

var UNADVISED_LIBRARIES = exports.UNADVISED_LIBRARIES = [];

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isRunFromCLI = isRunFromCLI;
exports.createInstance = createInstance;

var _cli = __webpack_require__(7);

var _linter = __webpack_require__(22);

var _linter2 = _interopRequireDefault(_linter);

var _logger = __webpack_require__(3);

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* istanbul ignore if */
if (!global._babelPolyfill) {
  __webpack_require__(24);
}

function isRunFromCLI() {
  var _module = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : module;

  return __webpack_require__.c[__webpack_require__.s] === _module;
}

function createInstance() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$config = _ref.config,
      config = _ref$config === undefined ? (0, _cli.getConfig)({ useCLI: isRunFromCLI() }).argv : _ref$config,
      _ref$runAsBinary = _ref.runAsBinary,
      runAsBinary = _ref$runAsBinary === undefined ? false : _ref$runAsBinary;

  _logger2.default.level(config.logLevel);
  _logger2.default.info('Creating new linter instance', { config: config });
  config.runAsBinary = runAsBinary;
  return new _linter2.default(config);
}

exports.default = _linter2.default;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(23)(module)))

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requiredProps = exports.props = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _templateObject = _taggedTemplateLiteral(['Message data object is missing the\n        following props: ', ''], ['Message data object is missing the\n        following props: ', '']),
    _templateObject2 = _taggedTemplateLiteral(['Message type "', '"\n        is not one of ', ''], ['Message type "', '"\n        is not one of ', '']);

var _const = __webpack_require__(1);

var _utils = __webpack_require__(0);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// These are the props we expect to pull out of
// the data object passed to the Message constructor.
var props = exports.props = ['code', 'message', 'description', 'column', 'file', 'line', 'dataPath'];

var requiredProps = exports.requiredProps = ['code', 'message', 'description'];

var Message = function () {
  function Message(type) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Message);

    this.type = type;

    if (data.hasOwnProperty('filename')) {
      throw new Error('The key for the file is "file" not "filename"');
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = props[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var prop = _step.value;

        this[prop] = data[prop];
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    var missingProps = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = requiredProps[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _prop = _step2.value;

        if (typeof this[_prop] === 'undefined') {
          missingProps.push(_prop);
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    if (missingProps.length) {
      throw new Error((0, _utils.singleLineString)(_templateObject, missingProps.join(', ')));
    }
  }

  _createClass(Message, [{
    key: 'matches',
    value: function matches(other) {
      var _this = this;

      return this.type === other.type && props.every(function (prop) {
        return _this[prop] === other[prop];
      });
    }
  }, {
    key: 'type',
    get: function get() {
      return this._type;
    },
    set: function set(type) {
      if (!_const.MESSAGE_TYPES.includes(type)) {
        throw new Error((0, _utils.singleLineString)(_templateObject2, type, _const.MESSAGE_TYPES.join(', ')));
      }
      this._type = type;
    }
  }]);

  return Message;
}();

exports.default = Message;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DANGEROUS_CATEGORY = undefined;

var _templateObject = _taggedTemplateLiteral(['Add-ons defining global properties via\n    category entries require careful review by an administrative reviewer.'], ['Add-ons defining global properties via\n    category entries require careful review by an administrative reviewer.']),
    _templateObject2 = _taggedTemplateLiteral(['Given the potential security risks of\n    exposing APIs to unprivileged code, extensions which use these APIs must\n    undergo manual code review for at least one submission. If you are not\n    using these APIs to interact with content code, please consider\n    alternatives, such as JavaScript modules (http://mzl.la/1HMH2m9),\n    CommonJS modules (http://mzl.la/1JBMjuU, http://mzl.la/1OBaE8u), the\n    observer service (http://mzl.la/1MLqWdJ), or window listeners which\n    install global properties on privileged windows'], ['Given the potential security risks of\n    exposing APIs to unprivileged code, extensions which use these APIs must\n    undergo manual code review for at least one submission. If you are not\n    using these APIs to interact with content code, please consider\n    alternatives, such as JavaScript modules (http://mzl.la/1HMH2m9),\n    CommonJS modules (http://mzl.la/1JBMjuU, http://mzl.la/1OBaE8u), the\n    observer service (http://mzl.la/1MLqWdJ), or window listeners which\n    install global properties on privileged windows']);

var _utils = __webpack_require__(0);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var DANGEROUS_CATEGORY = exports.DANGEROUS_CATEGORY = {
  code: 'DANGEROUS_CATEGORY',
  legacyCode: ['testcases_chromemanifest', 'test_resourcemodules', 'resource_modules'],
  message: 'Potentially dangerous category entry',
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject)),
  // TODO: signing_help is not yet used.
  signing_help: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject2))
};

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.INVALID_SELECTOR_NESTING = exports.CSS_SYNTAX_ERROR = undefined;

var _templateObject = _taggedTemplateLiteral(['An error was found in the CSS file being\n    processed as a result further processing of that file is not possible'], ['An error was found in the CSS file being\n    processed as a result further processing of that file is not possible']),
    _templateObject2 = _taggedTemplateLiteral(['Selectors should not be nested'], ['Selectors should not be nested']);

var _utils = __webpack_require__(0);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var CSS_SYNTAX_ERROR = exports.CSS_SYNTAX_ERROR = {
  code: 'CSS_SYNTAX_ERROR',
  // This will be overriden by the reason passed from the error.
  legacyCode: null,
  message: (0, _utils.gettext)('A CSS syntax error was encountered'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject))
};

var INVALID_SELECTOR_NESTING = exports.INVALID_SELECTOR_NESTING = {
  code: 'INVALID_SELECTOR_NESTING',
  legacyCode: null,
  message: (0, _utils.gettext)('Invalid nesting of selectors found'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject2))
};

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PREFWINDOW_REQUIRES_ID = exports._tagRequiresAttribute = undefined;

var _templateObject = _taggedTemplateLiteral(['The <', '> tag requires the\n      ', ', but it\'s missing.'], ['The <', '> tag requires the\n      ', ', but it\'s missing.']);

var _utils = __webpack_require__(0);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var _tagRequiresAttribute = exports._tagRequiresAttribute = function _tagRequiresAttribute(tagName, attribute) {
  return {
    code: (tagName + '_REQUIRES_' + attribute).toUpperCase(),
    legacyCode: ['markup', 'starttag', tagName + '_' + attribute],
    message: (0, _utils.gettext)('<' + tagName + '> missing "' + attribute + '"'),
    description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject, tagName, attribute))
  };
};

var PREFWINDOW_REQUIRES_ID = exports.PREFWINDOW_REQUIRES_ID = _tagRequiresAttribute('prefwindow', 'id');

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JSON_DUPLICATE_KEY = exports.JSON_BLOCK_COMMENTS = exports.JSON_INVALID = undefined;

var _templateObject = _taggedTemplateLiteral(['Only line comments (comments beginning with\n    "//") are allowed in JSON files. Please remove block comments (comments\n    beginning with "/*")'], ['Only line comments (comments beginning with\n    "//") are allowed in JSON files. Please remove block comments (comments\n    beginning with "/*")']),
    _templateObject2 = _taggedTemplateLiteral(['Duplicate key found in JSON file.'], ['Duplicate key found in JSON file.']);

var _utils = __webpack_require__(0);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var JSON_INVALID = exports.JSON_INVALID = {
  code: 'JSON_INVALID',
  legacyCode: null,
  message: (0, _utils.gettext)('Your JSON is not valid.'),
  description: (0, _utils.gettext)('Your JSON file could not be parsed.')
};

var JSON_BLOCK_COMMENTS = exports.JSON_BLOCK_COMMENTS = {
  code: 'JSON_BLOCK_COMMENTS',
  legacyCode: null,
  message: (0, _utils.gettext)('Your JSON contains block comments.'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject))
};

var JSON_DUPLICATE_KEY = exports.JSON_DUPLICATE_KEY = {
  code: 'JSON_DUPLICATE_KEY',
  legacyCode: null,
  message: (0, _utils.gettext)('Duplicate keys are not allowed in JSON files.'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject2))
};

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ALREADY_SIGNED = exports.FLAGGED_FILE_TYPE = exports.FLAGGED_FILE_EXTENSION = exports.FLAGGED_FILE = exports.HIDDEN_FILE = exports.FILE_TOO_LARGE = exports.TYPE_NOT_DETERMINED = exports.MULTIPLE_MANIFESTS = exports.TYPE_NO_MANIFEST_JSON = exports.TYPE_NO_INSTALL_RDF = exports.BAD_ZIPFILE = exports.DUPLICATE_XPI_ENTRY = undefined;

var _templateObject = _taggedTemplateLiteral(['The package contains multiple entries\n    with the same name. This practice has been banned. Try unzipping\n    and re-zipping your add-on package and try again.'], ['The package contains multiple entries\n    with the same name. This practice has been banned. Try unzipping\n    and re-zipping your add-on package and try again.']),
    _templateObject2 = _taggedTemplateLiteral(['The type should be determined by\n    install.rdf if present. As there\'s no install.rdf, type detection\n    will be attempted to be inferred by package layout.'], ['The type should be determined by\n    install.rdf if present. As there\'s no install.rdf, type detection\n    will be attempted to be inferred by package layout.']),
    _templateObject3 = _taggedTemplateLiteral(['The type should be determined by\n    manifest.json if present. As there\'s no manifest.json, type detection\n    will be attempted to be inferred by package layout.'], ['The type should be determined by\n    manifest.json if present. As there\'s no manifest.json, type detection\n    will be attempted to be inferred by package layout.']),
    _templateObject4 = _taggedTemplateLiteral(['The type should be determined by\n    manifest.json if present. Both install_rdf and manifest_json\n    are defined.'], ['The type should be determined by\n    manifest.json if present. Both install_rdf and manifest_json\n    are defined.']),
    _templateObject5 = _taggedTemplateLiteral(['The type detection algorithm could not\n    determine the type of the add-on.'], ['The type detection algorithm could not\n    determine the type of the add-on.']),
    _templateObject6 = _taggedTemplateLiteral(['This file is not binary and is too large to\n    parse. Files larger than ', 'MB will not be\n    parsed. If your JavaScript file has a large list, consider removing the\n    list and loading it as a separate JSON file instead.'], ['This file is not binary and is too large to\n    parse. Files larger than ', 'MB will not be\n    parsed. If your JavaScript file has a large list, consider removing the\n    list and loading it as a separate JSON file instead.']),
    _templateObject7 = _taggedTemplateLiteral(['Hidden files complicate the\n    review process and can contain sensitive information about the system that\n    generated the add-on. Please modify the packaging process so that these\n    files aren\'t included.'], ['Hidden files complicate the\n    review process and can contain sensitive information about the system that\n    generated the add-on. Please modify the packaging process so that these\n    files aren\'t included.']),
    _templateObject8 = _taggedTemplateLiteral(['Files were found that are either unnecessary\n    or have been included unintentionally. They should be removed.'], ['Files were found that are either unnecessary\n    or have been included unintentionally. They should be removed.']),
    _templateObject9 = _taggedTemplateLiteral(['Files whose names end with flagged extensions\n    have been found in the add-on. The extension of these files are flagged\n    because they usually identify binary components. Please see\n    https://bit.ly/review-policy for more information on the binary content\n    review process.'], ['Files whose names end with flagged extensions\n    have been found in the add-on. The extension of these files are flagged\n    because they usually identify binary components. Please see\n    https://bit.ly/review-policy for more information on the binary content\n    review process.']),
    _templateObject10 = _taggedTemplateLiteral(['Add-ons which are already signed will be\n    re-signed when published on AMO. This will replace any existing signatures\n    on the add-on.'], ['Add-ons which are already signed will be\n    re-signed when published on AMO. This will replace any existing signatures\n    on the add-on.']);

var _const = __webpack_require__(1);

var _utils = __webpack_require__(0);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var DUPLICATE_XPI_ENTRY = exports.DUPLICATE_XPI_ENTRY = {
  code: 'DUPLICATE_XPI_ENTRY',
  legacyCode: ['testcases_packagelayout', 'test_layout_all', 'duplicate_entries'],
  message: (0, _utils.gettext)('Package contains duplicate entries'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject))
};

var BAD_ZIPFILE = exports.BAD_ZIPFILE = {
  code: 'BAD_ZIPFILE',
  legacyCode: null,
  message: 'Corrupt ZIP file',
  description: (0, _utils.gettext)('We were unable to decompress the zip file.')
};

var TYPE_NO_INSTALL_RDF = exports.TYPE_NO_INSTALL_RDF = {
  code: 'TYPE_NO_INSTALL_RDF',
  legacyCode: ['typedetection', 'detect_type', 'missing_install_rdf'],
  message: (0, _utils.gettext)('install.rdf was not found'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject2))
};

var TYPE_NO_MANIFEST_JSON = exports.TYPE_NO_MANIFEST_JSON = {
  code: 'TYPE_NO_MANIFEST_JSON',
  legacyCode: ['typedetection', 'detect_type', 'missing_manifest_json'],
  message: (0, _utils.gettext)('manifest.json was not found'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject3))
};

var MULTIPLE_MANIFESTS = exports.MULTIPLE_MANIFESTS = {
  code: 'MULTIPLE_MANIFESTS',
  legacyCode: ['typedetection', 'detect_type', 'install_rdf_and_manifest_json'],
  message: (0, _utils.gettext)('Both install_rdf and manifest.json found'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject4))
};

var TYPE_NOT_DETERMINED = exports.TYPE_NOT_DETERMINED = {
  code: 'TYPE_NOT_DETERMINED',
  legacyCode: ['main', 'test_package', 'undeterminable_type'],
  message: (0, _utils.gettext)('Unable to determine add-on type'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject5))
};

var FILE_TOO_LARGE = exports.FILE_TOO_LARGE = {
  code: 'FILE_TOO_LARGE',
  legacyCode: null,
  message: (0, _utils.gettext)('File is too large to parse.'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject6, _const.MAX_FILE_SIZE_TO_PARSE_MB))
};

var HIDDEN_FILE = exports.HIDDEN_FILE = {
  code: 'HIDDEN_FILE',
  legacyCode: ['testcases_content', 'test_packed_packages', 'hidden_files'],
  message: (0, _utils.gettext)('Hidden file flagged'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject7))
};

var FLAGGED_FILE = exports.FLAGGED_FILE = {
  code: 'FLAGGED_FILE',
  legacyCode: ['testcases_content', 'test_packaged_packages', 'flagged_files'],
  message: (0, _utils.gettext)('Flagged filename found'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject8))
};

var FLAGGED_FILE_EXTENSION = exports.FLAGGED_FILE_EXTENSION = {
  code: 'FLAGGED_FILE_EXTENSION',
  legacyCode: ['testcases_content', 'test_blacklisted_files', 'disallowed_extension'],
  message: (0, _utils.gettext)('Flagged file extensions found'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject8))
};

var FLAGGED_FILE_TYPE = exports.FLAGGED_FILE_TYPE = {
  code: 'FLAGGED_FILE_TYPE',
  legacyCode: ['testcases_packagelayout', 'test_blacklisted_files', 'disallowed_file_type'],
  message: (0, _utils.gettext)('Flagged file type found'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject9))
};

var ALREADY_SIGNED = exports.ALREADY_SIGNED = {
  code: 'ALREADY_SIGNED',
  legacyCode: null,
  message: (0, _utils.gettext)('Package already signed'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject10))
};

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NO_DEFAULT_LOCALE = exports.NO_MESSAGES_FILE = exports.PROP_VERSION_MISSING = exports.PROP_NAME_MISSING = exports.MANIFEST_UNUSED_UPDATE = exports.MANIFEST_UPDATE_URL = exports.PROP_VERSION_TOOLKIT_ONLY = exports.PROP_VERSION_INVALID = exports.PROP_NAME_INVALID = exports.MANIFEST_CSP = exports.MANIFEST_VERSION_INVALID = exports.MANIFEST_PERMISSIONS = exports.MANIFEST_BAD_PERMISSION = exports.MANIFEST_FIELD_INVALID = exports.MANIFEST_FIELD_REQUIRED = undefined;

var _templateObject = _taggedTemplateLiteral(['See https://mzl.la/1R1n1t0\n    (MDN Docs) for more information.'], ['See https://mzl.la/1R1n1t0\n    (MDN Docs) for more information.']),
    _templateObject2 = _taggedTemplateLiteral(['"applications.gecko.update_url" is not allowed\n    for Mozilla-hosted add-ons.'], ['"applications.gecko.update_url" is not allowed\n    for Mozilla-hosted add-ons.']),
    _templateObject3 = _taggedTemplateLiteral(['The "update_url" is not used by Firefox in\n    the root of a manifest; your add-on will be updated via the Add-ons\n    site and not your "update_url". See: https://mzl.la/25zqk4O'], ['The "update_url" is not used by Firefox in\n    the root of a manifest; your add-on will be updated via the Add-ons\n    site and not your "update_url". See: https://mzl.la/25zqk4O']),
    _templateObject4 = _taggedTemplateLiteral(['The "default_locale" value is specified in\n    the manifest, but no matching "messages.json" in the "_locales" directory\n    exists. See: https://mzl.la/2hjcaEE'], ['The "default_locale" value is specified in\n    the manifest, but no matching "messages.json" in the "_locales" directory\n    exists. See: https://mzl.la/2hjcaEE']),
    _templateObject5 = _taggedTemplateLiteral(['The "default_locale" value is not specifed in\n    the manifest, but a "_locales" directory exists.\n    See: https://mzl.la/2hjcaEE'], ['The "default_locale" value is not specifed in\n    the manifest, but a "_locales" directory exists.\n    See: https://mzl.la/2hjcaEE']);

exports.manifestPropMissing = manifestPropMissing;

var _utils = __webpack_require__(0);

var _const = __webpack_require__(1);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var MANIFEST_FIELD_REQUIRED = exports.MANIFEST_FIELD_REQUIRED = {
  code: 'MANIFEST_FIELD_REQUIRED',
  legacyCode: null,
  message: (0, _utils.gettext)('The field is required.'),
  description: (0, _utils.gettext)('See https://mzl.la/1ZOhoEN (MDN Docs) for more information.'),
  file: _const.MANIFEST_JSON
};

var MANIFEST_FIELD_INVALID = exports.MANIFEST_FIELD_INVALID = {
  code: 'MANIFEST_FIELD_INVALID',
  legacyCode: null,
  message: (0, _utils.gettext)('The field is invalid.'),
  description: (0, _utils.gettext)('See https://mzl.la/1ZOhoEN (MDN Docs) for more information.'),
  file: _const.MANIFEST_JSON
};

var MANIFEST_BAD_PERMISSION = exports.MANIFEST_BAD_PERMISSION = {
  code: 'MANIFEST_BAD_PERMISSION',
  legacyCode: null,
  message: (0, _utils.gettext)('The permission type is unsupported.'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject)),
  file: _const.MANIFEST_JSON
};

var MANIFEST_PERMISSIONS = exports.MANIFEST_PERMISSIONS = {
  code: 'MANIFEST_PERMISSIONS',
  legacyCode: null,
  message: (0, _utils.gettext)('Unknown permission.'),
  description: (0, _utils.gettext)('See https://mzl.la/1R1n1t0 (MDN Docs) for more information.'),
  file: _const.MANIFEST_JSON
};

var MANIFEST_VERSION_INVALID = exports.MANIFEST_VERSION_INVALID = {
  code: 'MANIFEST_VERSION_INVALID',
  legacyCode: null,
  message: (0, _utils.gettext)('"manifest_version" in the manifest.json is not a valid value'),
  description: (0, _utils.gettext)('See https://mzl.la/20PenXl (MDN Docs) for more information.'),
  file: _const.MANIFEST_JSON
};

var MANIFEST_CSP = exports.MANIFEST_CSP = {
  // Note: don't change this 'code' without updating addons-server first, as
  // it depends on it to detect add-ons with a custom content security policy.
  code: 'MANIFEST_CSP',
  legacyCode: null,
  message: (0, _utils.gettext)('"content_security_policy" is defined in the manifest.json'),
  description: (0, _utils.gettext)('A custom content_security_policy needs additional review.'),
  file: MANIFEST_CSP
};

var PROP_NAME_INVALID = exports.PROP_NAME_INVALID = {
  code: 'PROP_NAME_INVALID',
  legacyCode: null,
  message: (0, _utils.gettext)('The "name" property must be a string.'),
  description: (0, _utils.gettext)('See http://mzl.la/1STmr48 (MDN Docs) for more information.'),
  file: _const.MANIFEST_JSON
};

var PROP_VERSION_INVALID = exports.PROP_VERSION_INVALID = {
  code: 'PROP_VERSION_INVALID',
  legacyCode: null,
  message: (0, _utils.gettext)('The "version" property must be a string.'),
  description: (0, _utils.gettext)('See http://mzl.la/1kXIADa (MDN Docs) for more information.'),
  file: _const.MANIFEST_JSON
};

var PROP_VERSION_TOOLKIT_ONLY = exports.PROP_VERSION_TOOLKIT_ONLY = {
  code: 'PROP_VERSION_TOOLKIT_ONLY',
  legacyCode: null,
  message: (0, _utils.gettext)('The "version" property uses a Firefox-specific format.'),
  description: (0, _utils.gettext)('See http://mzl.la/1kXIADa (MDN Docs) for more information.'),
  file: _const.MANIFEST_JSON
};

var MANIFEST_UPDATE_URL = exports.MANIFEST_UPDATE_URL = {
  code: 'MANIFEST_UPDATE_URL',
  legacyCode: null,
  message: (0, _utils.gettext)('"update_url" is not allowed.'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject2)),
  file: _const.MANIFEST_JSON
};

var MANIFEST_UNUSED_UPDATE = exports.MANIFEST_UNUSED_UPDATE = {
  code: 'MANIFEST_UNUSED_UPDATE',
  legacyCode: null,
  message: (0, _utils.gettext)('The "update_url" property is not used by Firefox.'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject3)),
  file: _const.MANIFEST_JSON
};

function manifestPropMissing(property) {
  return {
    code: 'PROP_' + property.toUpperCase() + '_MISSING',
    legacyCode: null,
    message: (0, _utils.gettext)('No "' + property + '" property found in manifest.json'),
    description: (0, _utils.gettext)('"' + property + '" is required'),
    file: _const.MANIFEST_JSON
  };
}

var PROP_NAME_MISSING = exports.PROP_NAME_MISSING = manifestPropMissing('name');
var PROP_VERSION_MISSING = exports.PROP_VERSION_MISSING = manifestPropMissing('version');

var NO_MESSAGES_FILE = exports.NO_MESSAGES_FILE = {
  code: 'NO_MESSAGES_FILE',
  legacyCode: null,
  message: (0, _utils.gettext)('The "default_locale" is missing localizations.'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject4)),
  file: _const.MANIFEST_JSON
};

var NO_DEFAULT_LOCALE = exports.NO_DEFAULT_LOCALE = {
  code: 'NO_DEFAULT_LOCALE',
  legacyCode: null,
  message: (0, _utils.gettext)('The "default_locale" is missing but "_locales" exist.'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject5)),
  file: _const.MANIFEST_JSON
};

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RDF_ID_MISSING = exports.RDF_VERSION_MISSING = exports.RDF_NAME_MISSING = exports.RDF_TYPE_MISSING = exports.RDF_TYPE_INVALID = exports.TAG_OBSOLETE_SKIN = exports.TAG_OBSOLETE_REQUIRES = exports.TAG_OBSOLETE_FILE = exports.TAG_NOT_ALLOWED_UPDATEURL = exports.TAG_NOT_ALLOWED_UPDATEKEY = exports.TAG_NOT_ALLOWED_HIDDEN = exports.RDF_GUID_TOO_LONG = exports._tagObsolete = exports._tagNotAllowedIfTag = exports._tagNotAllowed = undefined;

var _templateObject = _taggedTemplateLiteral(['Your RDF file contains the <', '> tag,\n      which is not allowed in an Add-on.'], ['Your RDF file contains the <', '> tag,\n      which is not allowed in an Add-on.']),
    _templateObject2 = _taggedTemplateLiteral(['Your RDF file contains the <', '> tag,\n      which cannot be used with a <', '> tag.'], ['Your RDF file contains the <', '> tag,\n      which cannot be used with a <', '> tag.']),
    _templateObject3 = _taggedTemplateLiteral(['Your RDF file contains the <', '> tag,\n      which is obsolete.'], ['Your RDF file contains the <', '> tag,\n      which is obsolete.']),
    _templateObject4 = _taggedTemplateLiteral(['A GUID must be 255 characters or less.\n    Please use a shorter GUID.'], ['A GUID must be 255 characters or less.\n    Please use a shorter GUID.']),
    _templateObject5 = _taggedTemplateLiteral(['The only valid values for <em:type>\n    are 2, 4, 8, and 32. Any other values are either invalid or\n    deprecated.'], ['The only valid values for <em:type>\n    are 2, 4, 8, and 32. Any other values are either invalid or\n    deprecated.']),
    _templateObject6 = _taggedTemplateLiteral(['It isn\'t always required, but it is\n    the most reliable method for determining add-on type.'], ['It isn\'t always required, but it is\n    the most reliable method for determining add-on type.']);

exports.rdfTopLevelTagMissing = rdfTopLevelTagMissing;

var _utils = __webpack_require__(0);

var _const = __webpack_require__(1);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var _tagNotAllowed = exports._tagNotAllowed = function _tagNotAllowed(tagName) {
  return {
    code: 'TAG_NOT_ALLOWED_' + tagName.toUpperCase(),
    // Non-unique err_id so setting to null
    // ('testcases_installrdf', '_test_rdf', 'shouldnt_exist')
    legacyCode: null,
    message: (0, _utils.gettext)('<' + tagName + '> tag is not allowed'),
    description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject, tagName))
  };
};

var _tagNotAllowedIfTag = exports._tagNotAllowedIfTag = function _tagNotAllowedIfTag(tagName, otherTag) {
  return {
    code: 'TAG_NOT_ALLOWED_' + tagName.toUpperCase(),
    // Non-unique err_id so setting to null
    // ('testcases_installrdf', '_test_rdf', 'shouldnt_exist')
    legacyCode: null,
    message: (0, _utils.gettext)('<' + tagName + '> cannot be used with <' + otherTag + '>'),
    description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject2, tagName, otherTag))
  };
};

var _tagObsolete = exports._tagObsolete = function _tagObsolete(tagName) {
  return {
    code: 'TAG_OBSOLETE_' + tagName.toUpperCase(),
    // Non-unique err_id so setting to null
    // ('testcases_installrdf', '_test_rdf', 'shouldnt_exist')
    legacyCode: null,
    message: (0, _utils.gettext)('<' + tagName + '> tag is obsolete'),
    description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject3, tagName))
  };
};

var RDF_GUID_TOO_LONG = exports.RDF_GUID_TOO_LONG = {
  code: 'RDF_GUID_TOO_LONG',
  legacyCode: null,
  message: (0, _utils.gettext)('GUID is too long (over 255 chars)'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject4)),
  file: _const.INSTALL_RDF
};

var TAG_NOT_ALLOWED_HIDDEN = exports.TAG_NOT_ALLOWED_HIDDEN = _tagNotAllowed('hidden');
var TAG_NOT_ALLOWED_UPDATEKEY = exports.TAG_NOT_ALLOWED_UPDATEKEY = _tagNotAllowedIfTag('updateKey', 'listed');
var TAG_NOT_ALLOWED_UPDATEURL = exports.TAG_NOT_ALLOWED_UPDATEURL = _tagNotAllowedIfTag('updateURL', 'listed');
var TAG_OBSOLETE_FILE = exports.TAG_OBSOLETE_FILE = _tagObsolete('file');
var TAG_OBSOLETE_REQUIRES = exports.TAG_OBSOLETE_REQUIRES = _tagObsolete('requires');
var TAG_OBSOLETE_SKIN = exports.TAG_OBSOLETE_SKIN = _tagObsolete('skin');

var RDF_TYPE_INVALID = exports.RDF_TYPE_INVALID = {
  code: 'RDF_TYPE_INVALID',
  legacyCode: ['typedetection', 'detect_type', 'invalid_em_type'],
  message: (0, _utils.gettext)('Invalid <em:type> value'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject5)),
  file: _const.INSTALL_RDF
};

var RDF_TYPE_MISSING = exports.RDF_TYPE_MISSING = {
  code: 'RDF_TYPE_MISSING',
  legacyCode: ['typedetection', 'detect_type', 'no_em:type'],
  message: (0, _utils.gettext)('No <em:type> element found in install.rdf'),
  description: (0, _utils.gettext)((0, _utils.singleLineString)(_templateObject6)),
  file: _const.INSTALL_RDF
};

function rdfTopLevelTagMissing(tagName) {
  return {
    code: 'RDF_' + tagName.toUpperCase() + '_MISSING',
    legacyCode: null,
    message: (0, _utils.gettext)('No <em:' + tagName + '> element at the top level of install.rdf'),
    description: (0, _utils.gettext)('<em:' + tagName + '> at the top level is required'),
    file: _const.INSTALL_RDF
  };
}

var RDF_NAME_MISSING = exports.RDF_NAME_MISSING = rdfTopLevelTagMissing('name');
var RDF_VERSION_MISSING = exports.RDF_VERSION_MISSING = rdfTopLevelTagMissing('version');
var RDF_ID_MISSING = exports.RDF_ID_MISSING = rdfTopLevelTagMissing('id');

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _readline = __webpack_require__(126);

var _readline2 = _interopRequireDefault(_readline);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ChromeManifestParser = function () {
  function ChromeManifestParser(stream, filename) {
    _classCallCheck(this, ChromeManifestParser);

    this.stream = stream;
    this.filename = filename;
    this.triples = null;
  }

  _createClass(ChromeManifestParser, [{
    key: 'filterTriples',
    value: function filterTriples() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          subject = _ref.subject,
          predicate = _ref.predicate,
          object = _ref.object;

      return this.parse().then(function (triples) {
        return new Promise(function (resolve) {
          var filteredTriples = triples.filter(function (triple) {
            var searches = { subject: subject, predicate: predicate, object: object };
            for (var key in searches) {
              var val = searches[key];
              if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) !== undefined && val === triple[key]) {
                return true;
              }
            }
          });

          resolve(filteredTriples);
        });
      });
    }
  }, {
    key: 'parse',
    value: function parse() {
      var _this = this;

      return new Promise(function (resolve) {
        if (_this.triples !== null) {
          resolve(_this.triples);
        } else {
          _this.triples = [];
        }

        var lineCount = 0;

        var rl = _readline2.default.createInterface({
          input: _this.stream
        });

        rl.on('line', function (line) {
          lineCount += 1;

          if (line.trim().startsWith('#', 0) === true) {
            return;
          }

          var triple = line.split(/\s+/, 3);
          if (triple.length === 2) {
            triple.push('');
          } else if (triple.length < 3) {
            return;
          }

          _this.triples.push({
            subject: triple[0],
            predicate: triple[1],
            object: triple[2],
            line: lineCount,
            filename: _this.filename
          });
        });

        rl.on('close', function () {
          resolve(_this.triples);
        });
      });
    }
  }]);

  return ChromeManifestParser;
}();

exports.default = ChromeManifestParser;

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _templateObject = _taggedTemplateLiteral(['RDF node should only have a\n        single descendant <Description>'], ['RDF node should only have a\n        single descendant <Description>']);

var _const = __webpack_require__(1);

var _messages = __webpack_require__(2);

var messages = _interopRequireWildcard(_messages);

var _logger = __webpack_require__(3);

var _logger2 = _interopRequireDefault(_logger);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var InstallRdfParser = function () {
  function InstallRdfParser(xmlDoc, collector) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref$namespace = _ref.namespace,
        namespace = _ref$namespace === undefined ? _const.RDF_DEFAULT_NAMESPACE : _ref$namespace;

    _classCallCheck(this, InstallRdfParser);

    this.xmlDoc = xmlDoc;
    // Provides ability to directly add messages to
    // the collector.
    this.collector = collector;
    this.namespace = namespace;
  }

  _createClass(InstallRdfParser, [{
    key: 'getMetadata',
    value: function getMetadata() {
      return Promise.resolve({
        guid: this._getGUID(),
        name: this._getName(),
        type: this._getAddonType(),
        version: this._getVersion(),
        restartless: this._getIsBootstrapped()
      });
    }

    /*
     * Convert a nodeList to an Array.
     */

  }, {
    key: '_makeArray',
    value: function _makeArray(nodeList) {
      return Array.prototype.slice.call(nodeList);
    }

    /*
     * Gets topLevel tags e.g. RDF -> Description -> tag
     */

  }, {
    key: '_getTopLevelNodesByTag',
    value: function _getTopLevelNodesByTag(tagName) {
      var descriptionTag = this._getDescriptionNode();
      return this._makeArray(descriptionTag.childNodes).filter(function (node) {
        return node.nodeName === tagName;
      });
    }
  }, {
    key: '_getTopLevelNodeByTag',
    value: function _getTopLevelNodeByTag(tag) {
      var nodes = this._getTopLevelNodesByTag(tag);
      // Throw an error if there's more than one node as these
      // should be unique.
      if (nodes.length > 1) {
        throw new Error('Multiple <' + tag + '> elements found');
      }
      return nodes[0];
    }
  }, {
    key: '_getRDFNode',
    value: function _getRDFNode() {
      var rdfNodes = this.xmlDoc.getElementsByTagName('RDF');
      if (!rdfNodes.length) {
        throw new Error('RDF Node is not defined');
      }
      if (rdfNodes.length > 1) {
        throw new Error('Multiple RDF tags found');
      }
      return rdfNodes[0];
    }
  }, {
    key: '_getDescriptionNode',
    value: function _getDescriptionNode() {
      var rdfNode = this._getRDFNode();
      var descriptionNodes = Array.prototype.slice.call(rdfNode.childNodes).filter(function (node) {
        return node.nodeName === 'Description';
      });
      if (descriptionNodes.length > 1) {
        throw new Error((0, _utils.singleLineString)(_templateObject));
      }
      return descriptionNodes[0];
    }
  }, {
    key: '_getNodeValue',
    value: function _getNodeValue(node) {
      if (node && node.firstChild && node.firstChild.nodeValue) {
        return node.firstChild.nodeValue;
      }
      return null;
    }
  }, {
    key: '_getAddonType',
    value: function _getAddonType() {
      var addonType = null;
      var node = this._getTopLevelNodeByTag('em:type');

      if (node && node.firstChild && node.firstChild.nodeValue) {
        var typeValue = node.firstChild.nodeValue;
        if (!_const.ADDON_TYPE_MAP.hasOwnProperty(typeValue)) {
          _logger2.default.debug('Invalid type value "%s"', typeValue);
          this.collector.addError(messages.RDF_TYPE_INVALID);
        } else {
          addonType = _const.ADDON_TYPE_MAP[typeValue];
          _logger2.default.debug('Mapping original <em:type> value "%s" -> "%s"', typeValue, addonType);
        }
      } else {
        _logger2.default.warn('<em:type> was not found in install.rdf');
        this.collector.addNotice(messages.RDF_TYPE_MISSING);
      }
      return addonType;
    }
  }, {
    key: '_getIsBootstrapped',
    value: function _getIsBootstrapped() {
      return this._getNodeValue(this._getTopLevelNodeByTag('em:bootstrap')) === 'true';
    }
  }, {
    key: '_getGUID',
    value: function _getGUID() {
      // Install.rdf only.
      var guid = this._getNodeValue(this._getTopLevelNodeByTag('em:id'));
      if (!guid) {
        this.collector.addError(messages.RDF_ID_MISSING);
      }
      if (guid && guid.length > 255) {
        this.collector.addError(messages.RDF_GUID_TOO_LONG);
      }
      return guid;
    }
  }, {
    key: '_getName',
    value: function _getName() {
      var name = this._getNodeValue(this._getTopLevelNodeByTag('em:name'));
      if (name === null) {
        this.collector.addError(messages.RDF_NAME_MISSING);
      }
      return name;
    }
  }, {
    key: '_getVersion',
    value: function _getVersion() {
      var version = this._getNodeValue(this._getTopLevelNodeByTag('em:version'));
      if (version === null) {
        this.collector.addError(messages.RDF_VERSION_MISSING);
      }
      return version;
    }
  }]);

  return InstallRdfParser;
}();

exports.default = InstallRdfParser;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _templateObject = _taggedTemplateLiteral(['/', ': Unknown ', '\n          "', '" at ', '.'], ['/', ': Unknown ', '\n          "', '" at ', '.']);

var _path = __webpack_require__(6);

var _path2 = _interopRequireDefault(_path);

var _relaxedJson = __webpack_require__(18);

var _relaxedJson2 = _interopRequireDefault(_relaxedJson);

var _validator = __webpack_require__(74);

var _validator2 = _interopRequireDefault(_validator);

var _cli = __webpack_require__(7);

var _const = __webpack_require__(1);

var _logger = __webpack_require__(3);

var _logger2 = _interopRequireDefault(_logger);

var _messages = __webpack_require__(2);

var messages = _interopRequireWildcard(_messages);

var _json = __webpack_require__(12);

var _json2 = _interopRequireDefault(_json);

var _formats = __webpack_require__(14);

var _utils = __webpack_require__(0);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ManifestJSONParser = function (_JSONParser) {
  _inherits(ManifestJSONParser, _JSONParser);

  function ManifestJSONParser(jsonString, collector) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref$filename = _ref.filename,
        filename = _ref$filename === undefined ? _const.MANIFEST_JSON : _ref$filename,
        _ref$RelaxedJSON = _ref.RelaxedJSON,
        RelaxedJSON = _ref$RelaxedJSON === undefined ? _relaxedJson2.default : _ref$RelaxedJSON,
        _ref$selfHosted = _ref.selfHosted,
        selfHosted = _ref$selfHosted === undefined ? (0, _cli.getConfig)().argv.selfHosted : _ref$selfHosted,
        _ref$io = _ref.io,
        io = _ref$io === undefined ? null : _ref$io;

    _classCallCheck(this, ManifestJSONParser);

    var _this = _possibleConstructorReturn(this, (ManifestJSONParser.__proto__ || Object.getPrototypeOf(ManifestJSONParser)).call(this, jsonString, collector, { filename: filename }));

    _this.parse(RelaxedJSON);

    // Set up some defaults in case parsing fails.
    if (typeof _this.parsedJSON === 'undefined' || _this.isValid === false) {
      _this.parsedJSON = {
        manifestVersion: null,
        name: null,
        type: _const.PACKAGE_EXTENSION,
        version: null
      };
    } else {
      // We've parsed the JSON; now we can validate the manifest.
      _this.selfHosted = selfHosted;
      _this.io = io;
      _this._validate();
    }
    return _this;
  }

  _createClass(ManifestJSONParser, [{
    key: 'errorLookup',
    value: function errorLookup(error) {
      // This is the default message.
      var baseObject = messages.JSON_INVALID;

      // This is the default from webextension-manifest-schema, but it's not a
      // super helpful error. We'll tidy it up a bit:
      if (error && error.message) {
        var lowerCaseMessage = error.message.toLowerCase();
        if (lowerCaseMessage === 'should not have additional properties') {
          error.message = 'is not a valid key or has invalid extra properties';
        }
      }

      var overrides = {
        message: '"' + error.dataPath + '" ' + error.message,
        dataPath: error.dataPath
      };

      if (error.keyword === 'required') {
        baseObject = messages.MANIFEST_FIELD_REQUIRED;
      } else if (error.dataPath.startsWith('/permissions') && typeof error.data !== 'undefined' && typeof error.data !== 'string') {
        baseObject = messages.MANIFEST_BAD_PERMISSION;
        overrides = { message: 'Permissions ' + error.message + '.' };
      } else if (error.keyword === 'type') {
        baseObject = messages.MANIFEST_FIELD_INVALID;
      }

      // Arrays can be extremely verbose, this tries to make them a little
      // more sane. Using a regex because there will likely be more as we
      // expand the schema.
      var match = error.dataPath.match(/^\/(permissions)\/([\d+])/);
      if (match && baseObject.code !== messages.MANIFEST_BAD_PERMISSION.code) {
        baseObject = messages['MANIFEST_' + match[1].toUpperCase()];
        overrides.message = (0, _utils.singleLineString)(_templateObject, match[1], match[1], error.data, match[2]);
      }

      return Object.assign({}, baseObject, overrides);
    }
  }, {
    key: '_validate',
    value: function _validate() {
      // Not all messages returned by the schema are fatal to Firefox, messages
      // that are just warnings should be added to this array.
      var warnings = [messages.MANIFEST_PERMISSIONS.code];

      this.isValid = (0, _validator2.default)(this.parsedJSON);
      if (!this.isValid) {
        _logger2.default.debug('Schema Validation messages', _validator2.default.errors);

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = _validator2.default.errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var error = _step.value;

            var message = this.errorLookup(error);

            if (warnings.includes(message.code)) {
              this.collector.addWarning(message);
            } else {
              this.collector.addError(message);
            }

            // Add-ons with bad permissions will fail to install in Firefox, so
            // we consider them invalid.
            if (message.code === messages.MANIFEST_BAD_PERMISSION.code) {
              this.isValid = false;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      if (this.parsedJSON.content_security_policy) {
        this.collector.addWarning(messages.MANIFEST_CSP);
      }

      if (this.parsedJSON.update_url) {
        this.collector.addNotice(messages.MANIFEST_UNUSED_UPDATE);
      }

      if (!this.selfHosted && this.parsedJSON.applications && this.parsedJSON.applications.gecko && this.parsedJSON.applications.gecko.update_url) {
        this.collector.addError(messages.MANIFEST_UPDATE_URL);
        this.isValid = false;
      }

      if ((0, _formats.isToolkitVersionString)(this.parsedJSON.version)) {
        this.collector.addNotice(messages.PROP_VERSION_TOOLKIT_ONLY);
      }

      if (this.parsedJSON.default_locale) {
        var msg = _path2.default.join('_locales', this.parsedJSON.default_locale, 'messages.json');
        if (!this.io.files[msg]) {
          this.collector.addError(messages.NO_MESSAGES_FILE);
          this.isValid = false;
        }
      }

      if (!this.parsedJSON.default_locale && this.io) {
        var match_re = /^_locales\/.*?\/messages.json$/;
        for (var filePath in this.io.files) {
          if (filePath.match(match_re)) {
            this.collector.addError(messages.NO_DEFAULT_LOCALE);
            this.isValid = false;
            break;
          }
        }
      }
    }
  }, {
    key: 'getAddonId',
    value: function getAddonId() {
      try {
        var id = this.parsedJSON.applications.gecko.id;
        return typeof id === 'undefined' ? null : id;
      } catch (e) {
        _logger2.default.error('Failed to get the id from the manifest.');
        return null;
      }
    }
  }, {
    key: 'getMetadata',
    value: function getMetadata() {
      return {
        id: this.getAddonId(),
        manifestVersion: this.parsedJSON.manifest_version,
        name: this.parsedJSON.name,
        type: _const.PACKAGE_EXTENSION,
        version: this.parsedJSON.version
      };
    }
  }]);

  return ManifestJSONParser;
}(_json2.default);

exports.default = ManifestJSONParser;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DANGEROUS_CATEGORIES = undefined;
exports.checkCategories = checkCategories;

var _messages = __webpack_require__(2);

var _const = __webpack_require__(1);

var DANGEROUS_CATEGORIES = exports.DANGEROUS_CATEGORIES = ['JavaScript-global-constructor', 'JavaScript-global-constructor-prototype-alias', 'JavaScript-global-property', 'JavaScript-global-privileged-property', 'JavaScript-global-static-nameset', 'JavaScript-global-dynamic-nameset', 'JavaScript-DOM-class', 'JavaScript-DOM-interface'];

function checkCategories(triples, filename) {
  var validationMessages = [];

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = triples[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var triple = _step.value;

      if (triple.subject === 'category' && (DANGEROUS_CATEGORIES.includes(triple.predicate) || triple.predicate === 'JavaScript' && triple.object.startsWith('global ') || triple.object.startsWith('DOM '))) {
        var message = Object.assign({}, _messages.DANGEROUS_CATEGORY, {
          file: filename,
          line: triple.line,
          type: _const.VALIDATION_WARNING
        });
        validationMessages.push(message);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return validationMessages;
}

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _categories = __webpack_require__(42);

Object.keys(_categories).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _categories[key];
    }
  });
});

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _invalidNesting = __webpack_require__(45);

Object.keys(_invalidNesting).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _invalidNesting[key];
    }
  });
});

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.invalidNesting = invalidNesting;

var _messages = __webpack_require__(2);

var messages = _interopRequireWildcard(_messages);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function invalidNesting(cssNode, filename) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      startLine = _ref.startLine,
      startColumn = _ref.startColumn;

  var messageList = [];
  if (cssNode.type === 'rule') {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = cssNode.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var node = _step.value;

        if (node.type === 'rule') {
          messageList.push(Object.assign({}, messages.INVALID_SELECTOR_NESTING, {
            type: 'warning',
            line: startLine,
            column: startColumn,
            file: filename
          }));
          break;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }
  return messageList;
}

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ensureRequiredAttributes = ensureRequiredAttributes;
exports._ensureAttributesInTag = _ensureAttributesInTag;

var _const = __webpack_require__(1);

var _messages = __webpack_require__(2);

var messages = _interopRequireWildcard(_messages);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function ensureRequiredAttributes($, filename) {
  return new Promise(function (resolve) {
    var linterMessages = [];

    for (var tag in _const.HTML_TAGS_WITH_REQUIRED_ATTRIBUTES) {
      linterMessages = linterMessages.concat(_ensureAttributesInTag($, tag, _const.HTML_TAGS_WITH_REQUIRED_ATTRIBUTES[tag], filename));
    }

    resolve(linterMessages);
  });
}

function _ensureAttributesInTag($, tag, attributes, filename) {
  var linterMessages = [];

  $(tag).each(function (i, element) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = attributes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var attributeName = _step.value;

        var errorCode = (tag + '_REQUIRES_' + attributeName).toUpperCase();

        if ($(element).attr(attributeName) === undefined) {
          linterMessages.push({
            code: errorCode,
            message: messages[errorCode].message,
            description: messages[errorCode].description,
            sourceCode: '<' + tag + '>',
            file: filename,
            type: _const.VALIDATION_ERROR
          });
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });

  return linterMessages;
}

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ensureRequiredAttributes = __webpack_require__(46);

Object.keys(_ensureRequiredAttributes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _ensureRequiredAttributes[key];
    }
  });
});

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _const = __webpack_require__(1);

exports.default = {
  create: function create(context) {
    return {
      Identifier: function Identifier(node) {
        if (_const.BANNED_IDENTIFIERS.includes(node.name)) {
          return context.report(node, 'BANNED_' + node.name.toUpperCase());
        }
      },
      MemberExpression: function MemberExpression(node) {
        if (_const.BANNED_IDENTIFIERS.includes(node.property.name)) {
          return context.report(node, 'BANNED_' + node.property.name.toUpperCase());
        }
      }
    };
  }
};

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEPRECATED_ENTITIES = undefined;

var _messages = __webpack_require__(2);

var _utils = __webpack_require__(0);

var DEPRECATED_ENTITIES = exports.DEPRECATED_ENTITIES = [{
  error: _messages.NO_DOCUMENT_WRITE,
  object: 'document',
  property: 'write'
}, {
  error: _messages.NSI_DNS_SERVICE_RESOLVE,
  object: 'nsIDNSService',
  property: 'resolve'
}, {
  error: _messages.NSI_SOUND_PLAY,
  object: 'nsISound',
  property: 'play'
}, {
  error: _messages.TAB_URL_OVERRIDE,
  object: 'NewTabURL',
  property: 'override'
}];

exports.default = {
  create: function create(context) {
    return {
      CallExpression: function CallExpression(node) {
        var referenceNode = (0, _utils.getNodeReference)(context, node.callee);
        // We're only looking for calls that look like `foo.bar()`.
        if (typeof referenceNode.object !== 'undefined' && referenceNode.property.type === 'Identifier' && referenceNode.object.type === 'Identifier') {

          var referenceObject = (0, _utils.getNodeReference)(context, referenceNode.object);

          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = DEPRECATED_ENTITIES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var entity = _step.value;

              // Check to see if the node matches a deprecated entity.
              if (referenceObject.name === entity.object && referenceNode.property.name === entity.property) {
                return context.report(node, entity.error.code);
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }
      }
    };
  }
};

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _javascript = __webpack_require__(5);

var _utils = __webpack_require__(0);

exports.default = {
  create: function create(context) {
    return {
      CallExpression: function CallExpression(node) {
        var referenceNode = (0, _utils.getNodeReference)(context, node.callee);
        if (typeof referenceNode.property !== 'undefined' && referenceNode.property.type === 'Identifier' && referenceNode.property.name === 'addEventListener') {

          if (node.arguments.length > 3) {
            var wantsUntrusted = node.arguments[3];
            switch (wantsUntrusted.type) {
              case 'Literal':
                if (wantsUntrusted.value) {
                  return context.report({
                    node: node,
                    message: _javascript.EVENT_LISTENER_FOURTH.code
                  });
                }
                break;
              case 'Identifier':
                referenceNode = (0, _utils.getNodeReference)(context, wantsUntrusted);
                if (referenceNode.value) {
                  return context.report({
                    node: node,
                    message: _javascript.EVENT_LISTENER_FOURTH.code
                  });
                }
                break;
            }
          }
        }
      }
    };
  }
};

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _messages = __webpack_require__(2);

var _utils = __webpack_require__(0);

/*
 * This rule will detect a global passed to `require()` as the first arg
 *
 */
exports.default = {
  create: function create(context) {
    return {
      CallExpression: function CallExpression(node) {
        if (node.callee.name === 'require' && node.arguments && node.arguments.length) {
          var firstArg = node.arguments[0];
          if (firstArg.type === 'Identifier') {
            var pathVar = (0, _utils.getVariable)(context, firstArg.name);
            if (typeof pathVar === 'undefined') {
              // We infer this is probably a global.
              return context.report(node, _messages.UNEXPECTED_GLOGAL_ARG.code);
            }
          }
        }
      }
    };
  }
};

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// We are using commonjs style imports here to avoid the need to import
// and correctly export again so that it's only one line to add.

module.exports = {
  rules: {
    'banned-identifiers': __webpack_require__(48).default,
    'deprecated-entities': __webpack_require__(49).default,
    'event-listener-fourth': __webpack_require__(50).default,
    'global-require-arg': __webpack_require__(51).default,
    'init-null-arg': __webpack_require__(53).default,
    'low-level-module': __webpack_require__(54).default,
    'mozindexeddb': __webpack_require__(56).default,
    'mozindexeddb-property': __webpack_require__(55).default,
    'only-prefs-in-defaults': __webpack_require__(57).default,
    'opendialog-nonlit-uri': __webpack_require__(58).default,
    'opendialog-remote-uri': __webpack_require__(59).default,
    'shallow-wrapper': __webpack_require__(60).default,
    'webextension-api': __webpack_require__(61).default,
    'webextension-unsupported-api': __webpack_require__(62).default,
    'widget-module': __webpack_require__(63).default
  }
};

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _javascript = __webpack_require__(5);

var _utils = __webpack_require__(0);

exports.default = {
  create: function create(context) {
    return {
      CallExpression: function CallExpression(node) {
        // Check if what's being called is nsiTransferable.init()
        if (typeof node.callee !== 'undefined') {
          var nodeReference = (0, _utils.getNodeReference)(context, node.callee);
          var nodeObject = (0, _utils.getNodeReference)(context, nodeReference.object);

          if (nodeObject === undefined) {
            return;
          }
          if (nodeObject.name === 'nsITransferable' && nodeReference.property.name === 'init') {

            if (node.arguments.length > 0) {
              // Get the reference to the first arg and check if it's null.
              var arg = (0, _utils.getNodeReference)(context, node.arguments[0]);
              if (arg.value === null) {
                return context.report({ node: node, message: _javascript.INIT_NULL_ARG.code });
              }
            }
          }
        }
      }
    };
  }
};

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _const = __webpack_require__(1);

var _messages = __webpack_require__(2);

var _utils = __webpack_require__(0);

/*
 * This rule will detect use of `require()` with the first arg being either
 * a literal that matches a restricted module or a var pointing to a literal
 * that matches a restricted value.
 *
 * TODO: This rule should only be run for jetpack.
 * TODO: Check what the requires_chrome feature does in the old code.
 *
 */
exports.default = {
  create: function create(context) {
    return {
      CallExpression: function CallExpression(node) {
        var requiresLowLevelMod = false;
        if (node.callee.name === 'require' && node.arguments && node.arguments.length) {

          var firstArg = node.arguments[0];

          // Find a literal string value passed to the
          // the require function.
          if (firstArg.type === 'Literal' && _const.LOW_LEVEL_MODULES.includes(firstArg.value)) {
            requiresLowLevelMod = true;
          }

          // Detect a var matching the widget module
          // being passed as the first arg of require().
          if (firstArg.type === 'Identifier') {
            var pathVar = (0, _utils.getVariable)(context, firstArg.name);
            if (pathVar && pathVar.type === 'Literal' && _const.LOW_LEVEL_MODULES.includes(pathVar.value)) {
              requiresLowLevelMod = true;
            }
          }

          if (requiresLowLevelMod) {
            return context.report(node, _messages.LOW_LEVEL_MODULE.code);
          }
        }
      }
    };
  }
};

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _messages = __webpack_require__(2);

exports.default = {
  create: function create(context) {
    return {
      Identifier: function Identifier(node) {
        // Catches `var foo = 'mozIndexedDB'; var myDatabase = window[foo];`.
        if (node.parent.init && node.parent.init.value === 'mozIndexedDB') {
          return context.report(node, _messages.MOZINDEXEDDB_PROPERTY.code);
        }
      },
      MemberExpression: function MemberExpression(node) {
        // Catches `var foo = window.mozIndexedDB;` and
        // `var foo = window['mozIndexedDB'];`.
        if (node.property.name === 'mozIndexedDB' || node.property.value === 'mozIndexedDB') {
          context.report(node, _messages.MOZINDEXEDDB_PROPERTY.code);
        }
      }
    };
  }
};

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _messages = __webpack_require__(2);

exports.default = {
  create: function create(context) {
    return {
      Identifier: function Identifier(node) {
        // Catches `var foo = mozIndexedDB;`.
        if (node.name === 'mozIndexedDB' && node.parent.type !== 'MemberExpression') {
          return context.report(node, _messages.MOZINDEXEDDB.code);
        }
      }
    };
  }
};

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = __webpack_require__(6);

var _path2 = _interopRequireDefault(_path);

var _javascript = __webpack_require__(5);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  create: function create(context) {
    var relPath = _path2.default.relative(process.cwd(), context.getFilename());

    // This rule only applies to files in defaults/preferences
    if (_path2.default.dirname(relPath).startsWith('defaults/preferences')) {
      return {
        CallExpression: function CallExpression(node) {
          var root = (0, _utils.getRootExpression)(node);

          if (root.name !== 'pref' && root.name !== 'user_pref') {
            return context.report(node, _javascript.ONLY_PREFS_IN_DEFAULTS.code);
          }
        }
      };
    } else {
      return {};
    }
  }
};

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _messages = __webpack_require__(2);

exports.default = {
  create: function create(context) {
    return {
      CallExpression: function CallExpression(node) {
        if (node.callee.type === 'MemberExpression' && node.callee.property.type === 'Identifier' && node.callee.property.name === 'openDialog') {

          if (node.arguments.length) {
            var uri = node.arguments[0];
            if (uri.type !== 'Literal') {
              return context.report(node, _messages.OPENDIALOG_NONLIT_URI.code);
            }
          }
        }
      }
    };
  }
};

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(0);

var _messages = __webpack_require__(2);

exports.default = {
  create: function create(context) {
    return {
      CallExpression: function CallExpression(node) {
        if (node.callee.type === 'MemberExpression' && node.callee.property.type === 'Identifier' && node.callee.property.name === 'openDialog') {

          if (node.arguments.length) {
            var uri = node.arguments[0];
            if (uri.type === 'Literal' && (0, _utils.isLocalUrl)(uri.value) === false) {
              return context.report(node, _messages.OPENDIALOG_REMOTE_URI.code);
            }
          }
        }
      }
    };
  }
};

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _messages = __webpack_require__(2);

// This rule is used for older add-ons (non-Jetpack I believe) but honestly
// it is a bit unclear as the MDN docs on XPCNativeWrapper seem to have moved
// to XRay: https://developer.mozilla.org/en-US/docs/Xray_vision
//
// TODO: Find out more about this rule.
exports.default = {
  create: function create(context) {
    function _testForShallowWrapper(node) {
      if (node.callee.name === 'XPCNativeWrapper' && node.callee.type === 'Identifier') {

        if (node.arguments[0].type === 'Identifier' || node.arguments[0].type === 'MemberExpression') {
          return context.report(node, _messages.SHALLOW_WRAPPER.code);
        }
      }
    }

    return {
      CallExpression: _testForShallowWrapper,
      NewExpression: _testForShallowWrapper
    };
  }
};

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _browserApis = __webpack_require__(13);

var _utils = __webpack_require__(0);

exports.default = {
  create: function create(context) {
    return {
      MemberExpression: function MemberExpression(node) {
        if (node.object.object && ['chrome', 'browser'].includes(node.object.object.name)) {
          var namespace = node.object.property.name;
          var property = node.property.name;
          var api = namespace + '.' + property;

          if ((0, _browserApis.isDeprecatedApi)(namespace, property)) {
            return context.report(node, (0, _utils.apiToMessage)(api));
          }

          if (!context.settings.addonMetadata.id && (0, _browserApis.isTemporaryApi)(namespace, property)) {
            return context.report(node, (0, _utils.apiToMessage)(api));
          }
        }
      }
    };
  }
};

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _javascript = __webpack_require__(5);

var _browserApis = __webpack_require__(13);

exports.default = {
  create: function create(context) {
    return {
      MemberExpression: function MemberExpression(node) {
        if (node.object.object && ['chrome', 'browser'].includes(node.object.object.name)) {
          var namespace = node.object.property.name;
          var property = node.property.name;
          var api = namespace + '.' + property;

          if (!(0, _browserApis.hasBrowserApi)(namespace, property)) {
            context.report(node, _javascript.UNSUPPORTED_API.messageFormat, { api: api });
          }
        }
      }
    };
  }
};

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _messages = __webpack_require__(2);

var _utils = __webpack_require__(0);

var WIDGET_PATH = 'sdk/widget';

/*
 * This rule will detect use of `require()` with the first arg being either
 * a literal that matches the widget module or var pointing at a literal.
 *
 * TODO: This rule looks to be related to compat - based on the old tests.
 * TODO: This rule should only be run for jetpack.
 *
 */
exports.default = {
  create: function create(context) {
    return {
      CallExpression: function CallExpression(node) {
        var requiresWidgetMod = false;
        if (node.callee.name === 'require' && node.arguments && node.arguments.length) {

          var firstArg = node.arguments[0];

          // Find a literal string value passed to the
          // the require function.
          if (firstArg.type === 'Literal' && firstArg.value === WIDGET_PATH) {
            requiresWidgetMod = true;
          }

          // Detect a var matching the widget module
          // being passed as the first arg of require().
          if (firstArg.type === 'Identifier') {
            var pathVar = (0, _utils.getVariable)(context, firstArg.name);
            if (pathVar && pathVar.type === 'Literal' && pathVar.value === WIDGET_PATH) {
              requiresWidgetMod = true;
            }
          }

          if (requiresWidgetMod) {
            return context.report(node, _messages.DEPREC_SDK_MOD_WIDGET.code);
          }
        }
      }
    };
  }
};

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _mustNotExist = __webpack_require__(65);

Object.keys(_mustNotExist).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _mustNotExist[key];
    }
  });
});

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mustNotExist = mustNotExist;
exports._checkForTags = _checkForTags;

var _const = __webpack_require__(1);

var _messages = __webpack_require__(2);

var messages = _interopRequireWildcard(_messages);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function mustNotExist(xmlDoc, filename) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      namespace = _ref.namespace;

  return new Promise(function (resolve) {
    var bannedTags = _const.RDF_UNALLOWED_TAGS;
    var linterMessages = [];

    var addonIsListed = xmlDoc.getElementsByTagNameNS(namespace, 'listed').length > 0;

    if (addonIsListed) {
      bannedTags = bannedTags.concat(_const.RDF_UNALLOWED_IF_LISTED_TAGS);
    }

    // Using any banned tag is an error.
    linterMessages = linterMessages.concat(_checkForTags({
      xmlDoc: xmlDoc,
      namespace: namespace,
      tags: bannedTags,
      type: _const.VALIDATION_ERROR,
      prefix: 'TAG_NOT_ALLOWED_',
      filename: filename
    }));

    // But using an obsolete tag is just a warning.
    linterMessages = linterMessages.concat(_checkForTags({
      xmlDoc: xmlDoc,
      namespace: namespace,
      tags: _const.RDF_OBSOLETE_TAGS,
      type: _const.VALIDATION_WARNING,
      prefix: 'TAG_OBSOLETE_',
      filename: filename
    }));

    resolve(linterMessages);
  });
}

function _checkForTags() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      xmlDoc = _ref2.xmlDoc,
      namespace = _ref2.namespace,
      tags = _ref2.tags,
      type = _ref2.type,
      prefix = _ref2.prefix,
      filename = _ref2.filename;

  var linterMessages = [];

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = tags[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var tag = _step.value;

      var nodeList = xmlDoc.getElementsByTagNameNS(namespace, tag);

      for (var i = 0; i < nodeList.length; i++) {
        var element = nodeList.item(i);
        var errorCode = '' + prefix + tag.toUpperCase();

        linterMessages.push({
          code: errorCode,
          message: messages[errorCode].message,
          description: messages[errorCode].description,
          sourceCode: '<' + tag + '>', // Don't really know what to use here.
          file: filename,
          line: element.line,
          column: element.column,
          type: type
        });
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return linterMessages;
}

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _base = __webpack_require__(4);

var _base2 = _interopRequireDefault(_base);

var _messages = __webpack_require__(2);

var messages = _interopRequireWildcard(_messages);

var _const = __webpack_require__(1);

var constants = _interopRequireWildcard(_const);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BinaryScanner = function (_BaseScanner) {
  _inherits(BinaryScanner, _BaseScanner);

  function BinaryScanner() {
    _classCallCheck(this, BinaryScanner);

    return _possibleConstructorReturn(this, (BinaryScanner.__proto__ || Object.getPrototypeOf(BinaryScanner)).apply(this, arguments));
  }

  _createClass(BinaryScanner, [{
    key: 'check',
    value: function check(buffer, values) {
      for (var v in values) {
        if (values[v] !== buffer[v]) {
          return;
        }
      }
      this.linterMessages.push(Object.assign({}, messages.FLAGGED_FILE_TYPE, {
        type: constants.VALIDATION_NOTICE,
        file: this.filename
      }));
    }
  }, {
    key: 'scan',
    value: function scan() {
      var buffer = this.contents;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = constants.FLAGGED_FILE_MAGIC_NUMBERS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var entry = _step.value;

          this.check(buffer, entry);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return Promise.resolve(this.linterMessages);
    }
  }], [{
    key: 'fileStreamType',
    get: function get() {
      return 'chunk';
    }
  }]);

  return BinaryScanner;
}(_base2.default);

exports.default = BinaryScanner;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _base = __webpack_require__(4);

var _base2 = _interopRequireDefault(_base);

var _chromemanifest = __webpack_require__(39);

var _chromemanifest2 = _interopRequireDefault(_chromemanifest);

var _chromemanifest3 = __webpack_require__(43);

var rules = _interopRequireWildcard(_chromemanifest3);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ChromeManifestScanner = function (_BaseScanner) {
  _inherits(ChromeManifestScanner, _BaseScanner);

  function ChromeManifestScanner() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ChromeManifestScanner);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ChromeManifestScanner.__proto__ || Object.getPrototypeOf(ChromeManifestScanner)).call.apply(_ref, [this].concat(args))), _this), _this._defaultRules = rules, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ChromeManifestScanner, [{
    key: '_getContents',
    value: function _getContents() {
      var _ChromeManifestParser = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _chromemanifest2.default;

      var cmParser = new _ChromeManifestParser(this.contents, this.filename);
      return cmParser.parse();
    }
  }], [{
    key: 'fileResultType',
    get: function get() {
      return 'stream';
    }
  }]);

  return ChromeManifestScanner;
}(_base2.default);

exports.default = ChromeManifestScanner;

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _css = __webpack_require__(44);

var rules = _interopRequireWildcard(_css);

var _postcss = __webpack_require__(125);

var postcss = _interopRequireWildcard(_postcss);

var _base = __webpack_require__(4);

var _base2 = _interopRequireDefault(_base);

var _logger = __webpack_require__(3);

var _logger2 = _interopRequireDefault(_logger);

var _messages = __webpack_require__(2);

var _const = __webpack_require__(1);

var _utils = __webpack_require__(0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CSSScanner = function (_BaseScanner) {
  _inherits(CSSScanner, _BaseScanner);

  function CSSScanner() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CSSScanner);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CSSScanner.__proto__ || Object.getPrototypeOf(CSSScanner)).call.apply(_ref, [this].concat(args))), _this), _this._defaultRules = rules, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(CSSScanner, [{
    key: 'processCode',
    value: function processCode(cssNode, cssInstruction) {
      var _rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._defaultRules;

      var file = this.filename;
      var cssOptions = Object.assign({}, this.options, {
        startLine: cssNode.source.start.line,
        startColumn: cssNode.source.start.column
      });

      var info = {
        file: file,
        startLine: cssOptions.startLine,
        startColumn: cssOptions.startColumn
      };

      if (cssNode.type === 'comment') {
        _logger2.default.debug('Found CSS comment. Skipping', info);
        return;
      }

      if (cssNode.type === 'atrule') {
        _logger2.default.debug('Processing media rules');
        if (cssNode.nodes && cssNode.nodes.length) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = cssNode.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var mediaCssNode = _step.value;

              this.processCode(mediaCssNode, cssInstruction, _rules);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        } else {
          _logger2.default.debug('No media rules found');
        }
        return;
      }

      _logger2.default.debug('Passing CSS code to rule function "%s"', cssInstruction, info);

      this.linterMessages = this.linterMessages.concat(_rules[cssInstruction](cssNode, file, cssOptions));
    }
  }, {
    key: 'scan',
    value: function scan() {
      var _this2 = this;

      var _rules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._defaultRules;

      return new Promise(function (resolve, reject) {
        _this2.getContents().then(function (ast) {
          if (ast && ast.nodes) {
            var rules = (0, _utils.ignorePrivateFunctions)(_rules);
            var nodes = ast.nodes;

            for (var cssInstruction in rules) {
              _this2._rulesProcessed++;
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = nodes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var cssNode = _step2.value;

                  _this2.processCode(cssNode, cssInstruction, rules);
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }
            }
          }

          resolve(_this2.linterMessages);
        }).catch(reject);
      });
    }
  }, {
    key: '_getContents',
    value: function _getContents() {
      var _this3 = this;

      var _cssParser = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : postcss;

      return new Promise(function (resolve, reject) {
        try {
          var rootNode = _cssParser.parse(_this3.contents, { from: _this3.filename });
          return resolve(rootNode);
        } catch (e) {
          if (!e.reason || e.name !== 'CssSyntaxError') {
            return reject(e);
          } else {
            _this3.linterMessages.push(Object.assign({}, _messages.CSS_SYNTAX_ERROR, {
              type: _const.VALIDATION_WARNING,
              // Use the reason for the error as the message.
              // e.message includes an absolute path.
              message: e.reason,
              column: e.column,
              line: e.line,
              // We use our own ref to the file as postcss outputs
              // absolute paths.
              file: _this3.filename
            }));
          }

          // A syntax error has been encounted so it's game over.
          return resolve(null);
        }
      });
    }
  }]);

  return CSSScanner;
}(_base2.default);

exports.default = CSSScanner;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = __webpack_require__(6);

var _base = __webpack_require__(4);

var _base2 = _interopRequireDefault(_base);

var _messages = __webpack_require__(2);

var messages = _interopRequireWildcard(_messages);

var _const = __webpack_require__(1);

var constants = _interopRequireWildcard(_const);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FilenameScanner = function (_BaseScanner) {
  _inherits(FilenameScanner, _BaseScanner);

  function FilenameScanner() {
    _classCallCheck(this, FilenameScanner);

    return _possibleConstructorReturn(this, (FilenameScanner.__proto__ || Object.getPrototypeOf(FilenameScanner)).apply(this, arguments));
  }

  _createClass(FilenameScanner, [{
    key: 'scan',
    value: function scan() {
      var _this2 = this;

      return new Promise(function (resolve) {
        var extension = (0, _path.extname)(_this2.filename);

        if (_this2.filename.match(constants.ALREADY_SIGNED_REGEX)) {
          _this2.linterMessages.push(Object.assign({}, messages.ALREADY_SIGNED, {
            type: constants.VALIDATION_WARNING,
            file: _this2.filename
          }));
        } else if (_this2.filename.match(constants.HIDDEN_FILE_REGEX)) {
          _this2.linterMessages.push(Object.assign({}, messages.HIDDEN_FILE, {
            type: constants.VALIDATION_WARNING,
            file: _this2.filename
          }));
        } else if (_this2.filename.match(constants.FLAGGED_FILE_REGEX)) {
          _this2.linterMessages.push(Object.assign({}, messages.FLAGGED_FILE, {
            type: constants.VALIDATION_WARNING,
            file: _this2.filename
          }));
        } else if (constants.FLAGGED_FILE_EXTENSIONS.includes(extension)) {
          _this2.linterMessages.push(Object.assign({}, messages.FLAGGED_FILE_EXTENSION, {
            type: constants.VALIDATION_WARNING,
            file: _this2.filename
          }));
        } else {
          throw new Error('Filename didn\'t match a regex: ' + _this2.filename + '.');
        }
        return resolve(_this2.linterMessages);
      });
    }
  }]);

  return FilenameScanner;
}(_base2.default);

exports.default = FilenameScanner;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _cheerio = __webpack_require__(118);

var _cheerio2 = _interopRequireDefault(_cheerio);

var _base = __webpack_require__(4);

var _base2 = _interopRequireDefault(_base);

var _html = __webpack_require__(47);

var rules = _interopRequireWildcard(_html);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HTMLScanner = function (_BaseScanner) {
  _inherits(HTMLScanner, _BaseScanner);

  function HTMLScanner() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, HTMLScanner);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = HTMLScanner.__proto__ || Object.getPrototypeOf(HTMLScanner)).call.apply(_ref, [this].concat(args))), _this), _this._defaultRules = rules, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(HTMLScanner, [{
    key: '_getContents',
    value: function _getContents() {
      var _this2 = this;

      return new Promise(function (resolve) {
        var htmlDoc = _cheerio2.default.load(_this2.contents);

        resolve(htmlDoc);
      });
    }
  }]);

  return HTMLScanner;
}(_base2.default);

exports.default = HTMLScanner;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _templateObject = _taggedTemplateLiteral(['JS rules must pass a valid message as\n              the second argument to context.report()'], ['JS rules must pass a valid message as\n              the second argument to context.report()']);

var _eslint = __webpack_require__(123);

var _eslint2 = _interopRequireDefault(_eslint);

var _const = __webpack_require__(1);

var _messages2 = __webpack_require__(2);

var messages = _interopRequireWildcard(_messages2);

var _javascript = __webpack_require__(52);

var _utils = __webpack_require__(0);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var JavaScriptScanner = function () {
  function JavaScriptScanner(code, filename) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, JavaScriptScanner);

    this._defaultRules = _javascript.rules;

    this.code = code;
    this.filename = filename;
    this.options = options;
    this.linterMessages = [];
    this._rulesProcessed = 0;

    (0, _utils.ensureFilenameExists)(this.filename);
  }

  _createClass(JavaScriptScanner, [{
    key: 'scan',
    value: function scan() {
      var _this = this;

      var _ESLint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _eslint2.default;

      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$_rules = _ref._rules,
          _rules = _ref$_rules === undefined ? this._defaultRules : _ref$_rules,
          _ref$_ruleMapping = _ref._ruleMapping,
          _ruleMapping = _ref$_ruleMapping === undefined ? _const.ESLINT_RULE_MAPPING : _ref$_ruleMapping,
          _ref$_messages = _ref._messages,
          _messages = _ref$_messages === undefined ? messages : _ref$_messages;

      return new Promise(function (resolve) {
        var cli = new _ESLint.CLIEngine({
          baseConfig: {
            env: {
              es6: true,
              webextension: true,
              browser: true
            },
            settings: {
              addonMetadata: _this.options.addonMetadata
            }
          },
          parserOptions: {
            ecmaVersion: 2017
          },
          ignore: false,
          rules: _ruleMapping,
          plugins: ['no-unsafe-innerhtml'],
          allowInlineConfig: false,
          filename: _this.filename,
          // Avoid loading the addons-linter .eslintrc file
          useEslintrc: false
        });

        for (var name in _rules) {
          _this._rulesProcessed++;
          _ESLint.linter.defineRule(name, _rules[name]);
        }

        // ESLint is synchronous and doesn't accept streams, so we need to
        // pass it the entire source file as a string.
        var report = cli.executeOnText(_this.code, _this.filename, true);

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = report.results[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var result = _step.value;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = result.messages[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var message = _step2.value;

                // Fatal error messages (like SyntaxErrors) are a bit different, we
                // need to handle them specially.
                if (message.fatal === true) {
                  message.message = _messages.JS_SYNTAX_ERROR.code;
                }

                if (typeof message.message === 'undefined') {
                  throw new Error((0, _utils.singleLineString)(_templateObject));
                }

                // Fallback to looking up the message object by the message
                var code = message.message;

                // Support 3rd party eslint rules that don't have our internal
                // message structure and allow us to optionally overwrite
                // their `message` and `description`.
                if (_messages.hasOwnProperty(code)) {
                  var shortDescription = _messages[code].message;
                  var description = _messages[code].description;
                } else if (_const.ESLINT_OVERWRITE_MESSAGE.hasOwnProperty(message.ruleId)) {
                  var overwrites = _const.ESLINT_OVERWRITE_MESSAGE[message.ruleId];
                  var shortDescription = overwrites.message || message.message;
                  var description = overwrites.description || message.description;
                } else {
                  var shortDescription = code;
                  var description = null;
                }

                _this.linterMessages.push({
                  code: code,
                  column: message.column,
                  description: description,
                  file: _this.filename,
                  line: message.line,
                  message: shortDescription,
                  sourceCode: message.source,
                  type: _const.ESLINT_TYPES[message.severity]
                });
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        resolve(_this.linterMessages);
      });
    }
  }], [{
    key: 'fileResultType',
    get: function get() {
      return 'string';
    }
  }]);

  return JavaScriptScanner;
}();

exports.default = JavaScriptScanner;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _json = __webpack_require__(12);

var _json2 = _interopRequireDefault(_json);

var _base = __webpack_require__(4);

var _base2 = _interopRequireDefault(_base);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var JSONScanner = function (_BaseScanner) {
  _inherits(JSONScanner, _BaseScanner);

  function JSONScanner() {
    _classCallCheck(this, JSONScanner);

    return _possibleConstructorReturn(this, (JSONScanner.__proto__ || Object.getPrototypeOf(JSONScanner)).apply(this, arguments));
  }

  _createClass(JSONScanner, [{
    key: '_getContents',
    value: function _getContents() {
      return Promise.resolve(this.contents);
    }
  }, {
    key: 'scan',
    value: function scan() {
      var _this2 = this;

      return this.getContents().then(function (json) {
        var jsonParser = new _json2.default(json, _this2.options.collector, {
          filename: _this2.filename });
        jsonParser.parse();
        return Promise.resolve([]);
      }).catch(function (err) {
        return Promise.reject(err);
      });
    }
  }]);

  return JSONScanner;
}(_base2.default);

exports.default = JSONScanner;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _xmldom = __webpack_require__(129);

var _xmldom2 = _interopRequireDefault(_xmldom);

var _const = __webpack_require__(1);

var _base = __webpack_require__(4);

var _base2 = _interopRequireDefault(_base);

var _rdf = __webpack_require__(64);

var rules = _interopRequireWildcard(_rdf);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RDFScanner = function (_BaseScanner) {
  _inherits(RDFScanner, _BaseScanner);

  function RDFScanner(contents, filename) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, RDFScanner);

    // I don't think this ever needs to be different, but if it does we can
    // extract the em namespace using:
    //
    //     this.namespace = this._xmlDoc.documentElement._nsMap.em;
    //
    // Inside _getContents.
    var _this = _possibleConstructorReturn(this, (RDFScanner.__proto__ || Object.getPrototypeOf(RDFScanner)).call(this, contents, filename, options));

    _this._defaultRules = rules;
    if (typeof _this.options.namespace === 'undefined') {
      _this.options.namespace = _const.RDF_DEFAULT_NAMESPACE;
    }
    return _this;
  }

  _createClass(RDFScanner, [{
    key: '_getContents',
    value: function _getContents() {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        var xmlDoc = new _xmldom2.default.DOMParser({
          errorHandler: function errorHandler(err) {
            reject(new Error('RDFParseError: ' + err));
          }
        }).parseFromString(_this2.contents, 'text/xml');

        resolve(xmlDoc);
      });
    }
  }]);

  return RDFScanner;
}(_base2.default);

exports.default = RDFScanner;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ajv = __webpack_require__(115);

var _ajv2 = _interopRequireDefault(_ajv);

var _urlParse = __webpack_require__(20);

var _urlParse2 = _interopRequireDefault(_urlParse);

var _formats = __webpack_require__(14);

var _manifest = __webpack_require__(16);

var _manifest2 = _interopRequireDefault(_manifest);

var _imported = __webpack_require__(15);

var _imported2 = _interopRequireDefault(_imported);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isURL(value) {
  var url = new _urlParse2.default(value);
  return ['http:', 'https:'].includes(url.protocol);
}

function isSecureURL(value) {
  var url = new _urlParse2.default(value);
  return url.protocol === 'https:';
}

function isStrictRelativeUrl(value) {
  return !value.startsWith('//') && (0, _formats.isRelativeURL)(value);
}

var validator = (0, _ajv2.default)({
  allErrors: true,
  errorDataPath: 'property',
  jsonPointers: true,
  verbose: true,
  schemas: _imported2.default
});

validator.addFormat('versionString', _formats.isValidVersionString);
validator.addFormat('relativeUrl', _formats.isRelativeURL);
validator.addFormat('strictRelativeUrl', isStrictRelativeUrl);
validator.addFormat('url', isURL);
validator.addFormat('secureUrl', isSecureURL);
validator.addFormat('deprecated', function () {
  return false;
});
validator.addFormat('contentSecurityPolicy', function () {
  return true;
});
validator.addFormat('ignore', function () {
  return true;
});

exports.default = validator.compile(_manifest2.default);

/***/ }),
/* 75 */
/***/ (function(module, exports) {

module.exports = {
	"name": "addons-linter",
	"version": "0.19.1",
	"description": "Mozilla Add-ons Linter",
	"main": "dist/addons-linter.js",
	"bin": {
		"addons-linter": "bin/addons-linter"
	},
	"scripts": {
		"start": "grunt start",
		"build": "grunt build",
		"test": "grunt test",
		"test-no-coverage": "grunt test-no-coverage",
		"publish-rules": "grunt copy build-rules-html publish-rules",
		"publish-coverage": "grunt coveralls"
	},
	"repository": {
		"type": "git",
		"url": "git+https://github.com/mozilla/addons-linter.git"
	},
	"author": "Mozilla Add-ons Team",
	"license": "MPL-2.0",
	"bugs": {
		"url": "https://github.com/mozilla/addons-linter/issues"
	},
	"homepage": "https://github.com/mozilla/addons-linter#readme",
	"devDependencies": {
		"babel-core": "6.24.1",
		"babel-eslint": "7.2.2",
		"babel-istanbul": "0.12.2",
		"babel-istanbul-loader": "0.1.0",
		"babel-loader": "6.4.1",
		"babel-plugin-transform-class-properties": "6.18.0",
		"babel-preset-env": "1.4.0",
		"babel-plugin-transform-es2015-modules-commonjs": "6.24.1",
		"babel-preset-es2015": "6.24.0",
		"babel-preset-stage-2": "6.24.1",
		"chai": "3.5.0",
		"comment-json": "1.1.3",
		"coveralls": "2.13.0",
		"deepmerge": "1.3.2",
		"fstream": "1.0.11",
		"gfm.css": "1.1.1",
		"grunt": "1.0.1",
		"grunt-contrib-clean": "1.1.0",
		"grunt-contrib-copy": "1.0.0",
		"grunt-coveralls": "1.0.1",
		"grunt-eslint": "19.0.0",
		"grunt-gh-pages": "2.0.0",
		"grunt-mocha-test": "0.13.2",
		"grunt-newer": "1.3.0",
		"grunt-webpack": "2.0.1",
		"isparta": "4.0.0",
		"json-loader": "0.5.4",
		"load-grunt-configs": "1.0.0",
		"load-grunt-tasks": "3.5.2",
		"lodash.clonedeep": "4.5.0",
		"lodash.ismatchwith": "4.4.0",
		"markdown-it": "8.3.1",
		"markdown-it-anchor": "3.0.0",
		"markdown-it-emoji": "1.3.0",
		"mocha": "3.1.2",
		"mocha-multi": "0.11.0",
		"request": "2.81.0",
		"shelljs": "0.7.7",
		"sinon": "2.1.0",
		"webpack": "2.4.1",
		"webpack-dev-server": "2.4.2",
		"tar": "2.2.1"
	},
	"dependencies": {
		"ajv": "4.11.6",
		"babel-polyfill": "6.20.0",
		"bunyan": "1.8.10",
		"chalk": "1.1.3",
		"cheerio": "0.22.0",
		"columnify": "1.5.4",
		"crx-parser": "0.1.2",
		"dispensary": "0.10.5",
		"es6-promisify": "5.0.0",
		"eslint": "3.19.0",
		"eslint-plugin-no-unsafe-innerhtml": "EnTeQuAk/eslint-plugin-no-unsafe-innerhtml#4b6b606d50",
		"esprima": "3.1.3",
		"first-chunk-stream": "2.0.0",
		"postcss": "5.2.17",
		"relaxed-json": "1.0.1",
		"semver": "5.3.0",
		"source-map-support": "0.4.13",
		"strip-bom-stream": "3.0.0",
		"url-parse": "1.1.8",
		"xmldom": "0.1.22",
		"yargs": "7.1.0",
		"yauzl": "2.7.0"
	}
};

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./alarms.json": 77,
	"./bookmarks.json": 78,
	"./browser_action.json": 79,
	"./browsing_data.json": 80,
	"./commands.json": 81,
	"./context_menus.json": 82,
	"./context_menus_internal.json": 83,
	"./contextual_identities.json": 84,
	"./cookies.json": 85,
	"./devtools.json": 86,
	"./downloads.json": 87,
	"./events.json": 88,
	"./experiments.json": 89,
	"./extension.json": 90,
	"./extension_protocol_handlers.json": 91,
	"./extension_types.json": 92,
	"./history.json": 93,
	"./i18n.json": 94,
	"./identity.json": 95,
	"./idle.json": 96,
	"./management.json": 97,
	"./manifest.json": 16,
	"./notifications.json": 98,
	"./omnibox.json": 99,
	"./page_action.json": 100,
	"./privacy.json": 101,
	"./runtime.json": 102,
	"./sessions.json": 103,
	"./sidebar_action.json": 104,
	"./storage.json": 105,
	"./tabs.json": 106,
	"./test.json": 107,
	"./theme.json": 108,
	"./top_sites.json": 109,
	"./types.json": 110,
	"./url_overrides.json": 111,
	"./web_navigation.json": 112,
	"./web_request.json": 113,
	"./windows.json": 114
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 76;

/***/ }),
/* 77 */
/***/ (function(module, exports) {

module.exports = {
	"id": "alarms",
	"permissions": [
		"alarms"
	],
	"functions": [
		{
			"name": "create",
			"type": "function",
			"description": "Creates an alarm. After the delay is expired, the onAlarm event is fired. If there is another alarm with the same name (or no name if none is specified), it will be cancelled and replaced by this alarm.",
			"parameters": [
				{
					"type": "string",
					"name": "name",
					"optional": true,
					"description": "Optional name to identify this alarm. Defaults to the empty string."
				},
				{
					"type": "object",
					"name": "alarmInfo",
					"description": "Details about the alarm. The alarm first fires either at 'when' milliseconds past the epoch (if 'when' is provided), after 'delayInMinutes' minutes from the current time (if 'delayInMinutes' is provided instead), or after 'periodInMinutes' minutes from the current time (if only 'periodInMinutes' is provided). Users should never provide both 'when' and 'delayInMinutes'. If 'periodInMinutes' is provided, then the alarm recurs repeatedly after that many minutes.",
					"properties": {
						"when": {
							"type": "number",
							"description": "Time when the alarm is scheduled to first fire, in milliseconds past the epoch."
						},
						"delayInMinutes": {
							"type": "number",
							"description": "Number of minutes from the current time after which the alarm should first fire."
						},
						"periodInMinutes": {
							"type": "number",
							"description": "Number of minutes after which the alarm should recur repeatedly."
						}
					}
				}
			]
		},
		{
			"name": "get",
			"type": "function",
			"description": "Retrieves details about the specified alarm.",
			"async": "callback",
			"parameters": [
				{
					"type": "string",
					"name": "name",
					"optional": true,
					"description": "The name of the alarm to get. Defaults to the empty string."
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/Alarm"
								},
								{
									"name": "alarm"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "getAll",
			"type": "function",
			"description": "Gets an array of all the alarms.",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "alarms",
							"type": "array",
							"items": {
								"$ref": "#/types/Alarm"
							}
						}
					]
				}
			]
		},
		{
			"name": "clear",
			"type": "function",
			"description": "Clears the alarm with the given name.",
			"async": "callback",
			"parameters": [
				{
					"type": "string",
					"name": "name",
					"optional": true,
					"description": "The name of the alarm to clear. Defaults to the empty string."
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "wasCleared",
							"type": "boolean",
							"description": "Whether an alarm of the given name was found to clear."
						}
					]
				}
			]
		},
		{
			"name": "clearAll",
			"type": "function",
			"description": "Clears all alarms.",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "wasCleared",
							"type": "boolean",
							"description": "Whether any alarm was found to clear."
						}
					]
				}
			]
		}
	],
	"events": [
		{
			"name": "onAlarm",
			"type": "function",
			"description": "Fired when an alarm has expired. Useful for transient background pages.",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/Alarm"
						},
						{
							"name": "name",
							"description": "The alarm that has expired."
						}
					]
				}
			]
		}
	],
	"definitions": {},
	"refs": {},
	"types": {
		"Alarm": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"description": "Name of this alarm."
				},
				"scheduledTime": {
					"type": "number",
					"description": "Time when the alarm is scheduled to fire, in milliseconds past the epoch."
				},
				"periodInMinutes": {
					"type": "number",
					"description": "When present, signals that the alarm triggers periodically after so many minutes."
				}
			},
			"required": [
				"name",
				"scheduledTime"
			]
		}
	}
};

/***/ }),
/* 78 */
/***/ (function(module, exports) {

module.exports = {
	"id": "bookmarks",
	"description": "Use the <code>browser.bookmarks</code> API to create, organize, and otherwise manipulate bookmarks. Also see $(topic:override)[Override Pages], which you can use to create a custom Bookmark Manager page.",
	"permissions": [
		"bookmarks"
	],
	"functions": [
		{
			"name": "get",
			"type": "function",
			"description": "Retrieves the specified BookmarkTreeNode(s).",
			"async": "callback",
			"parameters": [
				{
					"name": "idOrIdList",
					"description": "A single string-valued id, or an array of string-valued ids",
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "array",
							"items": {
								"type": "string"
							},
							"minItems": 1
						}
					]
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "results",
							"type": "array",
							"items": {
								"$ref": "#/types/BookmarkTreeNode"
							}
						}
					]
				}
			]
		},
		{
			"name": "getChildren",
			"type": "function",
			"description": "Retrieves the children of the specified BookmarkTreeNode id.",
			"async": "callback",
			"parameters": [
				{
					"type": "string",
					"name": "id"
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "results",
							"type": "array",
							"items": {
								"$ref": "#/types/BookmarkTreeNode"
							}
						}
					]
				}
			]
		},
		{
			"name": "getRecent",
			"type": "function",
			"description": "Retrieves the recently added bookmarks.",
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"minimum": 1,
					"name": "numberOfItems",
					"description": "The maximum number of items to return."
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "results",
							"type": "array",
							"items": {
								"$ref": "#/types/BookmarkTreeNode"
							}
						}
					]
				}
			]
		},
		{
			"name": "getTree",
			"type": "function",
			"description": "Retrieves the entire Bookmarks hierarchy.",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "results",
							"type": "array",
							"items": {
								"$ref": "#/types/BookmarkTreeNode"
							}
						}
					]
				}
			]
		},
		{
			"name": "getSubTree",
			"type": "function",
			"description": "Retrieves part of the Bookmarks hierarchy, starting at the specified node.",
			"async": "callback",
			"parameters": [
				{
					"type": "string",
					"name": "id",
					"description": "The ID of the root of the subtree to retrieve."
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "results",
							"type": "array",
							"items": {
								"$ref": "#/types/BookmarkTreeNode"
							}
						}
					]
				}
			]
		},
		{
			"name": "search",
			"type": "function",
			"description": "Searches for BookmarkTreeNodes matching the given query. Queries specified with an object produce BookmarkTreeNodes matching all specified properties.",
			"async": "callback",
			"parameters": [
				{
					"name": "query",
					"description": "Either a string of words and quoted phrases that are matched against bookmark URLs and titles, or an object. If an object, the properties <code>query</code>, <code>url</code>, and <code>title</code> may be specified and bookmarks matching all specified properties will be produced.",
					"anyOf": [
						{
							"type": "string",
							"description": "A string of words and quoted phrases that are matched against bookmark URLs and titles."
						},
						{
							"type": "object",
							"description": "An object specifying properties and values to match when searching. Produces bookmarks matching all properties.",
							"properties": {
								"query": {
									"type": "string",
									"description": "A string of words and quoted phrases that are matched against bookmark URLs and titles."
								},
								"url": {
									"type": "string",
									"format": "url",
									"description": "The URL of the bookmark; matches verbatim. Note that folders have no URL."
								},
								"title": {
									"type": "string",
									"description": "The title of the bookmark; matches verbatim."
								}
							}
						}
					]
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "results",
							"type": "array",
							"items": {
								"$ref": "#/types/BookmarkTreeNode"
							}
						}
					]
				}
			]
		},
		{
			"name": "create",
			"type": "function",
			"description": "Creates a bookmark or folder under the specified parentId.  If url is NULL or missing, it will be a folder.",
			"async": "callback",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/CreateDetails"
						},
						{
							"name": "bookmark"
						}
					]
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/BookmarkTreeNode"
								},
								{
									"name": "result"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "move",
			"type": "function",
			"description": "Moves the specified BookmarkTreeNode to the provided location.",
			"async": "callback",
			"parameters": [
				{
					"type": "string",
					"name": "id"
				},
				{
					"type": "object",
					"name": "destination",
					"properties": {
						"parentId": {
							"type": "string"
						},
						"index": {
							"type": "integer",
							"minimum": 0
						}
					}
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/BookmarkTreeNode"
								},
								{
									"name": "result"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "update",
			"type": "function",
			"description": "Updates the properties of a bookmark or folder. Specify only the properties that you want to change; unspecified properties will be left unchanged.  <b>Note:</b> Currently, only 'title' and 'url' are supported.",
			"async": "callback",
			"parameters": [
				{
					"type": "string",
					"name": "id"
				},
				{
					"type": "object",
					"name": "changes",
					"properties": {
						"title": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/BookmarkTreeNode"
								},
								{
									"name": "result"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "remove",
			"type": "function",
			"description": "Removes a bookmark or an empty bookmark folder.",
			"async": "callback",
			"parameters": [
				{
					"type": "string",
					"name": "id"
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "removeTree",
			"type": "function",
			"description": "Recursively removes a bookmark folder.",
			"async": "callback",
			"parameters": [
				{
					"type": "string",
					"name": "id"
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "import",
			"unsupported": true,
			"type": "function",
			"description": "Imports bookmarks from an html bookmark file",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "export",
			"unsupported": true,
			"type": "function",
			"description": "Exports bookmarks to an html bookmark file",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": []
				}
			]
		}
	],
	"events": [
		{
			"name": "onCreated",
			"type": "function",
			"description": "Fired when a bookmark or folder is created.",
			"parameters": [
				{
					"type": "string",
					"name": "id"
				},
				{
					"allOf": [
						{
							"$ref": "#/types/BookmarkTreeNode"
						},
						{
							"name": "bookmark"
						}
					]
				}
			]
		},
		{
			"name": "onRemoved",
			"type": "function",
			"description": "Fired when a bookmark or folder is removed.  When a folder is removed recursively, a single notification is fired for the folder, and none for its contents.",
			"parameters": [
				{
					"type": "string",
					"name": "id"
				},
				{
					"type": "object",
					"name": "removeInfo",
					"properties": {
						"parentId": {
							"type": "string"
						},
						"index": {
							"type": "integer"
						},
						"node": {
							"$ref": "#/types/BookmarkTreeNode"
						}
					},
					"required": [
						"parentId",
						"index",
						"node"
					]
				}
			]
		},
		{
			"name": "onChanged",
			"type": "function",
			"description": "Fired when a bookmark or folder changes.  <b>Note:</b> Currently, only title and url changes trigger this.",
			"parameters": [
				{
					"type": "string",
					"name": "id"
				},
				{
					"type": "object",
					"name": "changeInfo",
					"properties": {
						"title": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					},
					"required": [
						"title"
					]
				}
			]
		},
		{
			"name": "onMoved",
			"type": "function",
			"description": "Fired when a bookmark or folder is moved to a different parent folder.",
			"parameters": [
				{
					"type": "string",
					"name": "id"
				},
				{
					"type": "object",
					"name": "moveInfo",
					"properties": {
						"parentId": {
							"type": "string"
						},
						"index": {
							"type": "integer"
						},
						"oldParentId": {
							"type": "string"
						},
						"oldIndex": {
							"type": "integer"
						}
					},
					"required": [
						"parentId",
						"index",
						"oldParentId",
						"oldIndex"
					]
				}
			]
		},
		{
			"name": "onChildrenReordered",
			"unsupported": true,
			"type": "function",
			"description": "Fired when the children of a folder have changed their order due to the order being sorted in the UI.  This is not called as a result of a move().",
			"parameters": [
				{
					"type": "string",
					"name": "id"
				},
				{
					"type": "object",
					"name": "reorderInfo",
					"properties": {
						"childIds": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					"required": [
						"childIds"
					]
				}
			]
		},
		{
			"name": "onImportBegan",
			"unsupported": true,
			"type": "function",
			"description": "Fired when a bookmark import session is begun.  Expensive observers should ignore onCreated updates until onImportEnded is fired.  Observers should still handle other notifications immediately.",
			"parameters": []
		},
		{
			"name": "onImportEnded",
			"unsupported": true,
			"type": "function",
			"description": "Fired when a bookmark import session is ended.",
			"parameters": []
		}
	],
	"definitions": {
		"Permission": {
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"bookmarks"
					]
				}
			]
		}
	},
	"refs": {
		"bookmarks#/definitions/Permission": {
			"namespace": "manifest",
			"type": "Permission"
		}
	},
	"types": {
		"BookmarkTreeNodeUnmodifiable": {
			"type": "string",
			"enum": [
				"managed"
			],
			"description": "Indicates the reason why this node is unmodifiable. The <var>managed</var> value indicates that this node was configured by the system administrator or by the custodian of a supervised user. Omitted if the node can be modified by the user and the extension (default)."
		},
		"BookmarkTreeNode": {
			"type": "object",
			"description": "A node (either a bookmark or a folder) in the bookmark tree.  Child nodes are ordered within their parent folder.",
			"properties": {
				"id": {
					"type": "string",
					"description": "The unique identifier for the node. IDs are unique within the current profile, and they remain valid even after the browser is restarted."
				},
				"parentId": {
					"type": "string",
					"description": "The <code>id</code> of the parent folder.  Omitted for the root node."
				},
				"index": {
					"type": "integer",
					"description": "The 0-based position of this node within its parent folder."
				},
				"url": {
					"type": "string",
					"description": "The URL navigated to when a user clicks the bookmark. Omitted for folders."
				},
				"title": {
					"type": "string",
					"description": "The text displayed for the node."
				},
				"dateAdded": {
					"type": "number",
					"description": "When this node was created, in milliseconds since the epoch (<code>new Date(dateAdded)</code>)."
				},
				"dateGroupModified": {
					"type": "number",
					"description": "When the contents of this folder last changed, in milliseconds since the epoch."
				},
				"unmodifiable": {
					"allOf": [
						{
							"$ref": "#/types/BookmarkTreeNodeUnmodifiable"
						},
						{
							"description": "Indicates the reason why this node is unmodifiable. The <var>managed</var> value indicates that this node was configured by the system administrator or by the custodian of a supervised user. Omitted if the node can be modified by the user and the extension (default)."
						}
					]
				},
				"children": {
					"type": "array",
					"items": {
						"$ref": "#/types/BookmarkTreeNode"
					},
					"description": "An ordered list of children of this node."
				}
			},
			"required": [
				"id",
				"title"
			]
		},
		"CreateDetails": {
			"description": "Object passed to the create() function.",
			"type": "object",
			"properties": {
				"parentId": {
					"type": "string",
					"description": "Defaults to the Other Bookmarks folder."
				},
				"index": {
					"type": "integer",
					"minimum": 0
				},
				"title": {
					"type": "string"
				},
				"url": {
					"type": "string"
				}
			}
		}
	}
};

/***/ }),
/* 79 */
/***/ (function(module, exports) {

module.exports = {
	"id": "browserAction",
	"description": "Use browser actions to put icons in the main browser toolbar, to the right of the address bar. In addition to its icon, a browser action can also have a tooltip, a badge, and a popup.",
	"permissions": [
		"manifest:browser_action"
	],
	"functions": [
		{
			"name": "setTitle",
			"type": "function",
			"description": "Sets the title of the browser action. This shows up in the tooltip.",
			"async": "callback",
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"title": {
							"type": "string",
							"description": "The string the browser action should display when moused over."
						},
						"tabId": {
							"type": "integer",
							"description": "Limits the change to when a particular tab is selected. Automatically resets when the tab is closed."
						}
					},
					"required": [
						"title"
					]
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "getTitle",
			"type": "function",
			"description": "Gets the title of the browser action.",
			"async": "callback",
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"tabId": {
							"type": "integer",
							"description": "Specify the tab to get the title from. If no tab is specified, the non-tab-specific title is returned."
						}
					}
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "result",
							"type": "string"
						}
					]
				}
			]
		},
		{
			"name": "setIcon",
			"type": "function",
			"description": "Sets the icon for the browser action. The icon can be specified either as the path to an image file or as the pixel data from a canvas element, or as dictionary of either one of those. Either the <b>path</b> or the <b>imageData</b> property must be specified.",
			"async": "callback",
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"imageData": {
							"anyOf": [
								{
									"$ref": "#/types/ImageDataType"
								},
								{
									"type": "object",
									"additionalProperties": {
										"$ref": "#/types/ImageDataType"
									}
								}
							],
							"description": "Either an ImageData object or a dictionary {size -> ImageData} representing icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals <code>scale</code>, then image with size <code>scale</code> * 19 will be selected. Initially only scales 1 and 2 will be supported. At least one image must be specified. Note that 'details.imageData = foo' is equivalent to 'details.imageData = {'19': foo}'"
						},
						"path": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "object",
									"additionalProperties": {
										"type": "string"
									}
								}
							],
							"description": "Either a relative image path or a dictionary {size -> relative image path} pointing to icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals <code>scale</code>, then image with size <code>scale</code> * 19 will be selected. Initially only scales 1 and 2 will be supported. At least one image must be specified. Note that 'details.path = foo' is equivalent to 'details.imageData = {'19': foo}'"
						},
						"tabId": {
							"type": "integer",
							"description": "Limits the change to when a particular tab is selected. Automatically resets when the tab is closed."
						}
					}
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "setPopup",
			"type": "function",
			"description": "Sets the html document to be opened as a popup when the user clicks on the browser action's icon.",
			"async": "callback",
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"tabId": {
							"type": "integer",
							"minimum": 0,
							"description": "Limits the change to when a particular tab is selected. Automatically resets when the tab is closed."
						},
						"popup": {
							"type": "string",
							"description": "The html file to show in a popup.  If set to the empty string (''), no popup is shown."
						}
					},
					"required": [
						"popup"
					]
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "getPopup",
			"type": "function",
			"description": "Gets the html document set as the popup for this browser action.",
			"async": "callback",
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"tabId": {
							"type": "integer",
							"description": "Specify the tab to get the popup from. If no tab is specified, the non-tab-specific popup is returned."
						}
					}
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "result",
							"type": "string"
						}
					]
				}
			]
		},
		{
			"name": "setBadgeText",
			"type": "function",
			"description": "Sets the badge text for the browser action. The badge is displayed on top of the icon.",
			"async": "callback",
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"text": {
							"type": "string",
							"description": "Any number of characters can be passed, but only about four can fit in the space."
						},
						"tabId": {
							"type": "integer",
							"description": "Limits the change to when a particular tab is selected. Automatically resets when the tab is closed."
						}
					},
					"required": [
						"text"
					]
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "getBadgeText",
			"type": "function",
			"description": "Gets the badge text of the browser action. If no tab is specified, the non-tab-specific badge text is returned.",
			"async": "callback",
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"tabId": {
							"type": "integer",
							"description": "Specify the tab to get the badge text from. If no tab is specified, the non-tab-specific badge text is returned."
						}
					}
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "result",
							"type": "string"
						}
					]
				}
			]
		},
		{
			"name": "setBadgeBackgroundColor",
			"type": "function",
			"description": "Sets the background color for the badge.",
			"async": "callback",
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"color": {
							"description": "An array of four integers in the range [0,255] that make up the RGBA color of the badge. For example, opaque red is <code>[255, 0, 0, 255]</code>. Can also be a string with a CSS value, with opaque red being <code>#FF0000</code> or <code>#F00</code>.",
							"anyOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/types/ColorArray"
								}
							]
						},
						"tabId": {
							"type": "integer",
							"description": "Limits the change to when a particular tab is selected. Automatically resets when the tab is closed."
						}
					},
					"required": [
						"color"
					]
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "getBadgeBackgroundColor",
			"type": "function",
			"description": "Gets the background color of the browser action.",
			"async": "callback",
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"tabId": {
							"type": "integer",
							"description": "Specify the tab to get the badge background color from. If no tab is specified, the non-tab-specific badge background color is returned."
						}
					}
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/ColorArray"
								},
								{
									"name": "result"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "enable",
			"type": "function",
			"description": "Enables the browser action for a tab. By default, browser actions are enabled.",
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"optional": true,
					"name": "tabId",
					"minimum": 0,
					"description": "The id of the tab for which you want to modify the browser action."
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "disable",
			"type": "function",
			"description": "Disables the browser action for a tab.",
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"optional": true,
					"name": "tabId",
					"minimum": 0,
					"description": "The id of the tab for which you want to modify the browser action."
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "openPopup",
			"type": "function",
			"description": "Opens the extension popup window in the active window but does not grant tab permissions.",
			"unsupported": true,
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "popupView",
							"type": "object",
							"optional": true,
							"description": "JavaScript 'window' object for the popup window if it was succesfully opened.",
							"additionalProperties": {}
						}
					]
				}
			]
		}
	],
	"events": [
		{
			"name": "onClicked",
			"type": "function",
			"description": "Fired when a browser action icon is clicked.  This event will not fire if the browser action has a popup.",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "tabs#/types/Tab"
						},
						{
							"name": "tab"
						}
					]
				}
			]
		}
	],
	"definitions": {
		"WebExtensionManifest": {
			"properties": {
				"browser_action": {
					"type": "object",
					"properties": {
						"default_title": {
							"type": "string",
							"preprocess": "localize"
						},
						"default_icon": {
							"$ref": "manifest#/types/IconPath"
						},
						"default_popup": {
							"type": "string",
							"format": "relativeUrl",
							"preprocess": "localize"
						},
						"browser_style": {
							"type": "boolean"
						},
						"default_area": {
							"description": "Defines the location the browserAction will appear by default.  The default location is navbar.",
							"type": "string",
							"enum": [
								"navbar",
								"menupanel",
								"tabstrip",
								"personaltoolbar"
							]
						}
					}
				}
			}
		}
	},
	"refs": {
		"browserAction#/definitions/WebExtensionManifest": {
			"namespace": "manifest",
			"type": "WebExtensionManifest"
		}
	},
	"types": {
		"ColorArray": {
			"type": "array",
			"items": {
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			},
			"minItems": 4,
			"maxItems": 4
		},
		"ImageDataType": {
			"type": "object",
			"isInstanceOf": "ImageData",
			"additionalProperties": {},
			"postprocess": "convertImageDataToURL",
			"description": "Pixel data for an image. Must be an ImageData object (for example, from a <code>canvas</code> element)."
		}
	}
};

/***/ }),
/* 80 */
/***/ (function(module, exports) {

module.exports = {
	"id": "browsingData",
	"description": "Use the <code>chrome.browsingData</code> API to remove browsing data from a user's local profile.",
	"permissions": [
		"browsingData"
	],
	"functions": [
		{
			"name": "settings",
			"description": "Reports which types of data are currently selected in the 'Clear browsing data' settings UI.  Note: some of the data types included in this API are not available in the settings UI, and some UI settings control more than one data type listed here.",
			"type": "function",
			"async": "callback",
			"parameters": [
				{
					"name": "callback",
					"type": "function",
					"parameters": [
						{
							"name": "result",
							"type": "object",
							"properties": {
								"options": {
									"$ref": "#/types/RemovalOptions"
								},
								"dataToRemove": {
									"allOf": [
										{
											"$ref": "#/types/DataTypeSet"
										},
										{
											"description": "All of the types will be present in the result, with values of <code>true</code> if they are both selected to be removed and permitted to be removed, otherwise <code>false</code>."
										}
									]
								},
								"dataRemovalPermitted": {
									"allOf": [
										{
											"$ref": "#/types/DataTypeSet"
										},
										{
											"description": "All of the types will be present in the result, with values of <code>true</code> if they are permitted to be removed (e.g., by enterprise policy) and <code>false</code> if not."
										}
									]
								}
							},
							"required": [
								"options",
								"dataToRemove",
								"dataRemovalPermitted"
							]
						}
					]
				}
			]
		},
		{
			"name": "remove",
			"description": "Clears various types of browsing data stored in a user's profile.",
			"type": "function",
			"async": "callback",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RemovalOptions"
						},
						{
							"name": "options"
						}
					]
				},
				{
					"allOf": [
						{
							"$ref": "#/types/DataTypeSet"
						},
						{
							"name": "dataToRemove",
							"description": "The set of data types to remove."
						}
					]
				},
				{
					"name": "callback",
					"type": "function",
					"description": "Called when deletion has completed.",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "removeAppcache",
			"description": "Clears websites' appcache data.",
			"type": "function",
			"async": "callback",
			"unsupported": true,
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RemovalOptions"
						},
						{
							"name": "options"
						}
					]
				},
				{
					"name": "callback",
					"type": "function",
					"description": "Called when websites' appcache data has been cleared.",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "removeCache",
			"description": "Clears the browser's cache.",
			"type": "function",
			"async": "callback",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RemovalOptions"
						},
						{
							"name": "options"
						}
					]
				},
				{
					"name": "callback",
					"type": "function",
					"description": "Called when the browser's cache has been cleared.",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "removeCookies",
			"description": "Clears the browser's cookies and server-bound certificates modified within a particular timeframe.",
			"type": "function",
			"async": "callback",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RemovalOptions"
						},
						{
							"name": "options"
						}
					]
				},
				{
					"name": "callback",
					"type": "function",
					"description": "Called when the browser's cookies and server-bound certificates have been cleared.",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "removeDownloads",
			"description": "Clears the browser's list of downloaded files (<em>not</em> the downloaded files themselves).",
			"type": "function",
			"async": "callback",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RemovalOptions"
						},
						{
							"name": "options"
						}
					]
				},
				{
					"name": "callback",
					"type": "function",
					"description": "Called when the browser's list of downloaded files has been cleared.",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "removeFileSystems",
			"description": "Clears websites' file system data.",
			"type": "function",
			"async": "callback",
			"unsupported": true,
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RemovalOptions"
						},
						{
							"name": "options"
						}
					]
				},
				{
					"name": "callback",
					"type": "function",
					"description": "Called when websites' file systems have been cleared.",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "removeFormData",
			"description": "Clears the browser's stored form data (autofill).",
			"type": "function",
			"async": "callback",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RemovalOptions"
						},
						{
							"name": "options"
						}
					]
				},
				{
					"name": "callback",
					"type": "function",
					"description": "Called when the browser's form data has been cleared.",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "removeHistory",
			"description": "Clears the browser's history.",
			"type": "function",
			"async": "callback",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RemovalOptions"
						},
						{
							"name": "options"
						}
					]
				},
				{
					"name": "callback",
					"type": "function",
					"description": "Called when the browser's history has cleared.",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "removeIndexedDB",
			"description": "Clears websites' IndexedDB data.",
			"type": "function",
			"async": "callback",
			"unsupported": true,
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RemovalOptions"
						},
						{
							"name": "options"
						}
					]
				},
				{
					"name": "callback",
					"type": "function",
					"description": "Called when websites' IndexedDB data has been cleared.",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "removeLocalStorage",
			"description": "Clears websites' local storage data.",
			"type": "function",
			"async": "callback",
			"unsupported": true,
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RemovalOptions"
						},
						{
							"name": "options"
						}
					]
				},
				{
					"name": "callback",
					"type": "function",
					"description": "Called when websites' local storage has been cleared.",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "removePluginData",
			"description": "Clears plugins' data.",
			"type": "function",
			"async": "callback",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RemovalOptions"
						},
						{
							"name": "options"
						}
					]
				},
				{
					"name": "callback",
					"type": "function",
					"description": "Called when plugins' data has been cleared.",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "removePasswords",
			"description": "Clears the browser's stored passwords.",
			"type": "function",
			"async": "callback",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RemovalOptions"
						},
						{
							"name": "options"
						}
					]
				},
				{
					"name": "callback",
					"type": "function",
					"description": "Called when the browser's passwords have been cleared.",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "removeWebSQL",
			"description": "Clears websites' WebSQL data.",
			"type": "function",
			"async": "callback",
			"unsupported": true,
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RemovalOptions"
						},
						{
							"name": "options"
						}
					]
				},
				{
					"name": "callback",
					"type": "function",
					"description": "Called when websites' WebSQL databases have been cleared.",
					"optional": true,
					"parameters": []
				}
			]
		}
	],
	"definitions": {
		"Permission": {
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"browsingData"
					]
				}
			]
		}
	},
	"refs": {
		"browsingData#/definitions/Permission": {
			"namespace": "manifest",
			"type": "Permission"
		}
	},
	"types": {
		"RemovalOptions": {
			"type": "object",
			"description": "Options that determine exactly what data will be removed.",
			"properties": {
				"since": {
					"allOf": [
						{
							"$ref": "extensionTypes#/types/Date"
						},
						{
							"description": "Remove data accumulated on or after this date, represented in milliseconds since the epoch (accessible via the <code>getTime</code> method of the JavaScript <code>Date</code> object). If absent, defaults to 0 (which would remove all browsing data)."
						}
					]
				},
				"originTypes": {
					"type": "object",
					"description": "An object whose properties specify which origin types ought to be cleared. If this object isn't specified, it defaults to clearing only \"unprotected\" origins. Please ensure that you <em>really</em> want to remove application data before adding 'protectedWeb' or 'extensions'.",
					"properties": {
						"unprotectedWeb": {
							"type": "boolean",
							"description": "Normal websites."
						},
						"protectedWeb": {
							"type": "boolean",
							"description": "Websites that have been installed as hosted applications (be careful!)."
						},
						"extension": {
							"type": "boolean",
							"description": "Extensions and packaged applications a user has installed (be _really_ careful!)."
						}
					}
				}
			}
		},
		"DataTypeSet": {
			"type": "object",
			"description": "A set of data types. Missing data types are interpreted as <code>false</code>.",
			"properties": {
				"cache": {
					"type": "boolean",
					"description": "The browser's cache. Note: when removing data, this clears the <em>entire</em> cache: it is not limited to the range you specify."
				},
				"cookies": {
					"type": "boolean",
					"description": "The browser's cookies."
				},
				"downloads": {
					"type": "boolean",
					"description": "The browser's download list."
				},
				"formData": {
					"type": "boolean",
					"description": "The browser's stored form data."
				},
				"history": {
					"type": "boolean",
					"description": "The browser's history."
				},
				"indexedDB": {
					"type": "boolean",
					"description": "Websites' IndexedDB data."
				},
				"localStorage": {
					"type": "boolean",
					"description": "Websites' local storage data."
				},
				"serverBoundCertificates": {
					"type": "boolean",
					"description": "Server-bound certificates."
				},
				"passwords": {
					"type": "boolean",
					"description": "Stored passwords."
				},
				"pluginData": {
					"type": "boolean",
					"description": "Plugins' data."
				},
				"serviceWorkers": {
					"type": "boolean",
					"description": "Service Workers."
				}
			}
		}
	}
};

/***/ }),
/* 81 */
/***/ (function(module, exports) {

module.exports = {
	"id": "commands",
	"description": "Use the commands API to add keyboard shortcuts that trigger actions in your extension, for example, an action to open the browser action or send a command to the xtension.",
	"permissions": [
		"manifest:commands"
	],
	"events": [
		{
			"name": "onCommand",
			"description": "Fired when a registered command is activated using a keyboard shortcut.",
			"type": "function",
			"parameters": [
				{
					"name": "command",
					"type": "string"
				}
			]
		}
	],
	"functions": [
		{
			"name": "getAll",
			"type": "function",
			"async": "callback",
			"description": "Returns all the registered extension commands for this extension and their shortcut (if active).",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": [
						{
							"name": "commands",
							"type": "array",
							"items": {
								"$ref": "#/types/Command"
							}
						}
					],
					"description": "Called to return the registered commands."
				}
			]
		}
	],
	"definitions": {
		"WebExtensionManifest": {
			"properties": {
				"commands": {
					"type": "object",
					"additionalProperties": {
						"type": "object",
						"properties": {
							"suggested_key": {
								"type": "object",
								"properties": {
									"default": {
										"$ref": "#/types/KeyName"
									},
									"mac": {
										"$ref": "#/types/KeyName"
									},
									"linux": {
										"$ref": "#/types/KeyName"
									},
									"windows": {
										"$ref": "#/types/KeyName"
									},
									"chromeos": {
										"type": "string"
									},
									"android": {
										"type": "string"
									},
									"ios": {
										"type": "string"
									},
									"additionalProperties": {
										"type": "string",
										"deprecated": "Unknown platform name"
									}
								}
							},
							"description": {
								"type": "string"
							}
						}
					}
				}
			}
		}
	},
	"refs": {
		"commands#/definitions/WebExtensionManifest": {
			"namespace": "manifest",
			"type": "WebExtensionManifest"
		}
	},
	"types": {
		"Command": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"description": "The name of the Extension Command"
				},
				"description": {
					"type": "string",
					"description": "The Extension Command description"
				},
				"shortcut": {
					"type": "string",
					"description": "The shortcut active for this command, or blank if not active."
				}
			}
		},
		"KeyName": {
			"anyOf": [
				{
					"type": "string",
					"pattern": "^\\s*(Alt|Ctrl|Command|MacCtrl)\\s*\\+\\s*(Shift\\s*\\+\\s*)?([A-Z0-9]|Comma|Period|Home|End|PageUp|PageDown|Space|Insert|Delete|Up|Down|Left|Right)\\s*$"
				},
				{
					"type": "string",
					"pattern": "^\\s*((Alt|Ctrl|Command|MacCtrl)\\s*\\+\\s*)?(Shift\\s*\\+\\s*)?(F[1-9]|F1[0-2])\\s*$"
				},
				{
					"type": "string",
					"pattern": "^(MediaNextTrack|MediaPlayPause|MediaPrevTrack|MediaStop)$"
				}
			]
		}
	}
};

/***/ }),
/* 82 */
/***/ (function(module, exports) {

module.exports = {
	"id": "contextMenus",
	"description": "Use the <code>browser.contextMenus</code> API to add items to the browser's context menu. You can choose what types of objects your context menu additions apply to, such as images, hyperlinks, and pages.",
	"permissions": [
		"contextMenus"
	],
	"properties": {
		"ACTION_MENU_TOP_LEVEL_LIMIT": {
			"value": 6,
			"description": "The maximum number of top level extension items that can be added to an extension action context menu. Any items beyond this limit will be ignored."
		}
	},
	"functions": [
		{
			"name": "create",
			"type": "function",
			"description": "Creates a new context menu item. Note that if an error occurs during creation, you may not find out until the creation callback fires (the details will be in $(ref:runtime.lastError)).",
			"returns": {
				"anyOf": [
					{
						"type": "integer"
					},
					{
						"type": "string"
					}
				],
				"description": "The ID of the newly created item."
			},
			"parameters": [
				{
					"type": "object",
					"name": "createProperties",
					"properties": {
						"type": {
							"allOf": [
								{
									"$ref": "#/types/ItemType"
								},
								{
									"description": "The type of menu item. Defaults to 'normal' if not specified."
								}
							]
						},
						"id": {
							"type": "string",
							"description": "The unique ID to assign to this item. Mandatory for event pages. Cannot be the same as another ID for this extension."
						},
						"title": {
							"type": "string",
							"description": "The text to be displayed in the item; this is <em>required</em> unless <code>type</code> is 'separator'. When the context is 'selection', you can use <code>%s</code> within the string to show the selected text. For example, if this parameter's value is \"Translate '%s' to Pig Latin\" and the user selects the word \"cool\", the context menu item for the selection is \"Translate 'cool' to Pig Latin\"."
						},
						"checked": {
							"type": "boolean",
							"description": "The initial state of a checkbox or radio item: true for selected and false for unselected. Only one radio item can be selected at a time in a given group of radio items."
						},
						"contexts": {
							"type": "array",
							"items": {
								"$ref": "#/types/ContextType"
							},
							"minItems": 1,
							"description": "List of contexts this menu item will appear in. Defaults to ['page'] if not specified."
						},
						"onclick": {
							"type": "function",
							"description": "A function that will be called back when the menu item is clicked. Event pages cannot use this; instead, they should register a listener for $(ref:contextMenus.onClicked).",
							"parameters": [
								{
									"allOf": [
										{
											"$ref": "contextMenusInternal#/types/OnClickData"
										},
										{
											"name": "info",
											"description": "Information about the item clicked and the context where the click happened."
										}
									]
								},
								{
									"allOf": [
										{
											"$ref": "tabs#/types/Tab"
										},
										{
											"name": "tab",
											"description": "The details of the tab where the click took place. Note: this parameter only present for extensions."
										}
									]
								}
							]
						},
						"parentId": {
							"anyOf": [
								{
									"type": "integer"
								},
								{
									"type": "string"
								}
							],
							"description": "The ID of a parent menu item; this makes the item a child of a previously added item."
						},
						"documentUrlPatterns": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"description": "Lets you restrict the item to apply only to documents whose URL matches one of the given patterns. (This applies to frames as well.) For details on the format of a pattern, see $(topic:match_patterns)[Match Patterns]."
						},
						"targetUrlPatterns": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"description": "Similar to documentUrlPatterns, but lets you filter based on the src attribute of img/audio/video tags and the href of anchor tags."
						},
						"enabled": {
							"type": "boolean",
							"description": "Whether this context menu item is enabled or disabled. Defaults to true."
						}
					}
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"description": "Called when the item has been created in the browser. If there were any problems creating the item, details will be available in $(ref:runtime.lastError).",
					"parameters": []
				}
			]
		},
		{
			"name": "createInternal",
			"type": "function",
			"allowedContexts": [
				"addon_parent_only"
			],
			"async": "callback",
			"description": "Identical to contextMenus.create, except: the 'id' field is required and allows an integer, 'onclick' is not allowed, and the method is async (and the return value is not a menu item ID).",
			"parameters": [
				{
					"type": "object",
					"name": "createProperties",
					"properties": {
						"type": {
							"$ref": "#/types/ItemType"
						},
						"id": {
							"anyOf": [
								{
									"type": "integer"
								},
								{
									"type": "string"
								}
							]
						},
						"title": {
							"type": "string"
						},
						"checked": {
							"type": "boolean"
						},
						"contexts": {
							"type": "array",
							"items": {
								"$ref": "#/types/ContextType"
							},
							"minItems": 1
						},
						"parentId": {
							"anyOf": [
								{
									"type": "integer"
								},
								{
									"type": "string"
								}
							]
						},
						"documentUrlPatterns": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"targetUrlPatterns": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"enabled": {
							"type": "boolean"
						}
					},
					"required": [
						"id"
					]
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "update",
			"type": "function",
			"description": "Updates a previously created context menu item.",
			"async": "callback",
			"parameters": [
				{
					"anyOf": [
						{
							"type": "integer"
						},
						{
							"type": "string"
						}
					],
					"name": "id",
					"description": "The ID of the item to update."
				},
				{
					"type": "object",
					"name": "updateProperties",
					"description": "The properties to update. Accepts the same values as the create function.",
					"properties": {
						"type": {
							"$ref": "#/types/ItemType"
						},
						"title": {
							"type": "string"
						},
						"checked": {
							"type": "boolean"
						},
						"contexts": {
							"type": "array",
							"items": {
								"$ref": "#/types/ContextType"
							},
							"minItems": 1
						},
						"onclick": {
							"type": "function",
							"parameters": [
								{
									"allOf": [
										{
											"$ref": "contextMenusInternal#/types/OnClickData"
										},
										{
											"name": "info"
										}
									]
								},
								{
									"allOf": [
										{
											"$ref": "tabs#/types/Tab"
										},
										{
											"name": "tab",
											"description": "The details of the tab where the click took place. Note: this parameter only present for extensions."
										}
									]
								}
							]
						},
						"parentId": {
							"anyOf": [
								{
									"type": "integer"
								},
								{
									"type": "string"
								}
							],
							"description": "Note: You cannot change an item to be a child of one of its own descendants."
						},
						"documentUrlPatterns": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"targetUrlPatterns": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"enabled": {
							"type": "boolean"
						}
					}
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": [],
					"description": "Called when the context menu has been updated."
				}
			]
		},
		{
			"name": "remove",
			"type": "function",
			"description": "Removes a context menu item.",
			"async": "callback",
			"parameters": [
				{
					"anyOf": [
						{
							"type": "integer"
						},
						{
							"type": "string"
						}
					],
					"name": "menuItemId",
					"description": "The ID of the context menu item to remove."
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": [],
					"description": "Called when the context menu has been removed."
				}
			]
		},
		{
			"name": "removeAll",
			"type": "function",
			"description": "Removes all context menu items added by this extension.",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": [],
					"description": "Called when removal is complete."
				}
			]
		}
	],
	"events": [
		{
			"name": "onClicked",
			"type": "function",
			"description": "Fired when a context menu item is clicked.",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/OnClickData"
						},
						{
							"name": "info",
							"description": "Information about the item clicked and the context where the click happened."
						}
					]
				},
				{
					"allOf": [
						{
							"$ref": "tabs#/types/Tab"
						},
						{
							"name": "tab",
							"description": "The details of the tab where the click took place. If the click did not take place in a tab, this parameter will be missing.",
							"optional": true
						}
					]
				}
			]
		}
	],
	"definitions": {
		"Permission": {
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"contextMenus"
					]
				}
			]
		}
	},
	"refs": {
		"contextMenus#/definitions/Permission": {
			"namespace": "manifest",
			"type": "Permission"
		}
	},
	"types": {
		"ContextType": {
			"type": "string",
			"enum": [
				"all",
				"page",
				"frame",
				"selection",
				"link",
				"editable",
				"password",
				"image",
				"video",
				"audio",
				"launcher",
				"browser_action",
				"page_action",
				"tab"
			],
			"description": "The different contexts a menu can appear in. Specifying 'all' is equivalent to the combination of all other contexts except for 'tab'."
		},
		"ItemType": {
			"type": "string",
			"enum": [
				"normal",
				"checkbox",
				"radio",
				"separator"
			],
			"description": "The type of menu item."
		},
		"OnClickData": {
			"type": "object",
			"description": "Information sent when a context menu item is clicked.",
			"properties": {
				"menuItemId": {
					"anyOf": [
						{
							"type": "integer"
						},
						{
							"type": "string"
						}
					],
					"description": "The ID of the menu item that was clicked."
				},
				"parentMenuItemId": {
					"anyOf": [
						{
							"type": "integer"
						},
						{
							"type": "string"
						}
					],
					"description": "The parent ID, if any, for the item clicked."
				},
				"mediaType": {
					"type": "string",
					"description": "One of 'image', 'video', or 'audio' if the context menu was activated on one of these types of elements."
				},
				"linkUrl": {
					"type": "string",
					"description": "If the element is a link, the URL it points to."
				},
				"srcUrl": {
					"type": "string",
					"description": "Will be present for elements with a 'src' URL."
				},
				"pageUrl": {
					"type": "string",
					"description": "The URL of the page where the menu item was clicked. This property is not set if the click occured in a context where there is no current page, such as in a launcher context menu."
				},
				"frameUrl": {
					"type": "string",
					"description": " The URL of the frame of the element where the context menu was clicked, if it was in a frame."
				},
				"selectionText": {
					"type": "string",
					"description": "The text for the context selection, if any."
				},
				"editable": {
					"type": "boolean",
					"description": "A flag indicating whether the element is editable (text input, textarea, etc.)."
				},
				"wasChecked": {
					"type": "boolean",
					"description": "A flag indicating the state of a checkbox or radio item before it was clicked."
				},
				"checked": {
					"type": "boolean",
					"description": "A flag indicating the state of a checkbox or radio item after it is clicked."
				},
				"modifiers": {
					"type": "array",
					"items": {
						"type": "string",
						"enum": [
							"Shift",
							"Alt",
							"Command",
							"Ctrl",
							"MacCtrl"
						]
					},
					"description": "An array of keyboard modifiers that were held while the menu item was clicked."
				}
			},
			"required": [
				"menuItemId",
				"editable",
				"modifiers"
			]
		}
	}
};

/***/ }),
/* 83 */
/***/ (function(module, exports) {

module.exports = {
	"id": "contextMenusInternal",
	"description": "Use the <code>browser.contextMenus</code> API to add items to the browser's context menu. You can choose what types of objects your context menu additions apply to, such as images, hyperlinks, and pages.",
	"definitions": {},
	"refs": {},
	"types": {
		"OnClickData": {
			"type": "object",
			"description": "Information sent when a context menu item is clicked.",
			"properties": {
				"menuItemId": {
					"anyOf": [
						{
							"type": "integer"
						},
						{
							"type": "string"
						}
					],
					"description": "The ID of the menu item that was clicked."
				},
				"parentMenuItemId": {
					"anyOf": [
						{
							"type": "integer"
						},
						{
							"type": "string"
						}
					],
					"description": "The parent ID, if any, for the item clicked."
				},
				"mediaType": {
					"type": "string",
					"description": "One of 'image', 'video', or 'audio' if the context menu was activated on one of these types of elements."
				},
				"linkUrl": {
					"type": "string",
					"description": "If the element is a link, the URL it points to."
				},
				"srcUrl": {
					"type": "string",
					"description": "Will be present for elements with a 'src' URL."
				},
				"pageUrl": {
					"type": "string",
					"description": "The URL of the page where the menu item was clicked. This property is not set if the click occured in a context where there is no current page, such as in a launcher context menu."
				},
				"frameUrl": {
					"type": "string",
					"description": " The URL of the frame of the element where the context menu was clicked, if it was in a frame."
				},
				"selectionText": {
					"type": "string",
					"description": "The text for the context selection, if any."
				},
				"editable": {
					"type": "boolean",
					"description": "A flag indicating whether the element is editable (text input, textarea, etc.)."
				},
				"wasChecked": {
					"type": "boolean",
					"description": "A flag indicating the state of a checkbox or radio item before it was clicked."
				},
				"checked": {
					"type": "boolean",
					"description": "A flag indicating the state of a checkbox or radio item after it is clicked."
				}
			},
			"required": [
				"menuItemId",
				"editable"
			]
		}
	}
};

/***/ }),
/* 84 */
/***/ (function(module, exports) {

module.exports = {
	"id": "contextualIdentities",
	"description": "Use the <code>browser.contextualIdentities</code> API to query and modify contextual identity, also called as containers.",
	"permissions": [
		"contextualIdentities"
	],
	"functions": [
		{
			"name": "get",
			"type": "function",
			"description": "Retrieves information about a single contextual identity.",
			"async": true,
			"parameters": [
				{
					"type": "string",
					"name": "cookieStoreId",
					"description": "The ID of the contextual identity cookie store. "
				}
			]
		},
		{
			"name": "query",
			"type": "function",
			"description": "Retrieves all contextual identities",
			"async": true,
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"description": "Information to filter the contextual identities being retrieved.",
					"properties": {
						"name": {
							"type": "string",
							"description": "Filters the contextual identity by name."
						}
					}
				}
			]
		},
		{
			"name": "create",
			"type": "function",
			"description": "Creates a contextual identity with the given data.",
			"async": true,
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"description": "Details about the contextual identity being created.",
					"properties": {
						"name": {
							"type": "string",
							"description": "The name of the contextual identity."
						},
						"color": {
							"type": "string",
							"description": "The color of the contextual identity."
						},
						"icon": {
							"type": "string",
							"description": "The icon of the contextual identity."
						}
					},
					"required": [
						"name",
						"color",
						"icon"
					]
				}
			]
		},
		{
			"name": "update",
			"type": "function",
			"description": "Updates a contextual identity with the given data.",
			"async": true,
			"parameters": [
				{
					"type": "string",
					"name": "cookieStoreId",
					"description": "The ID of the contextual identity cookie store. "
				},
				{
					"type": "object",
					"name": "details",
					"description": "Details about the contextual identity being created.",
					"properties": {
						"name": {
							"type": "string",
							"description": "The name of the contextual identity."
						},
						"color": {
							"type": "string",
							"description": "The color of the contextual identity."
						},
						"icon": {
							"type": "string",
							"description": "The icon of the contextual identity."
						}
					}
				}
			]
		},
		{
			"name": "remove",
			"type": "function",
			"description": "Deletes a contetual identity by its cookie Store ID.",
			"async": true,
			"parameters": [
				{
					"type": "string",
					"name": "cookieStoreId",
					"description": "The ID of the contextual identity cookie store. "
				}
			]
		}
	],
	"definitions": {
		"Permission": {
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"contextualIdentities"
					]
				}
			]
		}
	},
	"refs": {
		"contextualIdentities#/definitions/Permission": {
			"namespace": "manifest",
			"type": "Permission"
		}
	},
	"types": {
		"ContextualIdentity": {
			"type": "object",
			"description": "Represents information about a contextual identity.",
			"properties": {
				"name": {
					"type": "string",
					"description": "The name of the contextual identity."
				},
				"icon": {
					"type": "string",
					"description": "The icon of the contextual identity."
				},
				"color": {
					"type": "string",
					"description": "The color of the contextual identity."
				},
				"cookieStoreId": {
					"type": "string",
					"description": "The cookie store ID of the contextual identity."
				}
			},
			"required": [
				"name",
				"icon",
				"color",
				"cookieStoreId"
			]
		}
	}
};

/***/ }),
/* 85 */
/***/ (function(module, exports) {

module.exports = {
	"id": "cookies",
	"description": "Use the <code>browser.cookies</code> API to query and modify cookies, and to be notified when they change.",
	"permissions": [
		"cookies"
	],
	"functions": [
		{
			"name": "get",
			"type": "function",
			"description": "Retrieves information about a single cookie. If more than one cookie of the same name exists for the given URL, the one with the longest path will be returned. For cookies with the same path length, the cookie with the earliest creation time will be returned.",
			"async": "callback",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"description": "Details to identify the cookie being retrieved.",
					"properties": {
						"url": {
							"type": "string",
							"description": "The URL with which the cookie to retrieve is associated. This argument may be a full URL, in which case any data following the URL path (e.g. the query string) is simply ignored. If host permissions for this URL are not specified in the manifest file, the API call will fail."
						},
						"name": {
							"type": "string",
							"description": "The name of the cookie to retrieve."
						},
						"storeId": {
							"type": "string",
							"description": "The ID of the cookie store in which to look for the cookie. By default, the current execution context's cookie store will be used."
						}
					},
					"required": [
						"url",
						"name"
					]
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/Cookie"
								},
								{
									"name": "cookie",
									"optional": true,
									"description": "Contains details about the cookie. This parameter is null if no such cookie was found."
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "getAll",
			"type": "function",
			"description": "Retrieves all cookies from a single cookie store that match the given information.  The cookies returned will be sorted, with those with the longest path first.  If multiple cookies have the same path length, those with the earliest creation time will be first.",
			"async": "callback",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"description": "Information to filter the cookies being retrieved.",
					"properties": {
						"url": {
							"type": "string",
							"description": "Restricts the retrieved cookies to those that would match the given URL."
						},
						"name": {
							"type": "string",
							"description": "Filters the cookies by name."
						},
						"domain": {
							"type": "string",
							"description": "Restricts the retrieved cookies to those whose domains match or are subdomains of this one."
						},
						"path": {
							"type": "string",
							"description": "Restricts the retrieved cookies to those whose path exactly matches this string."
						},
						"secure": {
							"type": "boolean",
							"description": "Filters the cookies by their Secure property."
						},
						"session": {
							"type": "boolean",
							"description": "Filters out session vs. persistent cookies."
						},
						"storeId": {
							"type": "string",
							"description": "The cookie store to retrieve cookies from. If omitted, the current execution context's cookie store will be used."
						}
					}
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "cookies",
							"type": "array",
							"items": {
								"$ref": "#/types/Cookie"
							},
							"description": "All the existing, unexpired cookies that match the given cookie info."
						}
					]
				}
			]
		},
		{
			"name": "set",
			"type": "function",
			"description": "Sets a cookie with the given cookie data; may overwrite equivalent cookies if they exist.",
			"async": "callback",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"description": "Details about the cookie being set.",
					"properties": {
						"url": {
							"type": "string",
							"description": "The request-URI to associate with the setting of the cookie. This value can affect the default domain and path values of the created cookie. If host permissions for this URL are not specified in the manifest file, the API call will fail."
						},
						"name": {
							"type": "string",
							"description": "The name of the cookie. Empty by default if omitted."
						},
						"value": {
							"type": "string",
							"description": "The value of the cookie. Empty by default if omitted."
						},
						"domain": {
							"type": "string",
							"description": "The domain of the cookie. If omitted, the cookie becomes a host-only cookie."
						},
						"path": {
							"type": "string",
							"description": "The path of the cookie. Defaults to the path portion of the url parameter."
						},
						"secure": {
							"type": "boolean",
							"description": "Whether the cookie should be marked as Secure. Defaults to false."
						},
						"httpOnly": {
							"type": "boolean",
							"description": "Whether the cookie should be marked as HttpOnly. Defaults to false."
						},
						"expirationDate": {
							"type": "number",
							"description": "The expiration date of the cookie as the number of seconds since the UNIX epoch. If omitted, the cookie becomes a session cookie."
						},
						"storeId": {
							"type": "string",
							"description": "The ID of the cookie store in which to set the cookie. By default, the cookie is set in the current execution context's cookie store."
						}
					},
					"required": [
						"url"
					]
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/Cookie"
								},
								{
									"name": "cookie",
									"optional": true,
									"description": "Contains details about the cookie that's been set.  If setting failed for any reason, this will be \"null\", and $(ref:runtime.lastError) will be set."
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "remove",
			"type": "function",
			"description": "Deletes a cookie by name.",
			"async": "callback",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"description": "Information to identify the cookie to remove.",
					"properties": {
						"url": {
							"type": "string",
							"description": "The URL associated with the cookie. If host permissions for this URL are not specified in the manifest file, the API call will fail."
						},
						"name": {
							"type": "string",
							"description": "The name of the cookie to remove."
						},
						"storeId": {
							"type": "string",
							"description": "The ID of the cookie store to look in for the cookie. If unspecified, the cookie is looked for by default in the current execution context's cookie store."
						}
					},
					"required": [
						"url",
						"name"
					]
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": [
						{
							"name": "details",
							"type": "object",
							"description": "Contains details about the cookie that's been removed.  If removal failed for any reason, this will be \"null\", and $(ref:runtime.lastError) will be set.",
							"optional": true,
							"properties": {
								"url": {
									"type": "string",
									"description": "The URL associated with the cookie that's been removed."
								},
								"name": {
									"type": "string",
									"description": "The name of the cookie that's been removed."
								},
								"storeId": {
									"type": "string",
									"description": "The ID of the cookie store from which the cookie was removed."
								}
							},
							"required": [
								"url",
								"name",
								"storeId"
							]
						}
					]
				}
			]
		},
		{
			"name": "getAllCookieStores",
			"type": "function",
			"description": "Lists all existing cookie stores.",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "cookieStores",
							"type": "array",
							"items": {
								"$ref": "#/types/CookieStore"
							},
							"description": "All the existing cookie stores."
						}
					]
				}
			]
		}
	],
	"events": [
		{
			"name": "onChanged",
			"type": "function",
			"description": "Fired when a cookie is set or removed. As a special case, note that updating a cookie's properties is implemented as a two step process: the cookie to be updated is first removed entirely, generating a notification with \"cause\" of \"overwrite\" .  Afterwards, a new cookie is written with the updated values, generating a second notification with \"cause\" \"explicit\".",
			"parameters": [
				{
					"type": "object",
					"name": "changeInfo",
					"properties": {
						"removed": {
							"type": "boolean",
							"description": "True if a cookie was removed."
						},
						"cookie": {
							"allOf": [
								{
									"$ref": "#/types/Cookie"
								},
								{
									"description": "Information about the cookie that was set or removed."
								}
							]
						},
						"cause": {
							"allOf": [
								{
									"$ref": "#/types/OnChangedCause"
								},
								{
									"description": "The underlying reason behind the cookie's change."
								}
							]
						}
					},
					"required": [
						"removed",
						"cookie",
						"cause"
					]
				}
			]
		}
	],
	"definitions": {
		"Permission": {
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"cookies"
					]
				}
			]
		}
	},
	"refs": {
		"cookies#/definitions/Permission": {
			"namespace": "manifest",
			"type": "Permission"
		}
	},
	"types": {
		"Cookie": {
			"type": "object",
			"description": "Represents information about an HTTP cookie.",
			"properties": {
				"name": {
					"type": "string",
					"description": "The name of the cookie."
				},
				"value": {
					"type": "string",
					"description": "The value of the cookie."
				},
				"domain": {
					"type": "string",
					"description": "The domain of the cookie (e.g. \"www.google.com\", \"example.com\")."
				},
				"hostOnly": {
					"type": "boolean",
					"description": "True if the cookie is a host-only cookie (i.e. a request's host must exactly match the domain of the cookie)."
				},
				"path": {
					"type": "string",
					"description": "The path of the cookie."
				},
				"secure": {
					"type": "boolean",
					"description": "True if the cookie is marked as Secure (i.e. its scope is limited to secure channels, typically HTTPS)."
				},
				"httpOnly": {
					"type": "boolean",
					"description": "True if the cookie is marked as HttpOnly (i.e. the cookie is inaccessible to client-side scripts)."
				},
				"session": {
					"type": "boolean",
					"description": "True if the cookie is a session cookie, as opposed to a persistent cookie with an expiration date."
				},
				"expirationDate": {
					"type": "number",
					"description": "The expiration date of the cookie as the number of seconds since the UNIX epoch. Not provided for session cookies."
				},
				"storeId": {
					"type": "string",
					"description": "The ID of the cookie store containing this cookie, as provided in getAllCookieStores()."
				}
			},
			"required": [
				"name",
				"value",
				"domain",
				"hostOnly",
				"path",
				"secure",
				"httpOnly",
				"session",
				"storeId"
			]
		},
		"CookieStore": {
			"type": "object",
			"description": "Represents a cookie store in the browser. An incognito mode window, for instance, uses a separate cookie store from a non-incognito window.",
			"properties": {
				"id": {
					"type": "string",
					"description": "The unique identifier for the cookie store."
				},
				"tabIds": {
					"type": "array",
					"items": {
						"type": "integer"
					},
					"description": "Identifiers of all the browser tabs that share this cookie store."
				}
			},
			"required": [
				"id",
				"tabIds"
			]
		},
		"OnChangedCause": {
			"type": "string",
			"enum": [
				"evicted",
				"expired",
				"explicit",
				"expired_overwrite",
				"overwrite"
			],
			"description": "The underlying reason behind the cookie's change. If a cookie was inserted, or removed via an explicit call to $(ref:cookies.remove), \"cause\" will be \"explicit\". If a cookie was automatically removed due to expiry, \"cause\" will be \"expired\". If a cookie was removed due to being overwritten with an already-expired expiration date, \"cause\" will be set to \"expired_overwrite\".  If a cookie was automatically removed due to garbage collection, \"cause\" will be \"evicted\".  If a cookie was automatically removed due to a \"set\" call that overwrote it, \"cause\" will be \"overwrite\". Plan your response accordingly."
		}
	}
};

/***/ }),
/* 86 */
/***/ (function(module, exports) {

module.exports = {
	"id": "devtools",
	"allowedContexts": [
		"devtools",
		"devtools_only"
	],
	"defaultContexts": [
		"devtools",
		"devtools_only"
	],
	"definitions": {
		"WebExtensionManifest": {
			"properties": {
				"devtools_page": {
					"$ref": "manifest#/types/ExtensionURL"
				}
			}
		}
	},
	"refs": {
		"devtools#/definitions/WebExtensionManifest": {
			"namespace": "manifest",
			"type": "WebExtensionManifest"
		}
	},
	"types": {
		"Resource": {
			"type": "object",
			"description": "A resource within the inspected page, such as a document, a script, or an image.",
			"properties": {
				"url": {
					"type": "string",
					"description": "The URL of the resource."
				}
			},
			"functions": [
				{
					"name": "getContent",
					"unsupported": true,
					"type": "function",
					"async": "callback",
					"description": "Gets the content of the resource.",
					"parameters": [
						{
							"name": "callback",
							"type": "function",
							"description": "A function that receives resource content when the request completes.",
							"parameters": [
								{
									"name": "content",
									"type": "string",
									"description": "Content of the resource (potentially encoded)."
								},
								{
									"name": "encoding",
									"type": "string",
									"description": "Empty if content is not encoded, encoding name otherwise. Currently, only base64 is supported."
								}
							]
						}
					]
				},
				{
					"name": "setContent",
					"unsupported": true,
					"type": "function",
					"async": "callback",
					"description": "Sets the content of the resource.",
					"parameters": [
						{
							"name": "content",
							"type": "string",
							"description": "New content of the resource. Only resources with the text type are currently supported."
						},
						{
							"name": "commit",
							"type": "boolean",
							"description": "True if the user has finished editing the resource, and the new content of the resource should be persisted; false if this is a minor change sent in progress of the user editing the resource."
						},
						{
							"name": "callback",
							"type": "function",
							"description": "A function called upon request completion.",
							"optional": true,
							"parameters": [
								{
									"name": "error",
									"type": "object",
									"additionalProperties": {},
									"optional": true,
									"description": "Set to undefined if the resource content was set successfully; describes error otherwise."
								}
							]
						}
					]
				}
			],
			"required": [
				"url"
			]
		},
		"Request": {
			"type": "object",
			"description": "Represents a network request for a document resource (script, image and so on). See HAR Specification for reference.",
			"functions": [
				{
					"name": "getContent",
					"type": "function",
					"description": "Returns content of the response body.",
					"async": "callback",
					"parameters": [
						{
							"name": "callback",
							"type": "function",
							"description": "A function that receives the response body when the request completes.",
							"parameters": [
								{
									"name": "content",
									"type": "string",
									"description": "Content of the response body (potentially encoded)."
								},
								{
									"name": "encoding",
									"type": "string",
									"description": "Empty if content is not encoded, encoding name otherwise. Currently, only base64 is supported."
								}
							]
						}
					]
				}
			]
		},
		"ElementsPanel": {
			"type": "object",
			"description": "Represents the Elements panel.",
			"events": [
				{
					"name": "onSelectionChanged",
					"unsupported": true,
					"description": "Fired when an object is selected in the panel."
				}
			],
			"functions": [
				{
					"name": "createSidebarPane",
					"unsupported": true,
					"type": "function",
					"description": "Creates a pane within panel's sidebar.",
					"parameters": [
						{
							"name": "title",
							"type": "string",
							"description": "Text that is displayed in sidebar caption."
						},
						{
							"name": "callback",
							"type": "function",
							"description": "A callback invoked when the sidebar is created.",
							"optional": true,
							"parameters": [
								{
									"allOf": [
										{
											"$ref": "#/types/ExtensionSidebarPane"
										},
										{
											"name": "result",
											"description": "An ExtensionSidebarPane object for created sidebar pane."
										}
									]
								}
							]
						}
					]
				}
			]
		},
		"SourcesPanel": {
			"type": "object",
			"description": "Represents the Sources panel.",
			"events": [
				{
					"name": "onSelectionChanged",
					"unsupported": true,
					"description": "Fired when an object is selected in the panel."
				}
			],
			"functions": [
				{
					"name": "createSidebarPane",
					"unsupported": true,
					"type": "function",
					"description": "Creates a pane within panel's sidebar.",
					"parameters": [
						{
							"name": "title",
							"type": "string",
							"description": "Text that is displayed in sidebar caption."
						},
						{
							"name": "callback",
							"type": "function",
							"description": "A callback invoked when the sidebar is created.",
							"optional": true,
							"parameters": [
								{
									"allOf": [
										{
											"$ref": "#/types/ExtensionSidebarPane"
										},
										{
											"name": "result",
											"description": "An ExtensionSidebarPane object for created sidebar pane."
										}
									]
								}
							]
						}
					]
				}
			]
		},
		"ExtensionPanel": {
			"type": "object",
			"description": "Represents a panel created by extension.",
			"functions": [
				{
					"name": "createStatusBarButton",
					"unsupported": true,
					"description": "Appends a button to the status bar of the panel.",
					"type": "function",
					"parameters": [
						{
							"name": "iconPath",
							"type": "string",
							"description": "Path to the icon of the button. The file should contain a 64x24-pixel image composed of two 32x24 icons. The left icon is used when the button is inactive; the right icon is displayed when the button is pressed."
						},
						{
							"name": "tooltipText",
							"type": "string",
							"description": "Text shown as a tooltip when user hovers the mouse over the button."
						},
						{
							"name": "disabled",
							"type": "boolean",
							"description": "Whether the button is disabled."
						}
					],
					"returns": {
						"$ref": "#/types/Button"
					}
				}
			],
			"events": [
				{
					"name": "onSearch",
					"unsupported": true,
					"description": "Fired upon a search action (start of a new search, search result navigation, or search being canceled).",
					"parameters": [
						{
							"name": "action",
							"type": "string",
							"description": "Type of search action being performed."
						},
						{
							"name": "queryString",
							"type": "string",
							"optional": true,
							"description": "Query string (only for 'performSearch')."
						}
					]
				},
				{
					"name": "onShown",
					"type": "function",
					"description": "Fired when the user switches to the panel.",
					"parameters": [
						{
							"name": "window",
							"type": "object",
							"isInstanceOf": "global",
							"additionalProperties": {},
							"description": "The JavaScript <code>window</code> object of panel's page."
						}
					]
				},
				{
					"name": "onHidden",
					"type": "function",
					"description": "Fired when the user switches away from the panel."
				}
			]
		},
		"ExtensionSidebarPane": {
			"type": "object",
			"description": "A sidebar created by the extension.",
			"functions": [
				{
					"name": "setHeight",
					"unsupported": true,
					"type": "function",
					"description": "Sets the height of the sidebar.",
					"parameters": [
						{
							"name": "height",
							"type": "string",
							"description": "A CSS-like size specification, such as <code>'100px'</code> or <code>'12ex'</code>."
						}
					]
				},
				{
					"name": "setExpression",
					"unsupported": true,
					"type": "function",
					"description": "Sets an expression that is evaluated within the inspected page. The result is displayed in the sidebar pane.",
					"parameters": [
						{
							"name": "expression",
							"type": "string",
							"description": "An expression to be evaluated in context of the inspected page. JavaScript objects and DOM nodes are displayed in an expandable tree similar to the console/watch."
						},
						{
							"name": "rootTitle",
							"type": "string",
							"optional": true,
							"description": "An optional title for the root of the expression tree."
						},
						{
							"name": "callback",
							"type": "function",
							"optional": true,
							"description": "A callback invoked after the sidebar pane is updated with the expression evaluation results."
						}
					]
				},
				{
					"name": "setObject",
					"unsupported": true,
					"type": "function",
					"description": "Sets a JSON-compliant object to be displayed in the sidebar pane.",
					"parameters": [
						{
							"name": "jsonObject",
							"type": "string",
							"description": "An object to be displayed in context of the inspected page. Evaluated in the context of the caller (API client)."
						},
						{
							"name": "rootTitle",
							"type": "string",
							"optional": true,
							"description": "An optional title for the root of the expression tree."
						},
						{
							"name": "callback",
							"type": "function",
							"optional": true,
							"description": "A callback invoked after the sidebar is updated with the object."
						}
					]
				},
				{
					"name": "setPage",
					"unsupported": true,
					"type": "function",
					"description": "Sets an HTML page to be displayed in the sidebar pane.",
					"parameters": [
						{
							"name": "path",
							"type": "string",
							"description": "Relative path of an extension page to display within the sidebar."
						}
					]
				}
			],
			"events": [
				{
					"name": "onShown",
					"unsupported": true,
					"type": "function",
					"description": "Fired when the sidebar pane becomes visible as a result of user switching to the panel that hosts it.",
					"parameters": [
						{
							"name": "window",
							"type": "object",
							"isInstanceOf": "global",
							"additionalProperties": {},
							"description": "The JavaScript <code>window</code> object of the sidebar page, if one was set with the <code>setPage()</code> method."
						}
					]
				},
				{
					"name": "onHidden",
					"unsupported": true,
					"type": "function",
					"description": "Fired when the sidebar pane becomes hidden as a result of the user switching away from the panel that hosts the sidebar pane."
				}
			]
		},
		"Button": {
			"type": "object",
			"description": "A button created by the extension.",
			"functions": [
				{
					"name": "update",
					"unsupported": true,
					"type": "function",
					"description": "Updates the attributes of the button. If some of the arguments are omitted or <code>null</code>, the corresponding attributes are not updated.",
					"parameters": [
						{
							"name": "iconPath",
							"type": "string",
							"optional": true,
							"description": "Path to the new icon of the button."
						},
						{
							"name": "tooltipText",
							"type": "string",
							"optional": true,
							"description": "Text shown as a tooltip when user hovers the mouse over the button."
						},
						{
							"name": "disabled",
							"type": "boolean",
							"optional": true,
							"description": "Whether the button is disabled."
						}
					]
				}
			],
			"events": [
				{
					"name": "onClicked",
					"unsupported": true,
					"type": "function",
					"description": "Fired when the button is clicked."
				}
			]
		}
	},
	"properties": {
		"inspectedWindow": {
			"allowedContexts": [
				"devtools",
				"devtools_only"
			],
			"defaultContexts": [
				"devtools",
				"devtools_only"
			],
			"description": "Use the <code>chrome.devtools.inspectedWindow</code> API to interact with the inspected window: obtain the tab ID for the inspected page, evaluate the code in the context of the inspected window, reload the page, or obtain the list of resources within the page.",
			"nocompile": true,
			"properties": {
				"tabId": {
					"description": "The ID of the tab being inspected. This ID may be used with chrome.tabs.* API.",
					"type": "integer"
				}
			},
			"functions": [
				{
					"name": "eval",
					"type": "function",
					"description": "Evaluates a JavaScript expression in the context of the main frame of the inspected page. The expression must evaluate to a JSON-compliant object, otherwise an exception is thrown. The eval function can report either a DevTools-side error or a JavaScript exception that occurs during evaluation. In either case, the <code>result</code> parameter of the callback is <code>undefined</code>. In the case of a DevTools-side error, the <code>isException</code> parameter is non-null and has <code>isError</code> set to true and <code>code</code> set to an error code. In the case of a JavaScript error, <code>isException</code> is set to true and <code>value</code> is set to the string value of thrown object.",
					"async": "callback",
					"parameters": [
						{
							"name": "expression",
							"type": "string",
							"description": "An expression to evaluate."
						},
						{
							"name": "options",
							"type": "object",
							"optional": true,
							"description": "The options parameter can contain one or more options.",
							"properties": {
								"frameURL": {
									"type": "string",
									"unsupported": true,
									"description": "If specified, the expression is evaluated on the iframe whose URL matches the one specified. By default, the expression is evaluated in the top frame of the inspected page."
								},
								"useContentScriptContext": {
									"type": "boolean",
									"unsupported": true,
									"description": "Evaluate the expression in the context of the content script of the calling extension, provided that the content script is already injected into the inspected page. If not, the expression is not evaluated and the callback is invoked with the exception parameter set to an object that has the <code>isError</code> field set to true and the <code>code</code> field set to <code>E_NOTFOUND</code>."
								},
								"contextSecurityOrigin": {
									"type": "string",
									"unsupported": true,
									"description": "Evaluate the expression in the context of a content script of an extension that matches the specified origin. If given, contextSecurityOrigin overrides the 'true' setting on userContentScriptContext."
								}
							}
						},
						{
							"name": "callback",
							"type": "function",
							"description": "A function called when evaluation completes.",
							"optional": true,
							"parameters": [
								{
									"name": "result",
									"type": "object",
									"additionalProperties": {},
									"description": "The result of evaluation."
								},
								{
									"name": "exceptionInfo",
									"type": "object",
									"description": "An object providing details if an exception occurred while evaluating the expression.",
									"properties": {
										"isError": {
											"type": "boolean",
											"description": "Set if the error occurred on the DevTools side before the expression is evaluated."
										},
										"code": {
											"type": "string",
											"description": "Set if the error occurred on the DevTools side before the expression is evaluated."
										},
										"description": {
											"type": "string",
											"description": "Set if the error occurred on the DevTools side before the expression is evaluated."
										},
										"details": {
											"type": "array",
											"items": {},
											"description": "Set if the error occurred on the DevTools side before the expression is evaluated, contains the array of the values that may be substituted into the description string to provide more information about the cause of the error."
										},
										"isException": {
											"type": "boolean",
											"description": "Set if the evaluated code produces an unhandled exception."
										},
										"value": {
											"type": "string",
											"description": "Set if the evaluated code produces an unhandled exception."
										}
									},
									"required": [
										"isError",
										"code",
										"description",
										"details",
										"isException",
										"value"
									]
								}
							]
						}
					]
				},
				{
					"name": "reload",
					"type": "function",
					"description": "Reloads the inspected page.",
					"parameters": [
						{
							"type": "object",
							"name": "reloadOptions",
							"optional": true,
							"properties": {
								"ignoreCache": {
									"type": "boolean",
									"description": "When true, the loader will bypass the cache for all inspected page resources loaded before the <code>load</code> event is fired. The effect is similar to pressing Ctrl+Shift+R in the inspected window or within the Developer Tools window."
								},
								"userAgent": {
									"type": "string",
									"description": "If specified, the string will override the value of the <code>User-Agent</code> HTTP header that's sent while loading the resources of the inspected page. The string will also override the value of the <code>navigator.userAgent</code> property that's returned to any scripts that are running within the inspected page."
								},
								"injectedScript": {
									"type": "string",
									"description": "If specified, the script will be injected into every frame of the inspected page immediately upon load, before any of the frame's scripts. The script will not be injected after subsequent reloads&mdash;for example, if the user presses Ctrl+R."
								},
								"preprocessorScript": {
									"unsupported": true,
									"type": "string",
									"deprecated": "Please avoid using this parameter, it will be removed soon.",
									"description": "If specified, this script evaluates into a function that accepts three string arguments: the source to preprocess, the URL of the source, and a function name if the source is an DOM event handler. The preprocessorerScript function should return a string to be compiled by Chrome in place of the input source. In the case that the source is a DOM event handler, the returned source must compile to a single JS function."
								}
							}
						}
					]
				},
				{
					"name": "getResources",
					"unsupported": true,
					"type": "function",
					"description": "Retrieves the list of resources from the inspected page.",
					"async": "callback",
					"parameters": [
						{
							"name": "callback",
							"type": "function",
							"description": "A function that receives the list of resources when the request completes.",
							"parameters": [
								{
									"name": "resources",
									"type": "array",
									"items": {
										"$ref": "#/types/Resource"
									},
									"description": "The resources within the page."
								}
							]
						}
					]
				}
			],
			"events": [
				{
					"name": "onResourceAdded",
					"unsupported": true,
					"type": "function",
					"description": "Fired when a new resource is added to the inspected page.",
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/Resource"
								},
								{
									"name": "resource"
								}
							]
						}
					]
				},
				{
					"name": "onResourceContentCommitted",
					"unsupported": true,
					"type": "function",
					"description": "Fired when a new revision of the resource is committed (e.g. user saves an edited version of the resource in the Developer Tools).",
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/Resource"
								},
								{
									"name": "resource"
								}
							]
						},
						{
							"name": "content",
							"type": "string",
							"description": "New content of the resource."
						}
					]
				}
			],
			"required": [
				"tabId"
			]
		},
		"network": {
			"allowedContexts": [
				"devtools",
				"devtools_only"
			],
			"defaultContexts": [
				"devtools",
				"devtools_only"
			],
			"description": "Use the <code>chrome.devtools.network</code> API to retrieve the information about network requests displayed by the Developer Tools in the Network panel.",
			"functions": [
				{
					"name": "getHAR",
					"unsupported": true,
					"type": "function",
					"description": "Returns HAR log that contains all known network requests.",
					"async": "callback",
					"parameters": [
						{
							"name": "callback",
							"type": "function",
							"description": "A function that receives the HAR log when the request completes.",
							"parameters": [
								{
									"name": "harLog",
									"type": "object",
									"additionalProperties": {},
									"description": "A HAR log. See HAR specification for details."
								}
							]
						}
					]
				}
			],
			"events": [
				{
					"name": "onRequestFinished",
					"unsupported": true,
					"type": "function",
					"description": "Fired when a network request is finished and all request data are available.",
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/Request"
								},
								{
									"name": "request",
									"description": "Description of a network request in the form of a HAR entry. See HAR specification for details."
								}
							]
						}
					]
				},
				{
					"name": "onNavigated",
					"type": "function",
					"description": "Fired when the inspected window navigates to a new page.",
					"parameters": [
						{
							"name": "url",
							"type": "string",
							"description": "URL of the new page."
						}
					]
				}
			]
		},
		"panels": {
			"allowedContexts": [
				"devtools",
				"devtools_only"
			],
			"defaultContexts": [
				"devtools",
				"devtools_only"
			],
			"description": "Use the <code>chrome.devtools.panels</code> API to integrate your extension into Developer Tools window UI: create your own panels, access existing panels, and add sidebars.",
			"nocompile": true,
			"properties": {
				"elements": {
					"allOf": [
						{
							"$ref": "#/types/ElementsPanel"
						},
						{
							"description": "Elements panel."
						}
					]
				},
				"sources": {
					"allOf": [
						{
							"$ref": "#/types/SourcesPanel"
						},
						{
							"description": "Sources panel."
						}
					]
				}
			},
			"functions": [
				{
					"name": "create",
					"type": "function",
					"description": "Creates an extension panel.",
					"async": "callback",
					"parameters": [
						{
							"name": "title",
							"type": "string",
							"description": "Title that is displayed next to the extension icon in the Developer Tools toolbar."
						},
						{
							"name": "iconPath",
							"type": "string",
							"description": "Path of the panel's icon relative to the extension directory."
						},
						{
							"name": "pagePath",
							"type": "string",
							"description": "Path of the panel's HTML page relative to the extension directory."
						},
						{
							"name": "callback",
							"type": "function",
							"optional": true,
							"description": "A function that is called when the panel is created.",
							"parameters": [
								{
									"allOf": [
										{
											"$ref": "#/types/ExtensionPanel"
										},
										{
											"name": "panel",
											"description": "An ExtensionPanel object representing the created panel."
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "setOpenResourceHandler",
					"unsupported": true,
					"type": "function",
					"description": "Specifies the function to be called when the user clicks a resource link in the Developer Tools window. To unset the handler, either call the method with no parameters or pass null as the parameter.",
					"async": "callback",
					"parameters": [
						{
							"name": "callback",
							"type": "function",
							"optional": true,
							"description": "A function that is called when the user clicks on a valid resource link in Developer Tools window. Note that if the user clicks an invalid URL or an XHR, this function is not called.",
							"parameters": [
								{
									"allOf": [
										{
											"$ref": "devtools#/types/inspectedWindow"
										},
										{
											"name": "resource",
											"description": "A $(ref:devtools.inspectedWindow.Resource) object for the resource that was clicked."
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "openResource",
					"unsupported": true,
					"type": "function",
					"description": "Requests DevTools to open a URL in a Developer Tools panel.",
					"async": "callback",
					"parameters": [
						{
							"name": "url",
							"type": "string",
							"description": "The URL of the resource to open."
						},
						{
							"name": "lineNumber",
							"type": "integer",
							"description": "Specifies the line number to scroll to when the resource is loaded."
						},
						{
							"name": "callback",
							"type": "function",
							"optional": true,
							"description": "A function that is called when the resource has been successfully loaded."
						}
					]
				}
			],
			"required": [
				"elements",
				"sources"
			]
		}
	}
};

/***/ }),
/* 87 */
/***/ (function(module, exports) {

module.exports = {
	"id": "downloads",
	"permissions": [
		"downloads"
	],
	"functions": [
		{
			"name": "download",
			"type": "function",
			"async": "callback",
			"description": "Download a URL. If the URL uses the HTTP[S] protocol, then the request will include all cookies currently set for its hostname. If both <code>filename</code> and <code>saveAs</code> are specified, then the Save As dialog will be displayed, pre-populated with the specified <code>filename</code>. If the download started successfully, <code>callback</code> will be called with the new <a href='#type-DownloadItem'>DownloadItem</a>'s <code>downloadId</code>. If there was an error starting the download, then <code>callback</code> will be called with <code>downloadId=undefined</code> and <a href='extension.html#property-lastError'>chrome.extension.lastError</a> will contain a descriptive string. The error strings are not guaranteed to remain backwards compatible between releases. You must not parse it.",
			"parameters": [
				{
					"description": "What to download and how.",
					"name": "options",
					"type": "object",
					"properties": {
						"url": {
							"description": "The URL to download.",
							"type": "string",
							"format": "url"
						},
						"filename": {
							"description": "A file path relative to the Downloads directory to contain the downloaded file.",
							"type": "string"
						},
						"conflictAction": {
							"$ref": "#/types/FilenameConflictAction"
						},
						"saveAs": {
							"description": "Use a file-chooser to allow the user to select a filename.",
							"type": "boolean"
						},
						"method": {
							"description": "The HTTP method to use if the URL uses the HTTP[S] protocol.",
							"enum": [
								"GET",
								"POST"
							],
							"type": "string"
						},
						"headers": {
							"type": "array",
							"description": "Extra HTTP headers to send with the request if the URL uses the HTTP[s] protocol. Each header is represented as a dictionary containing the keys <code>name</code> and either <code>value</code> or <code>binaryValue</code>, restricted to those allowed by XMLHttpRequest.",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"description": "Name of the HTTP header.",
										"type": "string"
									},
									"value": {
										"description": "Value of the HTTP header.",
										"type": "string"
									}
								},
								"required": [
									"name",
									"value"
								]
							}
						},
						"body": {
							"description": "Post body.",
							"type": "string"
						}
					},
					"required": [
						"url"
					]
				},
				{
					"name": "callback",
					"type": "function",
					"optional": true,
					"parameters": [
						{
							"name": "downloadId",
							"type": "integer"
						}
					]
				}
			]
		},
		{
			"name": "search",
			"type": "function",
			"async": "callback",
			"description": "Find <a href='#type-DownloadItem'>DownloadItems</a>. Set <code>query</code> to the empty object to get all <a href='#type-DownloadItem'>DownloadItems</a>. To get a specific <a href='#type-DownloadItem'>DownloadItem</a>, set only the <code>id</code> field.",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/DownloadQuery"
						},
						{
							"name": "query"
						}
					]
				},
				{
					"name": "callback",
					"type": "function",
					"parameters": [
						{
							"items": {
								"$ref": "#/types/DownloadItem"
							},
							"name": "results",
							"type": "array"
						}
					]
				}
			]
		},
		{
			"name": "pause",
			"type": "function",
			"async": "callback",
			"description": "Pause the download. If the request was successful the download is in a paused state. Otherwise <a href='extension.html#property-lastError'>chrome.extension.lastError</a> contains an error message. The request will fail if the download is not active.",
			"parameters": [
				{
					"description": "The id of the download to pause.",
					"name": "downloadId",
					"type": "integer"
				},
				{
					"name": "callback",
					"optional": true,
					"parameters": [],
					"type": "function"
				}
			]
		},
		{
			"name": "resume",
			"type": "function",
			"async": "callback",
			"description": "Resume a paused download. If the request was successful the download is in progress and unpaused. Otherwise <a href='extension.html#property-lastError'>chrome.extension.lastError</a> contains an error message. The request will fail if the download is not active.",
			"parameters": [
				{
					"description": "The id of the download to resume.",
					"name": "downloadId",
					"type": "integer"
				},
				{
					"name": "callback",
					"optional": true,
					"parameters": [],
					"type": "function"
				}
			]
		},
		{
			"name": "cancel",
			"type": "function",
			"async": "callback",
			"description": "Cancel a download. When <code>callback</code> is run, the download is cancelled, completed, interrupted or doesn't exist anymore.",
			"parameters": [
				{
					"description": "The id of the download to cancel.",
					"name": "downloadId",
					"type": "integer"
				},
				{
					"name": "callback",
					"optional": true,
					"parameters": [],
					"type": "function"
				}
			]
		},
		{
			"name": "getFileIcon",
			"type": "function",
			"async": "callback",
			"description": "Retrieve an icon for the specified download. For new downloads, file icons are available after the <a href='#event-onCreated'>onCreated</a> event has been received. The image returned by this function while a download is in progress may be different from the image returned after the download is complete. Icon retrieval is done by querying the underlying operating system or toolkit depending on the platform. The icon that is returned will therefore depend on a number of factors including state of the download, platform, registered file types and visual theme. If a file icon cannot be determined, <a href='extension.html#property-lastError'>chrome.extension.lastError</a> will contain an error message.",
			"parameters": [
				{
					"description": "The identifier for the download.",
					"name": "downloadId",
					"type": "integer"
				},
				{
					"name": "options",
					"optional": true,
					"properties": {
						"size": {
							"description": "The size of the icon.  The returned icon will be square with dimensions size * size pixels.  The default size for the icon is 32x32 pixels.",
							"minimum": 1,
							"maximum": 127,
							"type": "integer"
						}
					},
					"type": "object"
				},
				{
					"name": "callback",
					"parameters": [
						{
							"name": "iconURL",
							"optional": true,
							"type": "string"
						}
					],
					"type": "function"
				}
			]
		},
		{
			"name": "open",
			"type": "function",
			"async": "callback",
			"description": "Open the downloaded file.",
			"permissions": [
				"downloads.open"
			],
			"parameters": [
				{
					"name": "downloadId",
					"type": "integer"
				},
				{
					"name": "callback",
					"type": "function",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "show",
			"type": "function",
			"description": "Show the downloaded file in its folder in a file manager.",
			"async": "callback",
			"parameters": [
				{
					"name": "downloadId",
					"type": "integer"
				},
				{
					"name": "callback",
					"type": "function",
					"optional": true,
					"parameters": [
						{
							"name": "success",
							"type": "boolean"
						}
					]
				}
			]
		},
		{
			"name": "showDefaultFolder",
			"type": "function",
			"parameters": []
		},
		{
			"name": "erase",
			"type": "function",
			"async": "callback",
			"description": "Erase matching <a href='#type-DownloadItem'>DownloadItems</a> from history",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/DownloadQuery"
						},
						{
							"name": "query"
						}
					]
				},
				{
					"name": "callback",
					"type": "function",
					"optional": true,
					"parameters": [
						{
							"items": {
								"type": "integer"
							},
							"name": "erasedIds",
							"type": "array"
						}
					]
				}
			]
		},
		{
			"name": "removeFile",
			"async": "callback",
			"type": "function",
			"parameters": [
				{
					"name": "downloadId",
					"type": "integer"
				},
				{
					"name": "callback",
					"type": "function",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"description": "Prompt the user to either accept or cancel a dangerous download. <code>acceptDanger()</code> does not automatically accept dangerous downloads.",
			"name": "acceptDanger",
			"unsupported": true,
			"parameters": [
				{
					"name": "downloadId",
					"type": "integer"
				},
				{
					"name": "callback",
					"type": "function",
					"optional": true,
					"parameters": []
				}
			],
			"type": "function"
		},
		{
			"description": "Initiate dragging the file to another application.",
			"name": "drag",
			"unsupported": true,
			"parameters": [
				{
					"name": "downloadId",
					"type": "integer"
				}
			],
			"type": "function"
		},
		{
			"name": "setShelfEnabled",
			"type": "function",
			"unsupported": true,
			"parameters": [
				{
					"name": "enabled",
					"type": "boolean"
				}
			]
		}
	],
	"events": [
		{
			"description": "This event fires with the <a href='#type-DownloadItem'>DownloadItem</a> object when a download begins.",
			"name": "onCreated",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/DownloadItem"
						},
						{
							"name": "downloadItem"
						}
					]
				}
			],
			"type": "function"
		},
		{
			"description": "Fires with the <code>downloadId</code> when a download is erased from history.",
			"name": "onErased",
			"parameters": [
				{
					"name": "downloadId",
					"description": "The <code>id</code> of the <a href='#type-DownloadItem'>DownloadItem</a> that was erased.",
					"type": "integer"
				}
			],
			"type": "function"
		},
		{
			"name": "onChanged",
			"description": "When any of a <a href='#type-DownloadItem'>DownloadItem</a>'s properties except <code>bytesReceived</code> changes, this event fires with the <code>downloadId</code> and an object containing the properties that changed.",
			"parameters": [
				{
					"name": "downloadDelta",
					"type": "object",
					"properties": {
						"id": {
							"description": "The <code>id</code> of the <a href='#type-DownloadItem'>DownloadItem</a> that changed.",
							"type": "integer"
						},
						"url": {
							"allOf": [
								{
									"$ref": "#/types/StringDelta"
								},
								{
									"description": "Describes a change in a <a href='#type-DownloadItem'>DownloadItem</a>'s <code>url</code>."
								}
							]
						},
						"filename": {
							"allOf": [
								{
									"$ref": "#/types/StringDelta"
								},
								{
									"description": "Describes a change in a <a href='#type-DownloadItem'>DownloadItem</a>'s <code>filename</code>."
								}
							]
						},
						"danger": {
							"allOf": [
								{
									"$ref": "#/types/StringDelta"
								},
								{
									"description": "Describes a change in a <a href='#type-DownloadItem'>DownloadItem</a>'s <code>danger</code>."
								}
							]
						},
						"mime": {
							"allOf": [
								{
									"$ref": "#/types/StringDelta"
								},
								{
									"description": "Describes a change in a <a href='#type-DownloadItem'>DownloadItem</a>'s <code>mime</code>."
								}
							]
						},
						"startTime": {
							"allOf": [
								{
									"$ref": "#/types/StringDelta"
								},
								{
									"description": "Describes a change in a <a href='#type-DownloadItem'>DownloadItem</a>'s <code>startTime</code>."
								}
							]
						},
						"endTime": {
							"allOf": [
								{
									"$ref": "#/types/StringDelta"
								},
								{
									"description": "Describes a change in a <a href='#type-DownloadItem'>DownloadItem</a>'s <code>endTime</code>."
								}
							]
						},
						"state": {
							"allOf": [
								{
									"$ref": "#/types/StringDelta"
								},
								{
									"description": "Describes a change in a <a href='#type-DownloadItem'>DownloadItem</a>'s <code>state</code>."
								}
							]
						},
						"canResume": {
							"$ref": "#/types/BooleanDelta"
						},
						"paused": {
							"allOf": [
								{
									"$ref": "#/types/BooleanDelta"
								},
								{
									"description": "Describes a change in a <a href='#type-DownloadItem'>DownloadItem</a>'s <code>paused</code>."
								}
							]
						},
						"error": {
							"allOf": [
								{
									"$ref": "#/types/StringDelta"
								},
								{
									"description": "Describes a change in a <a href='#type-DownloadItem'>DownloadItem</a>'s <code>error</code>."
								}
							]
						},
						"totalBytes": {
							"allOf": [
								{
									"$ref": "#/types/DoubleDelta"
								},
								{
									"description": "Describes a change in a <a href='#type-DownloadItem'>DownloadItem</a>'s <code>totalBytes</code>."
								}
							]
						},
						"fileSize": {
							"allOf": [
								{
									"$ref": "#/types/DoubleDelta"
								},
								{
									"description": "Describes a change in a <a href='#type-DownloadItem'>DownloadItem</a>'s <code>fileSize</code>."
								}
							]
						},
						"exists": {
							"$ref": "#/types/BooleanDelta"
						}
					},
					"required": [
						"id"
					]
				}
			],
			"type": "function"
		}
	],
	"definitions": {
		"Permission": {
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"downloads",
						"downloads.open",
						"downloads.shelf"
					]
				}
			]
		}
	},
	"refs": {
		"downloads#/definitions/Permission": {
			"namespace": "manifest",
			"type": "Permission"
		}
	},
	"types": {
		"FilenameConflictAction": {
			"type": "string",
			"enum": [
				"uniquify",
				"overwrite",
				"prompt"
			]
		},
		"InterruptReason": {
			"type": "string",
			"enum": [
				"FILE_FAILED",
				"FILE_ACCESS_DENIED",
				"FILE_NO_SPACE",
				"FILE_NAME_TOO_LONG",
				"FILE_TOO_LARGE",
				"FILE_VIRUS_INFECTED",
				"FILE_TRANSIENT_ERROR",
				"FILE_BLOCKED",
				"FILE_SECURITY_CHECK_FAILED",
				"FILE_TOO_SHORT",
				"NETWORK_FAILED",
				"NETWORK_TIMEOUT",
				"NETWORK_DISCONNECTED",
				"NETWORK_SERVER_DOWN",
				"NETWORK_INVALID_REQUEST",
				"SERVER_FAILED",
				"SERVER_NO_RANGE",
				"SERVER_BAD_CONTENT",
				"SERVER_UNAUTHORIZED",
				"SERVER_CERT_PROBLEM",
				"SERVER_FORBIDDEN",
				"USER_CANCELED",
				"USER_SHUTDOWN",
				"CRASH"
			]
		},
		"DangerType": {
			"type": "string",
			"enum": [
				"file",
				"url",
				"content",
				"uncommon",
				"host",
				"unwanted",
				"safe",
				"accepted"
			],
			"description": "<dl><dt>file</dt><dd>The download's filename is suspicious.</dd><dt>url</dt><dd>The download's URL is known to be malicious.</dd><dt>content</dt><dd>The downloaded file is known to be malicious.</dd><dt>uncommon</dt><dd>The download's URL is not commonly downloaded and could be dangerous.</dd><dt>safe</dt><dd>The download presents no known danger to the user's computer.</dd></dl>These string constants will never change, however the set of DangerTypes may change."
		},
		"State": {
			"type": "string",
			"enum": [
				"in_progress",
				"interrupted",
				"complete"
			],
			"description": "<dl><dt>in_progress</dt><dd>The download is currently receiving data from the server.</dd><dt>interrupted</dt><dd>An error broke the connection with the file host.</dd><dt>complete</dt><dd>The download completed successfully.</dd></dl>These string constants will never change, however the set of States may change."
		},
		"DownloadItem": {
			"type": "object",
			"properties": {
				"id": {
					"description": "An identifier that is persistent across browser sessions.",
					"type": "integer"
				},
				"url": {
					"description": "Absolute URL.",
					"type": "string"
				},
				"referrer": {
					"type": "string"
				},
				"filename": {
					"description": "Absolute local path.",
					"type": "string"
				},
				"incognito": {
					"description": "False if this download is recorded in the history, true if it is not recorded.",
					"type": "boolean"
				},
				"danger": {
					"allOf": [
						{
							"$ref": "#/types/DangerType"
						},
						{
							"description": "Indication of whether this download is thought to be safe or known to be suspicious."
						}
					]
				},
				"mime": {
					"description": "The file's MIME type.",
					"type": "string"
				},
				"startTime": {
					"description": "Number of milliseconds between the unix epoch and when this download began.",
					"type": "string"
				},
				"endTime": {
					"description": "Number of milliseconds between the unix epoch and when this download ended.",
					"type": "string"
				},
				"estimatedEndTime": {
					"type": "string"
				},
				"state": {
					"allOf": [
						{
							"$ref": "#/types/State"
						},
						{
							"description": "Indicates whether the download is progressing, interrupted, or complete."
						}
					]
				},
				"paused": {
					"description": "True if the download has stopped reading data from the host, but kept the connection open.",
					"type": "boolean"
				},
				"canResume": {
					"type": "boolean"
				},
				"error": {
					"allOf": [
						{
							"$ref": "#/types/InterruptReason"
						},
						{
							"description": "Number indicating why a download was interrupted."
						}
					]
				},
				"bytesReceived": {
					"description": "Number of bytes received so far from the host, without considering file compression.",
					"type": "number"
				},
				"totalBytes": {
					"description": "Number of bytes in the whole file, without considering file compression, or -1 if unknown.",
					"type": "number"
				},
				"fileSize": {
					"description": "Number of bytes in the whole file post-decompression, or -1 if unknown.",
					"type": "number"
				},
				"exists": {
					"type": "boolean"
				},
				"byExtensionId": {
					"type": "string"
				},
				"byExtensionName": {
					"type": "string"
				}
			},
			"required": [
				"id",
				"url",
				"referrer",
				"filename",
				"incognito",
				"danger",
				"mime",
				"startTime",
				"state",
				"paused",
				"canResume",
				"bytesReceived",
				"totalBytes",
				"fileSize",
				"exists"
			]
		},
		"StringDelta": {
			"type": "object",
			"properties": {
				"current": {
					"type": "string"
				},
				"previous": {
					"type": "string"
				}
			}
		},
		"DoubleDelta": {
			"type": "object",
			"properties": {
				"current": {
					"type": "number"
				},
				"previous": {
					"type": "number"
				}
			}
		},
		"BooleanDelta": {
			"type": "object",
			"properties": {
				"current": {
					"type": "boolean"
				},
				"previous": {
					"type": "boolean"
				}
			}
		},
		"DownloadTime": {
			"description": "A time specified as a Date object, a number or string representing milliseconds since the epoch, or an ISO 8601 string",
			"anyOf": [
				{
					"type": "string",
					"pattern": "^[1-9]\\d*$"
				},
				{
					"$ref": "extensionTypes#/types/Date"
				}
			]
		},
		"DownloadQuery": {
			"description": "Parameters that combine to specify a predicate that can be used to select a set of downloads.  Used for example in search() and erase()",
			"type": "object",
			"properties": {
				"query": {
					"description": "This array of search terms limits results to <a href='#type-DownloadItem'>DownloadItems</a> whose <code>filename</code> or <code>url</code> contain all of the search terms that do not begin with a dash '-' and none of the search terms that do begin with a dash.",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"startedBefore": {
					"allOf": [
						{
							"$ref": "#/types/DownloadTime"
						},
						{
							"description": "Limits results to downloads that started before the given ms since the epoch."
						}
					]
				},
				"startedAfter": {
					"allOf": [
						{
							"$ref": "#/types/DownloadTime"
						},
						{
							"description": "Limits results to downloads that started after the given ms since the epoch."
						}
					]
				},
				"endedBefore": {
					"allOf": [
						{
							"$ref": "#/types/DownloadTime"
						},
						{
							"description": "Limits results to downloads that ended before the given ms since the epoch."
						}
					]
				},
				"endedAfter": {
					"allOf": [
						{
							"$ref": "#/types/DownloadTime"
						},
						{
							"description": "Limits results to downloads that ended after the given ms since the epoch."
						}
					]
				},
				"totalBytesGreater": {
					"description": "Limits results to downloads whose totalBytes is greater than the given integer.",
					"type": "number"
				},
				"totalBytesLess": {
					"description": "Limits results to downloads whose totalBytes is less than the given integer.",
					"type": "number"
				},
				"filenameRegex": {
					"description": "Limits results to <a href='#type-DownloadItem'>DownloadItems</a> whose <code>filename</code> matches the given regular expression.",
					"type": "string"
				},
				"urlRegex": {
					"description": "Limits results to <a href='#type-DownloadItem'>DownloadItems</a> whose <code>url</code> matches the given regular expression.",
					"type": "string"
				},
				"limit": {
					"description": "Setting this integer limits the number of results. Otherwise, all matching <a href='#type-DownloadItem'>DownloadItems</a> will be returned.",
					"type": "integer"
				},
				"orderBy": {
					"description": "Setting elements of this array to <a href='#type-DownloadItem'>DownloadItem</a> properties in order to sort the search results. For example, setting <code>orderBy='startTime'</code> sorts the <a href='#type-DownloadItem'>DownloadItems</a> by their start time in ascending order. To specify descending order, prefix <code>orderBy</code> with a hyphen: '-startTime'.",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "integer"
				},
				"url": {
					"description": "Absolute URL.",
					"type": "string"
				},
				"filename": {
					"description": "Absolute local path.",
					"type": "string"
				},
				"danger": {
					"allOf": [
						{
							"$ref": "#/types/DangerType"
						},
						{
							"description": "Indication of whether this download is thought to be safe or known to be suspicious."
						}
					]
				},
				"mime": {
					"description": "The file's MIME type.",
					"type": "string"
				},
				"startTime": {
					"type": "string"
				},
				"endTime": {
					"type": "string"
				},
				"state": {
					"allOf": [
						{
							"$ref": "#/types/State"
						},
						{
							"description": "Indicates whether the download is progressing, interrupted, or complete."
						}
					]
				},
				"paused": {
					"description": "True if the download has stopped reading data from the host, but kept the connection open.",
					"type": "boolean"
				},
				"error": {
					"allOf": [
						{
							"$ref": "#/types/InterruptReason"
						},
						{
							"description": "Why a download was interrupted."
						}
					]
				},
				"bytesReceived": {
					"description": "Number of bytes received so far from the host, without considering file compression.",
					"type": "number"
				},
				"totalBytes": {
					"description": "Number of bytes in the whole file, without considering file compression, or -1 if unknown.",
					"type": "number"
				},
				"fileSize": {
					"description": "Number of bytes in the whole file post-decompression, or -1 if unknown.",
					"type": "number"
				},
				"exists": {
					"type": "boolean"
				}
			}
		}
	}
};

/***/ }),
/* 88 */
/***/ (function(module, exports) {

module.exports = {
	"id": "events",
	"description": "The <code>chrome.events</code> namespace contains common types used by APIs dispatching events to notify you when something interesting happens.",
	"definitions": {},
	"refs": {},
	"types": {
		"Rule": {
			"type": "object",
			"description": "Description of a declarative rule for handling events.",
			"properties": {
				"id": {
					"type": "string",
					"description": "Optional identifier that allows referencing this rule."
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "Tags can be used to annotate rules and perform operations on sets of rules."
				},
				"conditions": {
					"type": "array",
					"items": {},
					"description": "List of conditions that can trigger the actions."
				},
				"actions": {
					"type": "array",
					"items": {},
					"description": "List of actions that are triggered if one of the condtions is fulfilled."
				},
				"priority": {
					"type": "integer",
					"description": "Optional priority of this rule. Defaults to 100."
				}
			},
			"required": [
				"conditions",
				"actions"
			]
		},
		"Event": {
			"type": "object",
			"description": "An object which allows the addition and removal of listeners for a Chrome event.",
			"functions": [
				{
					"name": "addListener",
					"type": "function",
					"description": "Registers an event listener <em>callback</em> to an event.",
					"parameters": [
						{
							"name": "callback",
							"type": "function",
							"description": "Called when an event occurs. The parameters of this function depend on the type of event."
						}
					]
				},
				{
					"name": "removeListener",
					"type": "function",
					"description": "Deregisters an event listener <em>callback</em> from an event.",
					"parameters": [
						{
							"name": "callback",
							"type": "function",
							"description": "Listener that shall be unregistered."
						}
					]
				},
				{
					"name": "hasListener",
					"type": "function",
					"parameters": [
						{
							"name": "callback",
							"type": "function",
							"description": "Listener whose registration status shall be tested."
						}
					],
					"returns": {
						"type": "boolean",
						"description": "True if <em>callback</em> is registered to the event."
					}
				},
				{
					"name": "hasListeners",
					"type": "function",
					"parameters": [],
					"returns": {
						"type": "boolean",
						"description": "True if any event listeners are registered to the event."
					}
				},
				{
					"name": "addRules",
					"unsupported": true,
					"type": "function",
					"description": "Registers rules to handle events.",
					"parameters": [
						{
							"name": "eventName",
							"type": "string",
							"description": "Name of the event this function affects."
						},
						{
							"name": "webViewInstanceId",
							"type": "integer",
							"description": "If provided, this is an integer that uniquely identfies the <webview> associated with this function call."
						},
						{
							"name": "rules",
							"type": "array",
							"items": {
								"$ref": "#/types/Rule"
							},
							"description": "Rules to be registered. These do not replace previously registered rules."
						},
						{
							"name": "callback",
							"optional": true,
							"type": "function",
							"parameters": [
								{
									"name": "rules",
									"type": "array",
									"items": {
										"$ref": "#/types/Rule"
									},
									"description": "Rules that were registered, the optional parameters are filled with values."
								}
							],
							"description": "Called with registered rules."
						}
					]
				},
				{
					"name": "getRules",
					"unsupported": true,
					"type": "function",
					"description": "Returns currently registered rules.",
					"parameters": [
						{
							"name": "eventName",
							"type": "string",
							"description": "Name of the event this function affects."
						},
						{
							"name": "webViewInstanceId",
							"type": "integer",
							"description": "If provided, this is an integer that uniquely identfies the <webview> associated with this function call."
						},
						{
							"name": "ruleIdentifiers",
							"optional": true,
							"type": "array",
							"items": {
								"type": "string"
							},
							"description": "If an array is passed, only rules with identifiers contained in this array are returned."
						},
						{
							"name": "callback",
							"type": "function",
							"parameters": [
								{
									"name": "rules",
									"type": "array",
									"items": {
										"$ref": "#/types/Rule"
									},
									"description": "Rules that were registered, the optional parameters are filled with values."
								}
							],
							"description": "Called with registered rules."
						}
					]
				},
				{
					"name": "removeRules",
					"unsupported": true,
					"type": "function",
					"description": "Unregisters currently registered rules.",
					"parameters": [
						{
							"name": "eventName",
							"type": "string",
							"description": "Name of the event this function affects."
						},
						{
							"name": "webViewInstanceId",
							"type": "integer",
							"description": "If provided, this is an integer that uniquely identfies the <webview> associated with this function call."
						},
						{
							"name": "ruleIdentifiers",
							"optional": true,
							"type": "array",
							"items": {
								"type": "string"
							},
							"description": "If an array is passed, only rules with identifiers contained in this array are unregistered."
						},
						{
							"name": "callback",
							"optional": true,
							"type": "function",
							"parameters": [],
							"description": "Called when rules were unregistered."
						}
					]
				}
			]
		},
		"UrlFilter": {
			"type": "object",
			"description": "Filters URLs for various criteria. See <a href='events#filtered'>event filtering</a>. All criteria are case sensitive.",
			"properties": {
				"hostContains": {
					"type": "string",
					"description": "Matches if the host name of the URL contains a specified string. To test whether a host name component has a prefix 'foo', use hostContains: '.foo'. This matches 'www.foobar.com' and 'foo.com', because an implicit dot is added at the beginning of the host name. Similarly, hostContains can be used to match against component suffix ('foo.') and to exactly match against components ('.foo.'). Suffix- and exact-matching for the last components need to be done separately using hostSuffix, because no implicit dot is added at the end of the host name."
				},
				"hostEquals": {
					"type": "string",
					"description": "Matches if the host name of the URL is equal to a specified string."
				},
				"hostPrefix": {
					"type": "string",
					"description": "Matches if the host name of the URL starts with a specified string."
				},
				"hostSuffix": {
					"type": "string",
					"description": "Matches if the host name of the URL ends with a specified string."
				},
				"pathContains": {
					"type": "string",
					"description": "Matches if the path segment of the URL contains a specified string."
				},
				"pathEquals": {
					"type": "string",
					"description": "Matches if the path segment of the URL is equal to a specified string."
				},
				"pathPrefix": {
					"type": "string",
					"description": "Matches if the path segment of the URL starts with a specified string."
				},
				"pathSuffix": {
					"type": "string",
					"description": "Matches if the path segment of the URL ends with a specified string."
				},
				"queryContains": {
					"type": "string",
					"description": "Matches if the query segment of the URL contains a specified string."
				},
				"queryEquals": {
					"type": "string",
					"description": "Matches if the query segment of the URL is equal to a specified string."
				},
				"queryPrefix": {
					"type": "string",
					"description": "Matches if the query segment of the URL starts with a specified string."
				},
				"querySuffix": {
					"type": "string",
					"description": "Matches if the query segment of the URL ends with a specified string."
				},
				"urlContains": {
					"type": "string",
					"description": "Matches if the URL (without fragment identifier) contains a specified string. Port numbers are stripped from the URL if they match the default port number."
				},
				"urlEquals": {
					"type": "string",
					"description": "Matches if the URL (without fragment identifier) is equal to a specified string. Port numbers are stripped from the URL if they match the default port number."
				},
				"urlMatches": {
					"type": "string",
					"description": "Matches if the URL (without fragment identifier) matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the <a href=\"https://github.com/google/re2/blob/master/doc/syntax.txt\">RE2 syntax</a>."
				},
				"originAndPathMatches": {
					"type": "string",
					"description": "Matches if the URL without query segment and fragment identifier matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the <a href=\"https://github.com/google/re2/blob/master/doc/syntax.txt\">RE2 syntax</a>."
				},
				"urlPrefix": {
					"type": "string",
					"description": "Matches if the URL (without fragment identifier) starts with a specified string. Port numbers are stripped from the URL if they match the default port number."
				},
				"urlSuffix": {
					"type": "string",
					"description": "Matches if the URL (without fragment identifier) ends with a specified string. Port numbers are stripped from the URL if they match the default port number."
				},
				"schemes": {
					"type": "array",
					"description": "Matches if the scheme of the URL is equal to any of the schemes specified in the array.",
					"items": {
						"type": "string"
					}
				},
				"ports": {
					"type": "array",
					"description": "Matches if the port of the URL is contained in any of the specified port lists. For example <code>[80, 443, [1000, 1200]]</code> matches all requests on port 80, 443 and in the range 1000-1200.",
					"items": {
						"anyOf": [
							{
								"type": "integer",
								"description": "A specific port."
							},
							{
								"type": "array",
								"minItems": 2,
								"maxItems": 2,
								"items": {
									"type": "integer"
								},
								"description": "A pair of integers identiying the start and end (both inclusive) of a port range."
							}
						]
					}
				}
			}
		}
	}
};

/***/ }),
/* 89 */
/***/ (function(module, exports) {

module.exports = {
	"id": "experiments",
	"definitions": {
		"Permission": {
			"anyOf": [
				{
					"type": "string",
					"pattern": "^experiments(\\.\\w+)+$"
				}
			]
		}
	},
	"refs": {
		"experiments#/definitions/Permission": {
			"namespace": "manifest",
			"type": "Permission"
		}
	},
	"types": {}
};

/***/ }),
/* 90 */
/***/ (function(module, exports) {

module.exports = {
	"id": "extension",
	"allowedContexts": [
		"content",
		"devtools"
	],
	"description": "The <code>browser.extension</code> API has utilities that can be used by any extension page. It includes support for exchanging messages between an extension and its content scripts or between extensions, as described in detail in $(topic:messaging)[Message Passing].",
	"properties": {
		"lastError": {
			"type": "object",
			"optional": true,
			"allowedContexts": [
				"content",
				"devtools"
			],
			"description": "Set for the lifetime of a callback if an ansychronous extension api has resulted in an error. If no error has occured lastError will be <var>undefined</var>.",
			"properties": {
				"message": {
					"type": "string",
					"description": "Description of the error that has taken place."
				}
			},
			"additionalProperties": {},
			"required": [
				"message"
			]
		},
		"inIncognitoContext": {
			"type": "boolean",
			"optional": true,
			"allowedContexts": [
				"content",
				"devtools"
			],
			"description": "True for content scripts running inside incognito tabs, and for extension pages running inside an incognito process. The latter only applies to extensions with 'split' incognito_behavior."
		}
	},
	"functions": [
		{
			"name": "getURL",
			"type": "function",
			"allowedContexts": [
				"content",
				"devtools"
			],
			"description": "Converts a relative path within an extension install directory to a fully-qualified URL.",
			"parameters": [
				{
					"type": "string",
					"name": "path",
					"description": "A path to a resource within an extension expressed relative to its install directory."
				}
			],
			"returns": {
				"type": "string",
				"description": "The fully-qualified URL to the resource."
			}
		},
		{
			"name": "getViews",
			"type": "function",
			"description": "Returns an array of the JavaScript 'window' objects for each of the pages running inside the current extension.",
			"parameters": [
				{
					"type": "object",
					"name": "fetchProperties",
					"optional": true,
					"properties": {
						"type": {
							"allOf": [
								{
									"$ref": "#/types/ViewType"
								},
								{
									"description": "The type of view to get. If omitted, returns all views (including background pages and tabs). Valid values: 'tab', 'notification', 'popup'."
								}
							]
						},
						"windowId": {
							"type": "integer",
							"description": "The window to restrict the search to. If omitted, returns all views."
						}
					}
				}
			],
			"returns": {
				"type": "array",
				"description": "Array of global objects",
				"items": {
					"name": "viewGlobals",
					"type": "object",
					"isInstanceOf": "Window",
					"additionalProperties": {}
				}
			}
		},
		{
			"name": "getBackgroundPage",
			"type": "function",
			"description": "Returns the JavaScript 'window' object for the background page running inside the current extension. Returns null if the extension has no background page.",
			"parameters": [],
			"returns": {
				"type": "object",
				"optional": true,
				"name": "backgroundPageGlobal",
				"isInstanceOf": "Window",
				"additionalProperties": {}
			}
		},
		{
			"name": "isAllowedIncognitoAccess",
			"type": "function",
			"description": "Retrieves the state of the extension's access to Incognito-mode (as determined by the user-controlled 'Allowed in Incognito' checkbox.",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "isAllowedAccess",
							"type": "boolean",
							"description": "True if the extension has access to Incognito mode, false otherwise."
						}
					]
				}
			]
		},
		{
			"name": "isAllowedFileSchemeAccess",
			"type": "function",
			"description": "Retrieves the state of the extension's access to the 'file://' scheme (as determined by the user-controlled 'Allow access to File URLs' checkbox.",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "isAllowedAccess",
							"type": "boolean",
							"description": "True if the extension can access the 'file://' scheme, false otherwise."
						}
					]
				}
			]
		},
		{
			"name": "setUpdateUrlData",
			"unsupported": true,
			"type": "function",
			"description": "Sets the value of the ap CGI parameter used in the extension's update URL.  This value is ignored for extensions that are hosted in the browser vendor's store.",
			"parameters": [
				{
					"type": "string",
					"name": "data",
					"maxLength": 1024
				}
			]
		}
	],
	"events": [
		{
			"name": "onRequest",
			"unsupported": true,
			"deprecated": "Please use $(ref:runtime.onMessage).",
			"type": "function",
			"description": "Fired when a request is sent from either an extension process or a content script.",
			"parameters": [
				{
					"name": "request",
					"optional": true,
					"description": "The request sent by the calling script."
				},
				{
					"allOf": [
						{
							"$ref": "runtime#/types/MessageSender"
						},
						{
							"name": "sender"
						}
					]
				},
				{
					"name": "sendResponse",
					"type": "function",
					"description": "Function to call (at most once) when you have a response. The argument should be any JSON-ifiable object, or undefined if there is no response. If you have more than one <code>onRequest</code> listener in the same document, then only one may send a response."
				}
			]
		},
		{
			"name": "onRequestExternal",
			"unsupported": true,
			"deprecated": "Please use $(ref:runtime.onMessageExternal).",
			"type": "function",
			"description": "Fired when a request is sent from another extension.",
			"parameters": [
				{
					"name": "request",
					"optional": true,
					"description": "The request sent by the calling script."
				},
				{
					"allOf": [
						{
							"$ref": "runtime#/types/MessageSender"
						},
						{
							"name": "sender"
						}
					]
				},
				{
					"name": "sendResponse",
					"type": "function",
					"description": "Function to call when you have a response. The argument should be any JSON-ifiable object, or undefined if there is no response."
				}
			]
		}
	],
	"definitions": {},
	"refs": {},
	"types": {
		"ViewType": {
			"type": "string",
			"enum": [
				"tab",
				"notification",
				"popup",
				"sidebar"
			],
			"description": "The type of extension view."
		}
	}
};

/***/ }),
/* 91 */
/***/ (function(module, exports) {

module.exports = {
	"id": "extension_protocol_handlers",
	"definitions": {
		"WebExtensionManifest": {
			"properties": {
				"protocol_handlers": {
					"description": "A list of protocol handler definitions.",
					"type": "array",
					"items": {
						"$ref": "#/types/ProtocolHandler"
					}
				}
			}
		}
	},
	"refs": {
		"extension_protocol_handlers#/definitions/WebExtensionManifest": {
			"namespace": "manifest",
			"type": "WebExtensionManifest"
		}
	},
	"types": {
		"ProtocolHandler": {
			"type": "object",
			"description": "Represents a protocol handler definition.",
			"properties": {
				"name": {
					"description": "A user-readable title string for the protocol handler. This will be displayed to the user in interface objects as needed.",
					"type": "string"
				},
				"protocol": {
					"description": "The protocol the site wishes to handle, specified as a string. For example, you can register to handle SMS text message links by registering to handle the \"sms\" scheme.",
					"anyOf": [
						{
							"type": "string",
							"enum": [
								"bitcoin",
								"geo",
								"im",
								"irc",
								"ircs",
								"magnet",
								"mailto",
								"mms",
								"news",
								"nntp",
								"sip",
								"sms",
								"smsto",
								"ssh",
								"tel",
								"urn",
								"webcal",
								"wtai",
								"xmpp"
							]
						},
						{
							"type": "string",
							"pattern": "^(ext|web)\\+[a-z0-9.+-]+$"
						}
					]
				},
				"uriTemplate": {
					"description": "The URL of the handler, as a string. This string should include \"%s\" as a placeholder which will be replaced with the escaped URL of the document to be handled. This URL might be a true URL, or it could be a phone number, email address, or so forth.",
					"preprocess": "localize",
					"anyOf": [
						{
							"$ref": "manifest#/types/ExtensionURL"
						},
						{
							"$ref": "manifest#/types/HttpURL"
						}
					]
				}
			},
			"required": [
				"name",
				"protocol",
				"uriTemplate"
			]
		}
	}
};

/***/ }),
/* 92 */
/***/ (function(module, exports) {

module.exports = {
	"id": "extensionTypes",
	"description": "The <code>browser.extensionTypes</code> API contains type declarations for WebExtensions.",
	"definitions": {},
	"refs": {},
	"types": {
		"ImageFormat": {
			"type": "string",
			"enum": [
				"jpeg",
				"png"
			],
			"description": "The format of an image."
		},
		"ImageDetails": {
			"type": "object",
			"description": "Details about the format and quality of an image.",
			"properties": {
				"format": {
					"allOf": [
						{
							"$ref": "#/types/ImageFormat"
						},
						{
							"description": "The format of the resulting image.  Default is <code>\"jpeg\"</code>."
						}
					]
				},
				"quality": {
					"type": "integer",
					"minimum": 0,
					"maximum": 100,
					"description": "When format is <code>\"jpeg\"</code>, controls the quality of the resulting image.  This value is ignored for PNG images.  As quality is decreased, the resulting image will have more visual artifacts, and the number of bytes needed to store it will decrease."
				}
			}
		},
		"RunAt": {
			"type": "string",
			"enum": [
				"document_start",
				"document_end",
				"document_idle"
			],
			"description": "The soonest that the JavaScript or CSS will be injected into the tab."
		},
		"CSSOrigin": {
			"type": "string",
			"enum": [
				"user",
				"author"
			],
			"description": "The origin of the CSS to inject, this affects the cascading order (priority) of the stylesheet."
		},
		"InjectDetails": {
			"type": "object",
			"description": "Details of the script or CSS to inject. Either the code or the file property must be set, but both may not be set at the same time.",
			"properties": {
				"code": {
					"type": "string",
					"description": "JavaScript or CSS code to inject.<br><br><b>Warning:</b><br>Be careful using the <code>code</code> parameter. Incorrect use of it may open your extension to <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">cross site scripting</a> attacks."
				},
				"file": {
					"type": "string",
					"description": "JavaScript or CSS file to inject."
				},
				"allFrames": {
					"type": "boolean",
					"description": "If allFrames is <code>true</code>, implies that the JavaScript or CSS should be injected into all frames of current page. By default, it's <code>false</code> and is only injected into the top frame."
				},
				"matchAboutBlank": {
					"type": "boolean",
					"description": "If matchAboutBlank is true, then the code is also injected in about:blank and about:srcdoc frames if your extension has access to its parent document. Code cannot be inserted in top-level about:-frames. By default it is <code>false</code>."
				},
				"frameId": {
					"type": "integer",
					"minimum": 0,
					"description": "The ID of the frame to inject the script into. This may not be used in combination with <code>allFrames</code>."
				},
				"runAt": {
					"allOf": [
						{
							"$ref": "#/types/RunAt"
						},
						{
							"description": "The soonest that the JavaScript or CSS will be injected into the tab. Defaults to \"document_idle\"."
						}
					]
				},
				"cssOrigin": {
					"allOf": [
						{
							"$ref": "#/types/CSSOrigin"
						},
						{
							"description": "The css origin of the stylesheet to inject. Defaults to \"author\"."
						}
					]
				}
			}
		},
		"Date": {
			"anyOf": [
				{
					"type": "string",
					"format": "date"
				},
				{
					"type": "integer",
					"minimum": 0
				},
				{
					"type": "object",
					"isInstanceOf": "Date",
					"additionalProperties": {}
				}
			]
		}
	}
};

/***/ }),
/* 93 */
/***/ (function(module, exports) {

module.exports = {
	"id": "history",
	"description": "Use the <code>browser.history</code> API to interact with the browser's record of visited pages. You can add, remove, and query for URLs in the browser's history. To override the history page with your own version, see $(topic:override)[Override Pages].",
	"permissions": [
		"history"
	],
	"functions": [
		{
			"name": "search",
			"type": "function",
			"description": "Searches the history for the last visit time of each page matching the query.",
			"async": "callback",
			"parameters": [
				{
					"name": "query",
					"type": "object",
					"properties": {
						"text": {
							"type": "string",
							"description": "A free-text query to the history service.  Leave empty to retrieve all pages."
						},
						"startTime": {
							"allOf": [
								{
									"$ref": "extensionTypes#/types/Date"
								},
								{
									"description": "Limit results to those visited after this date. If not specified, this defaults to 24 hours in the past."
								}
							]
						},
						"endTime": {
							"allOf": [
								{
									"$ref": "extensionTypes#/types/Date"
								},
								{
									"description": "Limit results to those visited before this date."
								}
							]
						},
						"maxResults": {
							"type": "integer",
							"minimum": 1,
							"description": "The maximum number of results to retrieve.  Defaults to 100."
						}
					},
					"required": [
						"text"
					]
				},
				{
					"name": "callback",
					"type": "function",
					"parameters": [
						{
							"name": "results",
							"type": "array",
							"items": {
								"$ref": "#/types/HistoryItem"
							}
						}
					]
				}
			]
		},
		{
			"name": "getVisits",
			"type": "function",
			"description": "Retrieves information about visits to a URL.",
			"async": "callback",
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"url": {
							"type": "string",
							"description": "The URL for which to retrieve visit information.  It must be in the format as returned from a call to history.search."
						}
					},
					"required": [
						"url"
					]
				},
				{
					"name": "callback",
					"type": "function",
					"parameters": [
						{
							"name": "results",
							"type": "array",
							"items": {
								"$ref": "#/types/VisitItem"
							}
						}
					]
				}
			]
		},
		{
			"name": "addUrl",
			"type": "function",
			"description": "Adds a URL to the history with a default visitTime of the current time and a default $(topic:transition-types)[transition type] of \"link\".",
			"async": "callback",
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"url": {
							"type": "string",
							"description": "The URL to add. Must be a valid URL that can be added to history."
						},
						"title": {
							"type": "string",
							"description": "The title of the page."
						},
						"transition": {
							"allOf": [
								{
									"$ref": "#/types/TransitionType"
								},
								{
									"description": "The $(topic:transition-types)[transition type] for this visit from its referrer."
								}
							]
						},
						"visitTime": {
							"allOf": [
								{
									"$ref": "extensionTypes#/types/Date"
								},
								{
									"description": "The date when this visit occurred."
								}
							]
						}
					},
					"required": [
						"url"
					]
				},
				{
					"name": "callback",
					"type": "function",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "deleteUrl",
			"type": "function",
			"description": "Removes all occurrences of the given URL from the history.",
			"async": "callback",
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"url": {
							"type": "string",
							"description": "The URL to remove."
						}
					},
					"required": [
						"url"
					]
				},
				{
					"name": "callback",
					"type": "function",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "deleteRange",
			"type": "function",
			"description": "Removes all items within the specified date range from the history.  Pages will not be removed from the history unless all visits fall within the range.",
			"async": "callback",
			"parameters": [
				{
					"name": "range",
					"type": "object",
					"properties": {
						"startTime": {
							"allOf": [
								{
									"$ref": "extensionTypes#/types/Date"
								},
								{
									"description": "Items added to history after this date."
								}
							]
						},
						"endTime": {
							"allOf": [
								{
									"$ref": "extensionTypes#/types/Date"
								},
								{
									"description": "Items added to history before this date."
								}
							]
						}
					},
					"required": [
						"startTime",
						"endTime"
					]
				},
				{
					"name": "callback",
					"type": "function",
					"parameters": []
				}
			]
		},
		{
			"name": "deleteAll",
			"type": "function",
			"description": "Deletes all items from the history.",
			"async": "callback",
			"parameters": [
				{
					"name": "callback",
					"type": "function",
					"parameters": []
				}
			]
		}
	],
	"events": [
		{
			"name": "onVisited",
			"type": "function",
			"description": "Fired when a URL is visited, providing the HistoryItem data for that URL.  This event fires before the page has loaded.",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/HistoryItem"
						},
						{
							"name": "result"
						}
					]
				}
			]
		},
		{
			"name": "onVisitRemoved",
			"type": "function",
			"description": "Fired when one or more URLs are removed from the history service.  When all visits have been removed the URL is purged from history.",
			"parameters": [
				{
					"name": "removed",
					"type": "object",
					"properties": {
						"allHistory": {
							"type": "boolean",
							"description": "True if all history was removed.  If true, then urls will be empty."
						},
						"urls": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					"required": [
						"allHistory",
						"urls"
					]
				}
			]
		}
	],
	"definitions": {
		"Permission": {
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"history"
					]
				}
			]
		}
	},
	"refs": {
		"history#/definitions/Permission": {
			"namespace": "manifest",
			"type": "Permission"
		}
	},
	"types": {
		"TransitionType": {
			"type": "string",
			"enum": [
				"link",
				"typed",
				"auto_bookmark",
				"auto_subframe",
				"manual_subframe",
				"generated",
				"auto_toplevel",
				"form_submit",
				"reload",
				"keyword",
				"keyword_generated"
			],
			"description": "The $(topic:transition-types)[transition type] for this visit from its referrer."
		},
		"HistoryItem": {
			"type": "object",
			"description": "An object encapsulating one result of a history query.",
			"properties": {
				"id": {
					"type": "string",
					"description": "The unique identifier for the item."
				},
				"url": {
					"type": "string",
					"description": "The URL navigated to by a user."
				},
				"title": {
					"type": "string",
					"description": "The title of the page when it was last loaded."
				},
				"lastVisitTime": {
					"type": "number",
					"description": "When this page was last loaded, represented in milliseconds since the epoch."
				},
				"visitCount": {
					"type": "integer",
					"description": "The number of times the user has navigated to this page."
				},
				"typedCount": {
					"type": "integer",
					"description": "The number of times the user has navigated to this page by typing in the address."
				}
			},
			"required": [
				"id"
			]
		},
		"VisitItem": {
			"type": "object",
			"description": "An object encapsulating one visit to a URL.",
			"properties": {
				"id": {
					"type": "string",
					"description": "The unique identifier for the item."
				},
				"visitId": {
					"type": "string",
					"description": "The unique identifier for this visit."
				},
				"visitTime": {
					"type": "number",
					"description": "When this visit occurred, represented in milliseconds since the epoch."
				},
				"referringVisitId": {
					"type": "string",
					"description": "The visit ID of the referrer."
				},
				"transition": {
					"allOf": [
						{
							"$ref": "#/types/TransitionType"
						},
						{
							"description": "The $(topic:transition-types)[transition type] for this visit from its referrer."
						}
					]
				}
			},
			"required": [
				"id",
				"visitId",
				"referringVisitId",
				"transition"
			]
		}
	}
};

/***/ }),
/* 94 */
/***/ (function(module, exports) {

module.exports = {
	"id": "i18n",
	"allowedContexts": [
		"content",
		"devtools"
	],
	"defaultContexts": [
		"content",
		"devtools"
	],
	"description": "Use the <code>browser.i18n</code> infrastructure to implement internationalization across your whole app or extension.",
	"functions": [
		{
			"name": "getAcceptLanguages",
			"type": "function",
			"description": "Gets the accept-languages of the browser. This is different from the locale used by the browser; to get the locale, use $(ref:i18n.getUILanguage).",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "languages",
							"type": "array",
							"items": {
								"$ref": "#/types/LanguageCode"
							},
							"description": "Array of LanguageCode"
						}
					]
				}
			]
		},
		{
			"name": "getMessage",
			"type": "function",
			"description": "Gets the localized string for the specified message. If the message is missing, this method returns an empty string (''). If the format of the <code>getMessage()</code> call is wrong &mdash; for example, <em>messageName</em> is not a string or the <em>substitutions</em> array has more than 9 elements &mdash; this method returns <code>undefined</code>.",
			"parameters": [
				{
					"type": "string",
					"name": "messageName",
					"description": "The name of the message, as specified in the <code>$(topic:i18n-messages)[messages.json]</code> file."
				},
				{
					"name": "substitutions",
					"optional": true,
					"description": "Substitution strings, if the message requires any."
				}
			],
			"returns": {
				"type": "string",
				"description": "Message localized for current locale."
			}
		},
		{
			"name": "getUILanguage",
			"type": "function",
			"description": "Gets the browser UI language of the browser. This is different from $(ref:i18n.getAcceptLanguages) which returns the preferred user languages.",
			"parameters": [],
			"returns": {
				"type": "string",
				"description": "The browser UI language code such as en-US or fr-FR."
			}
		},
		{
			"name": "detectLanguage",
			"type": "function",
			"description": "Detects the language of the provided text using CLD.",
			"async": "callback",
			"parameters": [
				{
					"type": "string",
					"name": "text",
					"description": "User input string to be translated."
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"type": "object",
							"name": "result",
							"description": "LanguageDetectionResult object that holds detected langugae reliability and array of DetectedLanguage",
							"properties": {
								"isReliable": {
									"type": "boolean",
									"description": "CLD detected language reliability"
								},
								"languages": {
									"type": "array",
									"description": "array of detectedLanguage",
									"items": {
										"type": "object",
										"description": "DetectedLanguage object that holds detected ISO language code and its percentage in the input string",
										"properties": {
											"language": {
												"$ref": "#/types/LanguageCode"
											},
											"percentage": {
												"type": "integer",
												"description": "The percentage of the detected language"
											}
										},
										"required": [
											"language",
											"percentage"
										]
									}
								}
							},
							"required": [
								"isReliable",
								"languages"
							]
						}
					]
				}
			]
		}
	],
	"events": [],
	"definitions": {
		"WebExtensionManifest": {
			"properties": {
				"default_locale": {
					"type": "string"
				}
			}
		}
	},
	"refs": {
		"i18n#/definitions/WebExtensionManifest": {
			"namespace": "manifest",
			"type": "WebExtensionManifest"
		}
	},
	"types": {
		"LanguageCode": {
			"type": "string",
			"description": "An ISO language code such as <code>en</code> or <code>fr</code>. For a complete list of languages supported by this method, see <a href='http://src.chromium.org/viewvc/chrome/trunk/src/third_party/cld/languages/internal/languages.cc'>kLanguageInfoTable</a>. For an unknown language, <code>und</code> will be returned, which means that [percentage] of the text is unknown to CLD"
		}
	}
};

/***/ }),
/* 95 */
/***/ (function(module, exports) {

module.exports = {
	"id": "identity",
	"description": "Use the chrome.identity API to get OAuth2 access tokens. ",
	"permissions": [
		"identity"
	],
	"functions": [
		{
			"name": "getAccounts",
			"type": "function",
			"unsupported": true,
			"description": "Retrieves a list of AccountInfo objects describing the accounts present on the profile.",
			"async": "callback",
			"parameters": [
				{
					"name": "callback",
					"type": "function",
					"parameters": [
						{
							"name": "results",
							"type": "array",
							"items": {
								"$ref": "#/types/AccountInfo"
							}
						}
					]
				}
			]
		},
		{
			"name": "getAuthToken",
			"type": "function",
			"unsupported": true,
			"description": "Gets an OAuth2 access token using the client ID and scopes specified in the oauth2 section of manifest.json.",
			"async": "callback",
			"parameters": [
				{
					"name": "details",
					"optional": true,
					"type": "object",
					"properties": {
						"interactive": {
							"type": "boolean"
						},
						"account": {
							"$ref": "#/types/AccountInfo"
						},
						"scopes": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				},
				{
					"name": "callback",
					"optional": true,
					"type": "function",
					"parameters": [
						{
							"name": "results",
							"type": "array",
							"items": {
								"$ref": "#/types/AccountInfo"
							}
						}
					]
				}
			]
		},
		{
			"name": "getProfileUserInfo",
			"type": "function",
			"unsupported": true,
			"description": "Retrieves email address and obfuscated gaia id of the user signed into a profile.",
			"async": "callback",
			"parameters": [
				{
					"name": "callback",
					"type": "function",
					"parameters": [
						{
							"name": "userinfo",
							"type": "object",
							"properties": {
								"email": {
									"type": "string"
								},
								"id": {
									"type": "string"
								}
							},
							"required": [
								"email",
								"id"
							]
						}
					]
				}
			]
		},
		{
			"name": "removeCachedAuthToken",
			"type": "function",
			"unsupported": true,
			"description": "Removes an OAuth2 access token from the Identity API's token cache.",
			"async": "callback",
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"token": {
							"type": "string"
						}
					},
					"required": [
						"token"
					]
				},
				{
					"name": "callback",
					"optional": true,
					"type": "function",
					"parameters": [
						{
							"name": "userinfo",
							"type": "object",
							"properties": {
								"email": {
									"type": "string"
								},
								"id": {
									"type": "string"
								}
							},
							"required": [
								"email",
								"id"
							]
						}
					]
				}
			]
		},
		{
			"name": "launchWebAuthFlow",
			"type": "function",
			"description": "Starts an auth flow at the specified URL.",
			"async": "callback",
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"url": {
							"type": "string"
						},
						"interactive": {
							"type": "boolean"
						}
					},
					"required": [
						"url"
					]
				},
				{
					"name": "callback",
					"type": "function",
					"parameters": [
						{
							"name": " responseUrl",
							"type": "string",
							"optional": true
						}
					]
				}
			]
		},
		{
			"name": "getRedirectURL",
			"type": "function",
			"description": "Generates a redirect URL to be used in |launchWebAuthFlow|.",
			"parameters": [
				{
					"name": " path",
					"type": "string",
					"default": "",
					"optional": true,
					"description": "The path appended to the end of the generated URL. "
				}
			],
			"returns": {
				"string": "path"
			}
		}
	],
	"events": [
		{
			"name": "onSignInChanged",
			"unsupported": true,
			"type": "function",
			"description": "Fired when signin state changes for an account on the user's profile.",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/AccountInfo"
						},
						{
							"name": "account"
						}
					]
				},
				{
					"name": "signedIn",
					"type": "boolean"
				}
			]
		}
	],
	"definitions": {
		"Permission": {
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"identity"
					]
				}
			]
		}
	},
	"refs": {
		"identity#/definitions/Permission": {
			"namespace": "manifest",
			"type": "Permission"
		}
	},
	"types": {
		"AccountInfo": {
			"type": "object",
			"description": "An object encapsulating an OAuth account id.",
			"properties": {
				"id": {
					"type": "string",
					"description": "A unique identifier for the account. This ID will not change for the lifetime of the account. "
				}
			},
			"required": [
				"id"
			]
		}
	}
};

/***/ }),
/* 96 */
/***/ (function(module, exports) {

module.exports = {
	"id": "idle",
	"description": "Use the <code>browser.idle</code> API to detect when the machine's idle state changes.",
	"permissions": [
		"idle"
	],
	"functions": [
		{
			"name": "queryState",
			"type": "function",
			"description": "Returns \"idle\" if the user has not generated any input for a specified number of seconds, or \"active\" otherwise.",
			"async": "callback",
			"parameters": [
				{
					"name": "detectionIntervalInSeconds",
					"type": "integer",
					"minimum": 15,
					"description": "The system is considered idle if detectionIntervalInSeconds seconds have elapsed since the last user input detected."
				},
				{
					"name": "callback",
					"type": "function",
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/IdleState"
								},
								{
									"name": "newState"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "setDetectionInterval",
			"type": "function",
			"description": "Sets the interval, in seconds, used to determine when the system is in an idle state for onStateChanged events. The default interval is 60 seconds.",
			"parameters": [
				{
					"name": "intervalInSeconds",
					"type": "integer",
					"minimum": 15,
					"description": "Threshold, in seconds, used to determine when the system is in an idle state."
				}
			]
		}
	],
	"events": [
		{
			"name": "onStateChanged",
			"type": "function",
			"description": "Fired when the system changes to an active or idle state. The event fires with \"idle\" if the the user has not generated any input for a specified number of seconds, and \"active\" when the user generates input on an idle system.",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/IdleState"
						},
						{
							"name": "newState"
						}
					]
				}
			]
		}
	],
	"definitions": {},
	"refs": {},
	"types": {
		"IdleState": {
			"type": "string",
			"enum": [
				"active",
				"idle"
			]
		}
	}
};

/***/ }),
/* 97 */
/***/ (function(module, exports) {

module.exports = {
	"id": "management",
	"description": "The <code>browser.management</code> API provides ways to manage the list of extensions that are installed and running.",
	"functions": [
		{
			"name": "getAll",
			"type": "function",
			"permissions": [
				"management"
			],
			"unsupported": true,
			"description": "Returns a list of information about installed extensions.",
			"async": "callback",
			"parameters": [
				{
					"name": "callback",
					"type": "function",
					"optional": true,
					"parameters": [
						{
							"type": "array",
							"name": "result",
							"items": {
								"$ref": "#/types/ExtensionInfo"
							}
						}
					]
				}
			]
		},
		{
			"name": "get",
			"type": "function",
			"permissions": [
				"management"
			],
			"unsupported": true,
			"description": "Returns information about the installed extension that has the given ID.",
			"async": "callback",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "manifest#/types/ExtensionID"
						},
						{
							"name": "id",
							"description": "The ID from an item of $(ref:management.ExtensionInfo)."
						}
					]
				},
				{
					"name": "callback",
					"type": "function",
					"optional": true,
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/ExtensionInfo"
								},
								{
									"name": "result"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "getSelf",
			"type": "function",
			"description": "Returns information about the calling extension. Note: This function can be used without requesting the 'management' permission in the manifest.",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/ExtensionInfo"
								},
								{
									"name": "result"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "uninstallSelf",
			"type": "function",
			"description": "Uninstalls the calling extension. Note: This function can be used without requesting the 'management' permission in the manifest.",
			"async": "callback",
			"parameters": [
				{
					"type": "object",
					"name": "options",
					"optional": true,
					"properties": {
						"showConfirmDialog": {
							"type": "boolean",
							"description": "Whether or not a confirm-uninstall dialog should prompt the user. Defaults to false."
						},
						"dialogMessage": {
							"type": "string",
							"description": "The message to display to a user when being asked to confirm removal of the extension."
						}
					}
				},
				{
					"name": "callback",
					"type": "function",
					"optional": true,
					"parameters": []
				}
			]
		}
	],
	"definitions": {
		"Permission": {
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"management"
					]
				}
			]
		}
	},
	"refs": {
		"management#/definitions/Permission": {
			"namespace": "manifest",
			"type": "Permission"
		}
	},
	"types": {
		"IconInfo": {
			"description": "Information about an icon belonging to an extension.",
			"type": "object",
			"properties": {
				"size": {
					"type": "integer",
					"description": "A number representing the width and height of the icon. Likely values include (but are not limited to) 128, 48, 24, and 16."
				},
				"url": {
					"type": "string",
					"description": "The URL for this icon image. To display a grayscale version of the icon (to indicate that an extension is disabled, for example), append <code>?grayscale=true</code> to the URL."
				}
			},
			"required": [
				"size",
				"url"
			]
		},
		"ExtensionDisabledReason": {
			"description": "A reason the item is disabled.",
			"type": "string",
			"enum": [
				"unknown",
				"permissions_increase"
			]
		},
		"ExtensionType": {
			"description": "The type of this extension. Will always be 'extension'.",
			"type": "string",
			"enum": [
				"extension"
			]
		},
		"ExtensionInstallType": {
			"description": "How the extension was installed. One of<br><var>development</var>: The extension was loaded unpacked in developer mode,<br><var>normal</var>: The extension was installed normally via an .xpi file,<br><var>sideload</var>: The extension was installed by other software on the machine,<br><var>other</var>: The extension was installed by other means.",
			"type": "string",
			"enum": [
				"development",
				"normal",
				"sideload",
				"other"
			]
		},
		"ExtensionInfo": {
			"description": "Information about an installed extension.",
			"type": "object",
			"properties": {
				"id": {
					"description": "The extension's unique identifier.",
					"type": "string"
				},
				"name": {
					"description": "The name of this extension.",
					"type": "string"
				},
				"shortName": {
					"description": "A short version of the name of this extension.",
					"type": "string"
				},
				"description": {
					"description": "The description of this extension.",
					"type": "string"
				},
				"version": {
					"description": "The <a href='manifest/version'>version</a> of this extension.",
					"type": "string"
				},
				"versionName": {
					"description": "The <a href='manifest/version#version_name'>version name</a> of this extension if the manifest specified one.",
					"type": "string"
				},
				"mayDisable": {
					"description": "Whether this extension can be disabled or uninstalled by the user.",
					"type": "boolean"
				},
				"enabled": {
					"description": "Whether it is currently enabled or disabled.",
					"type": "boolean"
				},
				"disabledReason": {
					"allOf": [
						{
							"$ref": "#/types/ExtensionDisabledReason"
						},
						{
							"description": "A reason the item is disabled."
						}
					]
				},
				"type": {
					"allOf": [
						{
							"$ref": "#/types/ExtensionType"
						},
						{
							"description": "The type of this extension. Will always return 'extension'."
						}
					]
				},
				"homepageUrl": {
					"description": "The URL of the homepage of this extension.",
					"type": "string"
				},
				"updateUrl": {
					"description": "The update URL of this extension.",
					"type": "string"
				},
				"optionsUrl": {
					"description": "The url for the item's options page, if it has one.",
					"type": "string"
				},
				"icons": {
					"description": "A list of icon information. Note that this just reflects what was declared in the manifest, and the actual image at that url may be larger or smaller than what was declared, so you might consider using explicit width and height attributes on img tags referencing these images. See the <a href='manifest/icons'>manifest documentation on icons</a> for more details.",
					"type": "array",
					"items": {
						"$ref": "#/types/IconInfo"
					}
				},
				"permissions": {
					"description": "Returns a list of API based permissions.",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"hostPermissions": {
					"description": "Returns a list of host based permissions.",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"installType": {
					"allOf": [
						{
							"$ref": "#/types/ExtensionInstallType"
						},
						{
							"description": "How the extension was installed."
						}
					]
				}
			},
			"required": [
				"id",
				"name",
				"shortName",
				"description",
				"version",
				"mayDisable",
				"enabled",
				"type",
				"optionsUrl",
				"permissions",
				"hostPermissions",
				"installType"
			]
		}
	}
};

/***/ }),
/* 98 */
/***/ (function(module, exports) {

module.exports = {
	"id": "notifications",
	"permissions": [
		"notifications"
	],
	"functions": [
		{
			"name": "create",
			"type": "function",
			"description": "Creates and displays a notification.",
			"async": "callback",
			"parameters": [
				{
					"optional": true,
					"type": "string",
					"name": "notificationId",
					"description": "Identifier of the notification. If it is empty, this method generates an id. If it matches an existing notification, this method first clears that notification before proceeding with the create operation."
				},
				{
					"allOf": [
						{
							"$ref": "#/types/CreateNotificationOptions"
						},
						{
							"name": "options",
							"description": "Contents of the notification."
						}
					]
				},
				{
					"optional": true,
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "notificationId",
							"type": "string",
							"description": "The notification id (either supplied or generated) that represents the created notification."
						}
					]
				}
			]
		},
		{
			"name": "update",
			"unsupported": true,
			"type": "function",
			"description": "Updates an existing notification.",
			"async": "callback",
			"parameters": [
				{
					"type": "string",
					"name": "notificationId",
					"description": "The id of the notification to be updated."
				},
				{
					"allOf": [
						{
							"$ref": "#/types/UpdateNotificationOptions"
						},
						{
							"name": "options",
							"description": "Contents of the notification to update to."
						}
					]
				},
				{
					"optional": true,
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "wasUpdated",
							"type": "boolean",
							"description": "Indicates whether a matching notification existed."
						}
					]
				}
			]
		},
		{
			"name": "clear",
			"type": "function",
			"description": "Clears an existing notification.",
			"async": "callback",
			"parameters": [
				{
					"type": "string",
					"name": "notificationId",
					"description": "The id of the notification to be updated."
				},
				{
					"optional": true,
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "wasCleared",
							"type": "boolean",
							"description": "Indicates whether a matching notification existed."
						}
					]
				}
			]
		},
		{
			"name": "getAll",
			"type": "function",
			"description": "Retrieves all the notifications.",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "notifications",
							"type": "object",
							"description": "The set of notifications currently in the system."
						}
					]
				}
			]
		},
		{
			"name": "getPermissionLevel",
			"unsupported": true,
			"type": "function",
			"description": "Retrieves whether the user has enabled notifications from this app or extension.",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/PermissionLevel"
								},
								{
									"name": "level",
									"description": "The current permission level."
								}
							]
						}
					]
				}
			]
		}
	],
	"events": [
		{
			"name": "onClosed",
			"type": "function",
			"description": "Fired when the notification closed, either by the system or by user action.",
			"parameters": [
				{
					"type": "string",
					"name": "notificationId",
					"description": "The notificationId of the closed notification."
				},
				{
					"type": "boolean",
					"name": "byUser",
					"description": "True if the notification was closed by the user."
				}
			]
		},
		{
			"name": "onClicked",
			"type": "function",
			"description": "Fired when the user clicked in a non-button area of the notification.",
			"parameters": [
				{
					"type": "string",
					"name": "notificationId",
					"description": "The notificationId of the clicked notification."
				}
			]
		},
		{
			"name": "onButtonClicked",
			"type": "function",
			"description": "Fired when the  user pressed a button in the notification.",
			"parameters": [
				{
					"type": "string",
					"name": "notificationId",
					"description": "The notificationId of the clicked notification."
				},
				{
					"type": "number",
					"name": "buttonIndex",
					"description": "The index of the button clicked by the user."
				}
			]
		},
		{
			"name": "onPermissionLevelChanged",
			"unsupported": true,
			"type": "function",
			"description": "Fired when the user changes the permission level.",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/PermissionLevel"
						},
						{
							"name": "level",
							"description": "The new permission level."
						}
					]
				}
			]
		},
		{
			"name": "onShowSettings",
			"unsupported": true,
			"type": "function",
			"description": "Fired when the user clicked on a link for the app's notification settings.",
			"parameters": []
		}
	],
	"definitions": {},
	"refs": {},
	"types": {
		"TemplateType": {
			"type": "string",
			"enum": [
				"basic",
				"image",
				"list",
				"progress"
			]
		},
		"PermissionLevel": {
			"type": "string",
			"enum": [
				"granted",
				"denied"
			]
		},
		"NotificationItem": {
			"type": "object",
			"properties": {
				"title": {
					"description": "Title of one item of a list notification.",
					"type": "string"
				},
				"message": {
					"description": "Additional details about this item.",
					"type": "string"
				}
			},
			"required": [
				"title",
				"message"
			]
		},
		"CreateNotificationOptions": {
			"type": "object",
			"properties": {
				"type": {
					"allOf": [
						{
							"$ref": "#/types/TemplateType"
						},
						{
							"description": "Which type of notification to display."
						}
					]
				},
				"iconUrl": {
					"description": "A URL to the sender's avatar, app icon, or a thumbnail for image notifications.",
					"type": "string"
				},
				"appIconMaskUrl": {
					"description": "A URL to the app icon mask.",
					"type": "string"
				},
				"title": {
					"description": "Title of the notification (e.g. sender name for email).",
					"type": "string"
				},
				"message": {
					"description": "Main notification content.",
					"type": "string"
				},
				"contextMessage": {
					"description": "Alternate notification content with a lower-weight font.",
					"type": "string"
				},
				"priority": {
					"description": "Priority ranges from -2 to 2. -2 is lowest priority. 2 is highest. Zero is default.",
					"type": "integer",
					"minimum": -2,
					"maximum": 2
				},
				"eventTime": {
					"description": "A timestamp associated with the notification, in milliseconds past the epoch.",
					"type": "number"
				},
				"buttons": {
					"unsupported": true,
					"description": "Text and icons for up to two notification action buttons.",
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"title": {
								"type": "string"
							},
							"iconUrl": {
								"type": "string"
							}
						},
						"required": [
							"title"
						]
					}
				},
				"imageUrl": {
					"description": "A URL to the image thumbnail for image-type notifications.",
					"type": "string"
				},
				"items": {
					"description": "Items for multi-item notifications.",
					"type": "array",
					"items": {
						"$ref": "#/types/NotificationItem"
					}
				},
				"progress": {
					"description": "Current progress ranges from 0 to 100.",
					"type": "integer",
					"minimum": 0,
					"maximum": 100
				},
				"isClickable": {
					"description": "Whether to show UI indicating that the app will visibly respond to clicks on the body of a notification.",
					"type": "boolean"
				}
			},
			"required": [
				"type",
				"title",
				"message"
			]
		},
		"UpdateNotificationOptions": {
			"type": "object",
			"properties": {
				"type": {
					"allOf": [
						{
							"$ref": "#/types/TemplateType"
						},
						{
							"description": "Which type of notification to display."
						}
					]
				},
				"iconUrl": {
					"description": "A URL to the sender's avatar, app icon, or a thumbnail for image notifications.",
					"type": "string"
				},
				"appIconMaskUrl": {
					"description": "A URL to the app icon mask.",
					"type": "string"
				},
				"title": {
					"description": "Title of the notification (e.g. sender name for email).",
					"type": "string"
				},
				"message": {
					"description": "Main notification content.",
					"type": "string"
				},
				"contextMessage": {
					"description": "Alternate notification content with a lower-weight font.",
					"type": "string"
				},
				"priority": {
					"description": "Priority ranges from -2 to 2. -2 is lowest priority. 2 is highest. Zero is default.",
					"type": "integer",
					"minimum": -2,
					"maximum": 2
				},
				"eventTime": {
					"description": "A timestamp associated with the notification, in milliseconds past the epoch.",
					"type": "number"
				},
				"buttons": {
					"unsupported": true,
					"description": "Text and icons for up to two notification action buttons.",
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"title": {
								"type": "string"
							},
							"iconUrl": {
								"type": "string"
							}
						},
						"required": [
							"title"
						]
					}
				},
				"imageUrl": {
					"description": "A URL to the image thumbnail for image-type notifications.",
					"type": "string"
				},
				"items": {
					"description": "Items for multi-item notifications.",
					"type": "array",
					"items": {
						"$ref": "#/types/NotificationItem"
					}
				},
				"progress": {
					"description": "Current progress ranges from 0 to 100.",
					"type": "integer",
					"minimum": 0,
					"maximum": 100
				},
				"isClickable": {
					"description": "Whether to show UI indicating that the app will visibly respond to clicks on the body of a notification.",
					"type": "boolean"
				}
			}
		}
	}
};

/***/ }),
/* 99 */
/***/ (function(module, exports) {

module.exports = {
	"id": "omnibox",
	"description": "The omnibox API allows you to register a keyword with Firefox's address bar.",
	"permissions": [
		"manifest:omnibox"
	],
	"functions": [
		{
			"name": "setDefaultSuggestion",
			"type": "function",
			"description": "Sets the description and styling for the default suggestion. The default suggestion is the text that is displayed in the first suggestion row underneath the URL bar.",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/DefaultSuggestResult"
						},
						{
							"name": "suggestion",
							"description": "A partial SuggestResult object, without the 'content' parameter."
						}
					]
				}
			]
		}
	],
	"events": [
		{
			"name": "onInputStarted",
			"type": "function",
			"description": "User has started a keyword input session by typing the extension's keyword. This is guaranteed to be sent exactly once per input session, and before any onInputChanged events.",
			"parameters": []
		},
		{
			"name": "onInputChanged",
			"type": "function",
			"description": "User has changed what is typed into the omnibox.",
			"parameters": [
				{
					"type": "string",
					"name": "text"
				},
				{
					"name": "suggest",
					"type": "function",
					"description": "A callback passed to the onInputChanged event used for sending suggestions back to the browser.",
					"parameters": [
						{
							"name": "suggestResults",
							"type": "array",
							"description": "Array of suggest results",
							"items": {
								"$ref": "#/types/SuggestResult"
							}
						}
					]
				}
			]
		},
		{
			"name": "onInputEntered",
			"type": "function",
			"description": "User has accepted what is typed into the omnibox.",
			"parameters": [
				{
					"type": "string",
					"name": "text"
				},
				{
					"allOf": [
						{
							"$ref": "#/types/OnInputEnteredDisposition"
						},
						{
							"name": "disposition"
						}
					]
				}
			]
		},
		{
			"name": "onInputCancelled",
			"type": "function",
			"description": "User has ended the keyword input session without accepting the input.",
			"parameters": []
		}
	],
	"definitions": {
		"WebExtensionManifest": {
			"properties": {
				"omnibox": {
					"type": "object",
					"properties": {
						"keyword": {
							"type": "string",
							"pattern": "^[^?\\s:]([^\\s:]*[^/\\s:])?$"
						}
					},
					"required": [
						"keyword"
					]
				}
			}
		}
	},
	"refs": {
		"omnibox#/definitions/WebExtensionManifest": {
			"namespace": "manifest",
			"type": "WebExtensionManifest"
		}
	},
	"types": {
		"DescriptionStyleType": {
			"type": "string",
			"description": "The style type.",
			"enum": [
				"url",
				"match",
				"dim"
			]
		},
		"OnInputEnteredDisposition": {
			"type": "string",
			"enum": [
				"currentTab",
				"newForegroundTab",
				"newBackgroundTab"
			],
			"description": "The window disposition for the omnibox query. This is the recommended context to display results. For example, if the omnibox command is to navigate to a certain URL, a disposition of 'newForegroundTab' means the navigation should take place in a new selected tab."
		},
		"SuggestResult": {
			"type": "object",
			"description": "A suggest result.",
			"properties": {
				"content": {
					"type": "string",
					"minLength": 1,
					"description": "The text that is put into the URL bar, and that is sent to the extension when the user chooses this entry."
				},
				"description": {
					"type": "string",
					"minLength": 1,
					"description": "The text that is displayed in the URL dropdown. Can contain XML-style markup for styling. The supported tags are 'url' (for a literal URL), 'match' (for highlighting text that matched what the user's query), and 'dim' (for dim helper text). The styles can be nested, eg. <dim><match>dimmed match</match></dim>. You must escape the five predefined entities to display them as text: stackoverflow.com/a/1091953/89484 "
				},
				"descriptionStyles": {
					"unsupported": true,
					"type": "array",
					"description": "An array of style ranges for the description, as provided by the extension.",
					"items": {
						"type": "object",
						"description": "The style ranges for the description, as provided by the extension.",
						"properties": {
							"offset": {
								"type": "integer"
							},
							"type": {
								"allOf": [
									{
										"$ref": "#/types/DescriptionStyleType"
									},
									{
										"description": "The style type"
									}
								]
							},
							"length": {
								"type": "integer"
							}
						},
						"required": [
							"offset",
							"type"
						]
					}
				},
				"descriptionStylesRaw": {
					"unsupported": true,
					"type": "array",
					"description": "An array of style ranges for the description, as provided by ToValue().",
					"items": {
						"type": "object",
						"description": "The style ranges for the description, as provided by ToValue().",
						"properties": {
							"offset": {
								"type": "integer"
							},
							"type": {
								"type": "integer"
							}
						},
						"required": [
							"offset",
							"type"
						]
					}
				}
			},
			"required": [
				"content",
				"description"
			]
		},
		"DefaultSuggestResult": {
			"type": "object",
			"description": "A suggest result.",
			"properties": {
				"description": {
					"type": "string",
					"minLength": 1,
					"description": "The text that is displayed in the URL dropdown."
				},
				"descriptionStyles": {
					"unsupported": true,
					"type": "array",
					"description": "An array of style ranges for the description, as provided by the extension.",
					"items": {
						"type": "object",
						"description": "The style ranges for the description, as provided by the extension.",
						"properties": {
							"offset": {
								"type": "integer"
							},
							"type": {
								"allOf": [
									{
										"$ref": "#/types/DescriptionStyleType"
									},
									{
										"description": "The style type"
									}
								]
							},
							"length": {
								"type": "integer"
							}
						},
						"required": [
							"offset",
							"type"
						]
					}
				},
				"descriptionStylesRaw": {
					"unsupported": true,
					"type": "array",
					"description": "An array of style ranges for the description, as provided by ToValue().",
					"items": {
						"type": "object",
						"description": "The style ranges for the description, as provided by ToValue().",
						"properties": {
							"offset": {
								"type": "integer"
							},
							"type": {
								"type": "integer"
							}
						},
						"required": [
							"offset",
							"type"
						]
					}
				}
			},
			"required": [
				"description"
			]
		}
	}
};

/***/ }),
/* 100 */
/***/ (function(module, exports) {

module.exports = {
	"id": "pageAction",
	"description": "Use the <code>browser.pageAction</code> API to put icons inside the address bar. Page actions represent actions that can be taken on the current page, but that aren't applicable to all pages.",
	"permissions": [
		"manifest:page_action"
	],
	"functions": [
		{
			"name": "show",
			"type": "function",
			"async": "callback",
			"description": "Shows the page action. The page action is shown whenever the tab is selected.",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0,
					"description": "The id of the tab for which you want to modify the page action."
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "hide",
			"type": "function",
			"async": "callback",
			"description": "Hides the page action.",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0,
					"description": "The id of the tab for which you want to modify the page action."
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "setTitle",
			"type": "function",
			"description": "Sets the title of the page action. This is displayed in a tooltip over the page action.",
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"tabId": {
							"type": "integer",
							"minimum": 0,
							"description": "The id of the tab for which you want to modify the page action."
						},
						"title": {
							"type": "string",
							"description": "The tooltip string."
						}
					},
					"required": [
						"tabId",
						"title"
					]
				}
			]
		},
		{
			"name": "getTitle",
			"type": "function",
			"description": "Gets the title of the page action.",
			"async": "callback",
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"tabId": {
							"type": "integer",
							"description": "Specify the tab to get the title from."
						}
					},
					"required": [
						"tabId"
					]
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "result",
							"type": "string"
						}
					]
				}
			]
		},
		{
			"name": "setIcon",
			"type": "function",
			"description": "Sets the icon for the page action. The icon can be specified either as the path to an image file or as the pixel data from a canvas element, or as dictionary of either one of those. Either the <b>path</b> or the <b>imageData</b> property must be specified.",
			"async": "callback",
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"tabId": {
							"type": "integer",
							"minimum": 0,
							"description": "The id of the tab for which you want to modify the page action."
						},
						"imageData": {
							"anyOf": [
								{
									"$ref": "#/types/ImageDataType"
								},
								{
									"type": "object",
									"additionalProperties": {
										"$ref": "#/types/ImageDataType"
									}
								}
							],
							"description": "Either an ImageData object or a dictionary {size -> ImageData} representing icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals <code>scale</code>, then image with size <code>scale</code> * 19 will be selected. Initially only scales 1 and 2 will be supported. At least one image must be specified. Note that 'details.imageData = foo' is equivalent to 'details.imageData = {'19': foo}'"
						},
						"path": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "object",
									"additionalProperties": {
										"type": "string"
									}
								}
							],
							"description": "Either a relative image path or a dictionary {size -> relative image path} pointing to icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals <code>scale</code>, then image with size <code>scale</code> * 19 will be selected. Initially only scales 1 and 2 will be supported. At least one image must be specified. Note that 'details.path = foo' is equivalent to 'details.imageData = {'19': foo}'"
						}
					},
					"required": [
						"tabId"
					]
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "setPopup",
			"type": "function",
			"description": "Sets the html document to be opened as a popup when the user clicks on the page action's icon.",
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"tabId": {
							"type": "integer",
							"minimum": 0,
							"description": "The id of the tab for which you want to modify the page action."
						},
						"popup": {
							"type": "string",
							"description": "The html file to show in a popup.  If set to the empty string (''), no popup is shown."
						}
					},
					"required": [
						"tabId",
						"popup"
					]
				}
			]
		},
		{
			"name": "getPopup",
			"type": "function",
			"description": "Gets the html document set as the popup for this page action.",
			"async": "callback",
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"tabId": {
							"type": "integer",
							"description": "Specify the tab to get the popup from."
						}
					},
					"required": [
						"tabId"
					]
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "result",
							"type": "string"
						}
					]
				}
			]
		}
	],
	"events": [
		{
			"name": "onClicked",
			"type": "function",
			"description": "Fired when a page action icon is clicked.  This event will not fire if the page action has a popup.",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "tabs#/types/Tab"
						},
						{
							"name": "tab"
						}
					]
				}
			]
		}
	],
	"definitions": {
		"WebExtensionManifest": {
			"properties": {
				"page_action": {
					"type": "object",
					"properties": {
						"default_title": {
							"type": "string",
							"preprocess": "localize"
						},
						"default_icon": {
							"$ref": "manifest#/types/IconPath"
						},
						"default_popup": {
							"type": "string",
							"format": "relativeUrl",
							"preprocess": "localize"
						},
						"browser_style": {
							"type": "boolean"
						}
					}
				}
			}
		}
	},
	"refs": {
		"pageAction#/definitions/WebExtensionManifest": {
			"namespace": "manifest",
			"type": "WebExtensionManifest"
		}
	},
	"types": {
		"ImageDataType": {
			"type": "object",
			"isInstanceOf": "ImageData",
			"additionalProperties": {},
			"postprocess": "convertImageDataToURL",
			"description": "Pixel data for an image. Must be an ImageData object (for example, from a <code>canvas</code> element)."
		}
	}
};

/***/ }),
/* 101 */
/***/ (function(module, exports) {

module.exports = {
	"id": "privacy",
	"permissions": [
		"privacy"
	],
	"properties": {
		"network": {
			"description": "Use the <code>browser.privacy</code> API to control usage of the features in the browser that can affect a user's privacy.",
			"permissions": [
				"privacy"
			],
			"properties": {
				"networkPredictionEnabled": {
					"allOf": [
						{
							"$ref": "types#/types/Setting"
						},
						{
							"description": "If enabled, the browser attempts to speed up your web browsing experience by pre-resolving DNS entries, prerendering sites (<code>&lt;link rel='prefetch' ...&gt;</code>), and preemptively opening TCP and SSL connections to servers.  This preference's value is a boolean, defaulting to <code>true</code>."
						}
					]
				},
				"webRTCIPHandlingPolicy": {
					"allOf": [
						{
							"$ref": "types#/types/Setting"
						},
						{
							"description": "Allow users to specify the media performance/privacy tradeoffs which impacts how WebRTC traffic will be routed and how much local address information is exposed. This preference's value is of type IPHandlingPolicy, defaulting to <code>default</code>."
						}
					]
				}
			},
			"required": [
				"networkPredictionEnabled",
				"webRTCIPHandlingPolicy"
			]
		},
		"websites": {
			"description": "Use the <code>browser.privacy</code> API to control usage of the features in the browser that can affect a user's privacy.",
			"permissions": [
				"privacy"
			],
			"properties": {
				"thirdPartyCookiesAllowed": {
					"allOf": [
						{
							"$ref": "types#/types/Setting"
						},
						{
							"description": "If disabled, the browser blocks third-party sites from setting cookies. The value of this preference is of type boolean, and the default value is <code>true</code>.",
							"unsupported": true
						}
					]
				},
				"hyperlinkAuditingEnabled": {
					"allOf": [
						{
							"$ref": "types#/types/Setting"
						},
						{
							"description": "If enabled, the browser sends auditing pings when requested by a website (<code>&lt;a ping&gt;</code>). The value of this preference is of type boolean, and the default value is <code>true</code>."
						}
					]
				},
				"referrersEnabled": {
					"allOf": [
						{
							"$ref": "types#/types/Setting"
						},
						{
							"description": "If enabled, the browser sends <code>referer</code> headers with your requests. Yes, the name of this preference doesn't match the misspelled header. No, we're not going to change it. The value of this preference is of type boolean, and the default value is <code>true</code>.",
							"unsupported": true
						}
					]
				},
				"protectedContentEnabled": {
					"allOf": [
						{
							"$ref": "types#/types/Setting"
						},
						{
							"description": "<strong>Available on Windows and ChromeOS only</strong>: If enabled, the browser provides a unique ID to plugins in order to run protected content. The value of this preference is of type boolean, and the default value is <code>true</code>.",
							"unsupported": true
						}
					]
				}
			},
			"required": [
				"thirdPartyCookiesAllowed",
				"hyperlinkAuditingEnabled",
				"referrersEnabled",
				"protectedContentEnabled"
			]
		}
	},
	"definitions": {
		"Permission": {
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"privacy"
					]
				}
			]
		}
	},
	"refs": {
		"privacy#/definitions/Permission": {
			"namespace": "manifest",
			"type": "Permission"
		}
	},
	"types": {
		"IPHandlingPolicy": {
			"type": "string",
			"enum": [
				"default",
				"default_public_and_private_interfaces",
				"default_public_interface_only",
				"disable_non_proxied_udp"
			],
			"description": "The IP handling policy of WebRTC."
		}
	}
};

/***/ }),
/* 102 */
/***/ (function(module, exports) {

module.exports = {
	"id": "runtime",
	"allowedContexts": [
		"content",
		"devtools"
	],
	"description": "Use the <code>browser.runtime</code> API to retrieve the background page, return details about the manifest, and listen for and respond to events in the app or extension lifecycle. You can also use this API to convert the relative path of URLs to fully-qualified URLs.",
	"properties": {
		"lastError": {
			"type": "object",
			"optional": true,
			"allowedContexts": [
				"content",
				"devtools"
			],
			"description": "This will be defined during an API method callback if there was an error",
			"properties": {
				"message": {
					"type": "string",
					"description": "Details about the error which occurred."
				}
			},
			"additionalProperties": {}
		},
		"id": {
			"type": "string",
			"allowedContexts": [
				"content",
				"devtools"
			],
			"description": "The ID of the extension/app."
		}
	},
	"functions": [
		{
			"name": "getBackgroundPage",
			"type": "function",
			"description": "Retrieves the JavaScript 'window' object for the background page running inside the current extension/app. If the background page is an event page, the system will ensure it is loaded before calling the callback. If there is no background page, an error is set.",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "backgroundPage",
							"optional": true,
							"type": "object",
							"isInstanceOf": "Window",
							"additionalProperties": {},
							"description": "The JavaScript 'window' object for the background page."
						}
					]
				}
			]
		},
		{
			"name": "openOptionsPage",
			"type": "function",
			"description": "<p>Open your Extension's options page, if possible.</p><p>The precise behavior may depend on your manifest's <code>$(topic:optionsV2)[options_ui]</code> or <code>$(topic:options)[options_page]</code> key, or what the browser happens to support at the time.</p><p>If your Extension does not declare an options page, or the browser failed to create one for some other reason, the callback will set $(ref:lastError).</p>",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"parameters": [],
					"optional": true
				}
			]
		},
		{
			"name": "getManifest",
			"allowedContexts": [
				"content",
				"devtools"
			],
			"description": "Returns details about the app or extension from the manifest. The object returned is a serialization of the full $(topic:manifest)[manifest file].",
			"type": "function",
			"parameters": [],
			"returns": {
				"type": "object",
				"properties": {},
				"additionalProperties": {},
				"description": "The manifest details."
			}
		},
		{
			"name": "getURL",
			"type": "function",
			"allowedContexts": [
				"content",
				"devtools"
			],
			"description": "Converts a relative path within an app/extension install directory to a fully-qualified URL.",
			"parameters": [
				{
					"type": "string",
					"name": "path",
					"description": "A path to a resource within an app/extension expressed relative to its install directory."
				}
			],
			"returns": {
				"type": "string",
				"description": "The fully-qualified URL to the resource."
			}
		},
		{
			"name": "setUninstallURL",
			"type": "function",
			"description": "Sets the URL to be visited upon uninstallation. This may be used to clean up server-side data, do analytics, and implement surveys. Maximum 255 characters.",
			"async": "callback",
			"parameters": [
				{
					"type": "string",
					"name": "url",
					"maxLength": 255,
					"description": "URL to be opened after the extension is uninstalled. This URL must have an http: or https: scheme. Set an empty string to not open a new tab upon uninstallation."
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"description": "Called when the uninstall URL is set. If the given URL is invalid, $(ref:runtime.lastError) will be set.",
					"parameters": []
				}
			]
		},
		{
			"name": "reload",
			"description": "Reloads the app or extension.",
			"type": "function",
			"parameters": []
		},
		{
			"name": "requestUpdateCheck",
			"unsupported": true,
			"type": "function",
			"description": "Requests an update check for this app/extension.",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/RequestUpdateCheckStatus"
								},
								{
									"name": "status",
									"description": "Result of the update check."
								}
							]
						},
						{
							"name": "details",
							"type": "object",
							"optional": true,
							"properties": {
								"version": {
									"type": "string",
									"description": "The version of the available update."
								}
							},
							"description": "If an update is available, this contains more information about the available update.",
							"required": [
								"version"
							]
						}
					]
				}
			]
		},
		{
			"name": "restart",
			"unsupported": true,
			"description": "Restart the device when the app runs in kiosk mode. Otherwise, it's no-op.",
			"type": "function",
			"parameters": []
		},
		{
			"name": "connect",
			"type": "function",
			"allowedContexts": [
				"content",
				"devtools"
			],
			"description": "Attempts to connect to connect listeners within an extension/app (such as the background page), or other extensions/apps. This is useful for content scripts connecting to their extension processes, inter-app/extension communication, and $(topic:manifest/externally_connectable)[web messaging]. Note that this does not connect to any listeners in a content script. Extensions may connect to content scripts embedded in tabs via $(ref:tabs.connect).",
			"parameters": [
				{
					"type": "string",
					"name": "extensionId",
					"optional": true,
					"description": "The ID of the extension or app to connect to. If omitted, a connection will be attempted with your own extension. Required if sending messages from a web page for $(topic:manifest/externally_connectable)[web messaging]."
				},
				{
					"type": "object",
					"name": "connectInfo",
					"properties": {
						"name": {
							"type": "string",
							"description": "Will be passed into onConnect for processes that are listening for the connection event."
						},
						"includeTlsChannelId": {
							"type": "boolean",
							"description": "Whether the TLS channel ID will be passed into onConnectExternal for processes that are listening for the connection event."
						}
					},
					"optional": true
				}
			],
			"returns": {
				"allOf": [
					{
						"$ref": "#/types/Port"
					},
					{
						"description": "Port through which messages can be sent and received. The port's $(ref:runtime.Port onDisconnect) event is fired if the extension/app does not exist. "
					}
				]
			}
		},
		{
			"name": "connectNative",
			"type": "function",
			"description": "Connects to a native application in the host machine.",
			"permissions": [
				"nativeMessaging"
			],
			"parameters": [
				{
					"type": "string",
					"name": "application",
					"description": "The name of the registered application to connect to."
				}
			],
			"returns": {
				"allOf": [
					{
						"$ref": "#/types/Port"
					},
					{
						"description": "Port through which messages can be sent and received with the application"
					}
				]
			}
		},
		{
			"name": "sendMessage",
			"type": "function",
			"allowAmbiguousOptionalArguments": true,
			"allowedContexts": [
				"content",
				"devtools"
			],
			"description": "Sends a single message to event listeners within your extension/app or a different extension/app. Similar to $(ref:runtime.connect) but only sends a single message, with an optional response. If sending to your extension, the $(ref:runtime.onMessage) event will be fired in each page, or $(ref:runtime.onMessageExternal), if a different extension. Note that extensions cannot send messages to content scripts using this method. To send messages to content scripts, use $(ref:tabs.sendMessage).",
			"async": "responseCallback",
			"parameters": [
				{
					"type": "string",
					"name": "extensionId",
					"optional": true,
					"description": "The ID of the extension/app to send the message to. If omitted, the message will be sent to your own extension/app. Required if sending messages from a web page for $(topic:manifest/externally_connectable)[web messaging]."
				},
				{
					"name": "message"
				},
				{
					"type": "object",
					"name": "options",
					"properties": {
						"includeTlsChannelId": {
							"type": "boolean",
							"description": "Whether the TLS channel ID will be passed into onMessageExternal for processes that are listening for the connection event."
						}
					},
					"optional": true
				},
				{
					"type": "function",
					"name": "responseCallback",
					"optional": true,
					"parameters": [
						{
							"name": "response",
							"description": "The JSON response object sent by the handler of the message. If an error occurs while connecting to the extension, the callback will be called with no arguments and $(ref:runtime.lastError) will be set to the error message."
						}
					]
				}
			]
		},
		{
			"name": "sendNativeMessage",
			"type": "function",
			"description": "Send a single message to a native application.",
			"permissions": [
				"nativeMessaging"
			],
			"async": "responseCallback",
			"parameters": [
				{
					"name": "application",
					"description": "The name of the native messaging host.",
					"type": "string"
				},
				{
					"name": "message",
					"description": "The message that will be passed to the native messaging host."
				},
				{
					"type": "function",
					"name": "responseCallback",
					"optional": true,
					"parameters": [
						{
							"name": "response",
							"description": "The response message sent by the native messaging host. If an error occurs while connecting to the native messaging host, the callback will be called with no arguments and $(ref:runtime.lastError) will be set to the error message."
						}
					]
				}
			]
		},
		{
			"name": "getBrowserInfo",
			"type": "function",
			"description": "Returns information about the current browser.",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"description": "Called with results",
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/BrowserInfo"
								},
								{
									"name": "browserInfo"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "getPlatformInfo",
			"type": "function",
			"description": "Returns information about the current platform.",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"description": "Called with results",
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/PlatformInfo"
								},
								{
									"name": "platformInfo"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "getPackageDirectoryEntry",
			"unsupported": true,
			"type": "function",
			"description": "Returns a DirectoryEntry for the package directory.",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "directoryEntry",
							"type": "object",
							"additionalProperties": {},
							"isInstanceOf": "DirectoryEntry"
						}
					]
				}
			]
		}
	],
	"events": [
		{
			"name": "onStartup",
			"type": "function",
			"description": "Fired when a profile that has this extension installed first starts up. This event is not fired for incognito profiles."
		},
		{
			"name": "onInstalled",
			"type": "function",
			"description": "Fired when the extension is first installed, when the extension is updated to a new version, and when the browser is updated to a new version.",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"properties": {
						"reason": {
							"allOf": [
								{
									"$ref": "#/types/OnInstalledReason"
								},
								{
									"description": "The reason that this event is being dispatched."
								}
							]
						},
						"previousVersion": {
							"type": "string",
							"unsupported": true,
							"description": "Indicates the previous version of the extension, which has just been updated. This is present only if 'reason' is 'update'."
						},
						"id": {
							"type": "string",
							"unsupported": true,
							"description": "Indicates the ID of the imported shared module extension which updated. This is present only if 'reason' is 'shared_module_update'."
						}
					},
					"required": [
						"reason"
					]
				}
			]
		},
		{
			"name": "onSuspend",
			"unsupported": true,
			"type": "function",
			"description": "Sent to the event page just before it is unloaded. This gives the extension opportunity to do some clean up. Note that since the page is unloading, any asynchronous operations started while handling this event are not guaranteed to complete. If more activity for the event page occurs before it gets unloaded the onSuspendCanceled event will be sent and the page won't be unloaded. "
		},
		{
			"name": "onSuspendCanceled",
			"unsupported": true,
			"type": "function",
			"description": "Sent after onSuspend to indicate that the app won't be unloaded after all."
		},
		{
			"name": "onUpdateAvailable",
			"type": "function",
			"description": "Fired when an update is available, but isn't installed immediately because the app is currently running. If you do nothing, the update will be installed the next time the background page gets unloaded, if you want it to be installed sooner you can explicitly call $(ref:runtime.reload). If your extension is using a persistent background page, the background page of course never gets unloaded, so unless you call $(ref:runtime.reload) manually in response to this event the update will not get installed until the next time the browser itself restarts. If no handlers are listening for this event, and your extension has a persistent background page, it behaves as if $(ref:runtime.reload) is called in response to this event.",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"properties": {
						"version": {
							"type": "string",
							"description": "The version number of the available update."
						}
					},
					"additionalProperties": {},
					"description": "The manifest details of the available update.",
					"required": [
						"version"
					]
				}
			]
		},
		{
			"name": "onBrowserUpdateAvailable",
			"unsupported": true,
			"type": "function",
			"description": "Fired when an update for the browser is available, but isn't installed immediately because a browser restart is required.",
			"deprecated": "Please use $(ref:runtime.onRestartRequired).",
			"parameters": []
		},
		{
			"name": "onConnect",
			"type": "function",
			"allowedContexts": [
				"content",
				"devtools"
			],
			"description": "Fired when a connection is made from either an extension process or a content script.",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/Port"
						},
						{
							"name": "port"
						}
					]
				}
			]
		},
		{
			"name": "onConnectExternal",
			"type": "function",
			"description": "Fired when a connection is made from another extension.",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/Port"
						},
						{
							"name": "port"
						}
					]
				}
			]
		},
		{
			"name": "onMessage",
			"type": "function",
			"allowedContexts": [
				"content",
				"devtools"
			],
			"description": "Fired when a message is sent from either an extension process or a content script.",
			"parameters": [
				{
					"name": "message",
					"optional": true,
					"description": "The message sent by the calling script."
				},
				{
					"allOf": [
						{
							"$ref": "#/types/MessageSender"
						},
						{
							"name": "sender"
						}
					]
				},
				{
					"name": "sendResponse",
					"type": "function",
					"description": "Function to call (at most once) when you have a response. The argument should be any JSON-ifiable object. If you have more than one <code>onMessage</code> listener in the same document, then only one may send a response. This function becomes invalid when the event listener returns, unless you return true from the event listener to indicate you wish to send a response asynchronously (this will keep the message channel open to the other end until <code>sendResponse</code> is called)."
				}
			],
			"returns": {
				"type": "boolean",
				"optional": true,
				"description": "Return true from the event listener if you wish to call <code>sendResponse</code> after the event listener returns."
			}
		},
		{
			"name": "onMessageExternal",
			"type": "function",
			"description": "Fired when a message is sent from another extension/app. Cannot be used in a content script.",
			"parameters": [
				{
					"name": "message",
					"optional": true,
					"description": "The message sent by the calling script."
				},
				{
					"allOf": [
						{
							"$ref": "#/types/MessageSender"
						},
						{
							"name": "sender"
						}
					]
				},
				{
					"name": "sendResponse",
					"type": "function",
					"description": "Function to call (at most once) when you have a response. The argument should be any JSON-ifiable object. If you have more than one <code>onMessage</code> listener in the same document, then only one may send a response. This function becomes invalid when the event listener returns, unless you return true from the event listener to indicate you wish to send a response asynchronously (this will keep the message channel open to the other end until <code>sendResponse</code> is called)."
				}
			],
			"returns": {
				"type": "boolean",
				"optional": true,
				"description": "Return true from the event listener if you wish to call <code>sendResponse</code> after the event listener returns."
			}
		},
		{
			"name": "onRestartRequired",
			"unsupported": true,
			"type": "function",
			"description": "Fired when an app or the device that it runs on needs to be restarted. The app should close all its windows at its earliest convenient time to let the restart to happen. If the app does nothing, a restart will be enforced after a 24-hour grace period has passed. Currently, this event is only fired for Chrome OS kiosk apps.",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/OnRestartRequiredReason"
						},
						{
							"name": "reason",
							"description": "The reason that the event is being dispatched."
						}
					]
				}
			]
		}
	],
	"definitions": {
		"Permission": {
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"nativeMessaging"
					]
				}
			]
		}
	},
	"refs": {
		"runtime#/definitions/Permission": {
			"namespace": "manifest",
			"type": "Permission"
		}
	},
	"types": {
		"Port": {
			"type": "object",
			"allowedContexts": [
				"content",
				"devtools"
			],
			"description": "An object which allows two way communication with other pages.",
			"properties": {
				"name": {
					"type": "string"
				},
				"disconnect": {
					"type": "function"
				},
				"onDisconnect": {
					"$ref": "events#/types/Event"
				},
				"onMessage": {
					"$ref": "events#/types/Event"
				},
				"postMessage": {
					"type": "function"
				},
				"sender": {
					"allOf": [
						{
							"$ref": "#/types/MessageSender"
						},
						{
							"description": "This property will <b>only</b> be present on ports passed to onConnect/onConnectExternal listeners."
						}
					]
				}
			},
			"additionalProperties": {},
			"required": [
				"name",
				"disconnect",
				"onDisconnect",
				"onMessage",
				"postMessage"
			]
		},
		"MessageSender": {
			"type": "object",
			"allowedContexts": [
				"content",
				"devtools"
			],
			"description": "An object containing information about the script context that sent a message or request.",
			"properties": {
				"tab": {
					"allOf": [
						{
							"$ref": "tabs#/types/Tab"
						},
						{
							"description": "The $(ref:tabs.Tab) which opened the connection, if any. This property will <strong>only</strong> be present when the connection was opened from a tab (including content scripts), and <strong>only</strong> if the receiver is an extension, not an app."
						}
					]
				},
				"frameId": {
					"type": "integer",
					"description": "The $(topic:frame_ids)[frame] that opened the connection. 0 for top-level frames, positive for child frames. This will only be set when <code>tab</code> is set."
				},
				"id": {
					"type": "string",
					"description": "The ID of the extension or app that opened the connection, if any."
				},
				"url": {
					"type": "string",
					"description": "The URL of the page or frame that opened the connection. If the sender is in an iframe, it will be iframe's URL not the URL of the page which hosts it."
				},
				"tlsChannelId": {
					"unsupported": true,
					"type": "string",
					"description": "The TLS channel ID of the page or frame that opened the connection, if requested by the extension or app, and if available."
				}
			}
		},
		"PlatformOs": {
			"type": "string",
			"allowedContexts": [
				"content",
				"devtools"
			],
			"description": "The operating system the browser is running on.",
			"enum": [
				"mac",
				"win",
				"android",
				"cros",
				"linux",
				"openbsd"
			]
		},
		"PlatformArch": {
			"type": "string",
			"enum": [
				"arm",
				"x86-32",
				"x86-64"
			],
			"allowedContexts": [
				"content",
				"devtools"
			],
			"description": "The machine's processor architecture."
		},
		"PlatformInfo": {
			"type": "object",
			"allowedContexts": [
				"content",
				"devtools"
			],
			"description": "An object containing information about the current platform.",
			"properties": {
				"os": {
					"allOf": [
						{
							"$ref": "#/types/PlatformOs"
						},
						{
							"description": "The operating system the browser is running on."
						}
					]
				},
				"arch": {
					"allOf": [
						{
							"$ref": "#/types/PlatformArch"
						},
						{
							"description": "The machine's processor architecture."
						}
					]
				},
				"nacl_arch": {
					"allOf": [
						{
							"$ref": "#/types/PlatformNaclArch"
						},
						{
							"unsupported": true,
							"description": "The native client architecture. This may be different from arch on some platforms."
						}
					]
				}
			},
			"required": [
				"os",
				"arch",
				"nacl_arch"
			]
		},
		"BrowserInfo": {
			"type": "object",
			"description": "An object containing information about the current browser.",
			"properties": {
				"name": {
					"type": "string",
					"description": "The name of the browser, for example 'Firefox'."
				},
				"vendor": {
					"type": "string",
					"description": "The name of the browser vendor, for example 'Mozilla'."
				},
				"version": {
					"type": "string",
					"description": "The browser's version, for example '42.0.0' or '0.8.1pre'."
				},
				"buildID": {
					"type": "string",
					"description": "The browser's build ID/date, for example '20160101'."
				}
			},
			"required": [
				"name",
				"vendor",
				"version",
				"buildID"
			]
		},
		"RequestUpdateCheckStatus": {
			"type": "string",
			"enum": [
				"throttled",
				"no_update",
				"update_available"
			],
			"allowedContexts": [
				"content",
				"devtools"
			],
			"description": "Result of the update check."
		},
		"OnInstalledReason": {
			"type": "string",
			"enum": [
				"install",
				"update",
				"browser_update"
			],
			"allowedContexts": [
				"content",
				"devtools"
			],
			"description": "The reason that this event is being dispatched."
		},
		"OnRestartRequiredReason": {
			"type": "string",
			"allowedContexts": [
				"content",
				"devtools"
			],
			"description": "The reason that the event is being dispatched. 'app_update' is used when the restart is needed because the application is updated to a newer version. 'os_update' is used when the restart is needed because the browser/OS is updated to a newer version. 'periodic' is used when the system runs for more than the permitted uptime set in the enterprise policy.",
			"enum": [
				"app_update",
				"os_update",
				"periodic"
			]
		}
	}
};

/***/ }),
/* 103 */
/***/ (function(module, exports) {

module.exports = {
	"id": "sessions",
	"description": "Use the <code>chrome.sessions</code> API to query and restore tabs and windows from a browsing session.",
	"permissions": [
		"sessions"
	],
	"functions": [
		{
			"name": "getRecentlyClosed",
			"type": "function",
			"description": "Gets the list of recently closed tabs and/or windows.",
			"async": "callback",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/Filter"
						},
						{
							"name": "filter",
							"optional": true,
							"default": {}
						}
					]
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "sessions",
							"type": "array",
							"items": {
								"$ref": "#/types/Session"
							},
							"description": "The list of closed entries in reverse order that they were closed (the most recently closed tab or window will be at index <code>0</code>). The entries may contain either tabs or windows."
						}
					]
				}
			]
		},
		{
			"name": "getDevices",
			"unsupported": true,
			"type": "function",
			"description": "Retrieves all devices with synced sessions.",
			"async": "callback",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/Filter"
						},
						{
							"name": "filter",
							"optional": true
						}
					]
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "devices",
							"type": "array",
							"items": {
								"$ref": "#/types/Device"
							},
							"description": "The list of $(ref:sessions.Device) objects for each synced session, sorted in order from device with most recently modified session to device with least recently modified session. $(ref:tabs.Tab) objects are sorted by recency in the $(ref:windows.Window) of the $(ref:sessions.Session) objects."
						}
					]
				}
			]
		},
		{
			"name": "restore",
			"type": "function",
			"description": "Reopens a $(ref:windows.Window) or $(ref:tabs.Tab), with an optional callback to run when the entry has been restored.",
			"async": "callback",
			"parameters": [
				{
					"type": "string",
					"name": "sessionId",
					"optional": true,
					"description": "The $(ref:windows.Window.sessionId), or $(ref:tabs.Tab.sessionId) to restore. If this parameter is not specified, the most recently closed session is restored."
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/Session"
								},
								{
									"name": "restoredSession",
									"description": "A $(ref:sessions.Session) containing the restored $(ref:windows.Window) or $(ref:tabs.Tab) object."
								}
							]
						}
					]
				}
			]
		}
	],
	"events": [
		{
			"name": "onChanged",
			"description": "Fired when recently closed tabs and/or windows are changed. This event does not monitor synced sessions changes.",
			"type": "function"
		}
	],
	"properties": {
		"MAX_SESSION_RESULTS": {
			"value": 25,
			"description": "The maximum number of $(ref:sessions.Session) that will be included in a requested list."
		}
	},
	"definitions": {
		"Permission": {
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"sessions"
					]
				}
			]
		}
	},
	"refs": {
		"sessions#/definitions/Permission": {
			"namespace": "manifest",
			"type": "Permission"
		}
	},
	"types": {
		"Filter": {
			"type": "object",
			"properties": {
				"maxResults": {
					"type": "integer",
					"minimum": 0,
					"maximum": 25,
					"description": "The maximum number of entries to be fetched in the requested list. Omit this parameter to fetch the maximum number of entries ($(ref:sessions.MAX_SESSION_RESULTS))."
				}
			}
		},
		"Session": {
			"type": "object",
			"properties": {
				"lastModified": {
					"type": "integer",
					"description": "The time when the window or tab was closed or modified, represented in milliseconds since the epoch."
				},
				"tab": {
					"allOf": [
						{
							"$ref": "tabs#/types/Tab"
						},
						{
							"description": "The $(ref:tabs.Tab), if this entry describes a tab. Either this or $(ref:sessions.Session.window) will be set."
						}
					]
				},
				"window": {
					"allOf": [
						{
							"$ref": "windows#/types/Window"
						},
						{
							"description": "The $(ref:windows.Window), if this entry describes a window. Either this or $(ref:sessions.Session.tab) will be set."
						}
					]
				}
			},
			"required": [
				"lastModified"
			]
		},
		"Device": {
			"type": "object",
			"properties": {
				"info": {
					"type": "string"
				},
				"deviceName": {
					"type": "string",
					"description": "The name of the foreign device."
				},
				"sessions": {
					"type": "array",
					"items": {
						"$ref": "#/types/Session"
					},
					"description": "A list of open window sessions for the foreign device, sorted from most recently to least recently modified session."
				}
			},
			"required": [
				"info",
				"deviceName",
				"sessions"
			]
		}
	}
};

/***/ }),
/* 104 */
/***/ (function(module, exports) {

module.exports = {
	"id": "sidebarAction",
	"description": "Use sidebar actions to add a sidebar to Firefox.",
	"permissions": [
		"manifest:sidebar_action"
	],
	"functions": [
		{
			"name": "setTitle",
			"type": "function",
			"description": "Sets the title of the sidebar action. This shows up in the tooltip.",
			"async": true,
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"title": {
							"type": "string",
							"description": "The string the sidebar action should display when moused over."
						},
						"tabId": {
							"type": "integer",
							"description": "Sets the sidebar title for the tab specified by tabId. Automatically resets when the tab is closed."
						}
					},
					"required": [
						"title"
					]
				}
			]
		},
		{
			"name": "getTitle",
			"type": "function",
			"description": "Gets the title of the sidebar action.",
			"async": true,
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"tabId": {
							"type": "integer",
							"description": "Specify the tab to get the title from. If no tab is specified, the non-tab-specific title is returned."
						}
					}
				}
			]
		},
		{
			"name": "setIcon",
			"type": "function",
			"description": "Sets the icon for the sidebar action. The icon can be specified either as the path to an image file or as the pixel data from a canvas element, or as dictionary of either one of those. Either the <strong>path</strong> or the <strong>imageData</strong> property must be specified.",
			"async": true,
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"imageData": {
							"anyOf": [
								{
									"$ref": "#/types/ImageDataType"
								},
								{
									"type": "object",
									"patternProperties": {
										"^[1-9]\\d*$": {
											"$ref": "#/types/ImageDataType"
										}
									},
									"additionalProperties": false
								}
							],
							"description": "Either an ImageData object or a dictionary {size -> ImageData} representing icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals <code>scale</code>, then image with size <code>scale</code> * 19 will be selected. Initially only scales 1 and 2 will be supported. At least one image must be specified. Note that 'details.imageData = foo' is equivalent to 'details.imageData = {'19': foo}'"
						},
						"path": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "object",
									"additionalProperties": {
										"type": "string"
									}
								}
							],
							"description": "Either a relative image path or a dictionary {size -> relative image path} pointing to icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals <code>scale</code>, then image with size <code>scale</code> * 19 will be selected. Initially only scales 1 and 2 will be supported. At least one image must be specified. Note that 'details.path = foo' is equivalent to 'details.imageData = {'19': foo}'"
						},
						"tabId": {
							"type": "integer",
							"description": "Sets the sidebar icon for the tab specified by tabId. Automatically resets when the tab is closed."
						}
					}
				}
			]
		},
		{
			"name": "setPanel",
			"type": "function",
			"description": "Sets the url to the html document to be opened in the sidebar when the user clicks on the sidebar action's icon.",
			"async": true,
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"tabId": {
							"type": "integer",
							"minimum": 0,
							"description": "Sets the sidebar url for the tab specified by tabId. Automatically resets when the tab is closed."
						},
						"panel": {
							"type": "string",
							"description": "The url to the html file to show in a sidebar.  If set to the empty string (''), no sidebar is shown."
						}
					},
					"required": [
						"panel"
					]
				}
			]
		},
		{
			"name": "getPanel",
			"type": "function",
			"description": "Gets the url to the html document set as the panel for this sidebar action.",
			"async": true,
			"parameters": [
				{
					"name": "details",
					"type": "object",
					"properties": {
						"tabId": {
							"type": "integer",
							"description": "Specify the tab to get the sidebar from. If no tab is specified, the non-tab-specific sidebar is returned."
						}
					}
				}
			]
		}
	],
	"definitions": {
		"WebExtensionManifest": {
			"properties": {
				"sidebar_action": {
					"type": "object",
					"properties": {
						"default_title": {
							"type": "string",
							"preprocess": "localize"
						},
						"default_icon": {
							"$ref": "manifest#/types/IconPath"
						},
						"default_panel": {
							"type": "string",
							"format": "strictRelativeUrl",
							"preprocess": "localize"
						}
					},
					"required": [
						"default_panel"
					]
				}
			}
		}
	},
	"refs": {
		"sidebarAction#/definitions/WebExtensionManifest": {
			"namespace": "manifest",
			"type": "WebExtensionManifest"
		}
	},
	"types": {
		"ImageDataType": {
			"type": "object",
			"isInstanceOf": "ImageData",
			"additionalProperties": {},
			"postprocess": "convertImageDataToURL",
			"description": "Pixel data for an image. Must be an ImageData object (for example, from a <code>canvas</code> element)."
		}
	}
};

/***/ }),
/* 105 */
/***/ (function(module, exports) {

module.exports = {
	"id": "storage",
	"allowedContexts": [
		"content",
		"devtools"
	],
	"defaultContexts": [
		"content",
		"devtools"
	],
	"description": "Use the <code>browser.storage</code> API to store, retrieve, and track changes to user data.",
	"permissions": [
		"storage"
	],
	"events": [
		{
			"name": "onChanged",
			"type": "function",
			"description": "Fired when one or more items change.",
			"parameters": [
				{
					"name": "changes",
					"type": "object",
					"additionalProperties": {
						"$ref": "#/types/StorageChange"
					},
					"description": "Object mapping each key that changed to its corresponding $(ref:storage.StorageChange) for that item."
				},
				{
					"name": "areaName",
					"type": "string",
					"description": "The name of the storage area (<code>\"sync\"</code>, <code>\"local\"</code> or <code>\"managed\"</code>) the changes are for."
				}
			]
		}
	],
	"properties": {
		"sync": {
			"allOf": [
				{
					"$ref": "#/types/StorageArea"
				},
				{
					"description": "Items in the <code>sync</code> storage area are synced by the browser.",
					"properties": {
						"QUOTA_BYTES": {
							"value": 102400,
							"description": "The maximum total amount (in bytes) of data that can be stored in sync storage, as measured by the JSON stringification of every value plus every key's length. Updates that would cause this limit to be exceeded fail immediately and set $(ref:runtime.lastError)."
						},
						"QUOTA_BYTES_PER_ITEM": {
							"value": 8192,
							"description": "The maximum size (in bytes) of each individual item in sync storage, as measured by the JSON stringification of its value plus its key length. Updates containing items larger than this limit will fail immediately and set $(ref:runtime.lastError)."
						},
						"MAX_ITEMS": {
							"value": 512,
							"description": "The maximum number of items that can be stored in sync storage. Updates that would cause this limit to be exceeded will fail immediately and set $(ref:runtime.lastError)."
						},
						"MAX_WRITE_OPERATIONS_PER_HOUR": {
							"value": 1800,
							"description": "<p>The maximum number of <code>set</code>, <code>remove</code>, or <code>clear</code> operations that can be performed each hour. This is 1 every 2 seconds, a lower ceiling than the short term higher writes-per-minute limit.</p><p>Updates that would cause this limit to be exceeded fail immediately and set $(ref:runtime.lastError).</p>"
						},
						"MAX_WRITE_OPERATIONS_PER_MINUTE": {
							"value": 120,
							"description": "<p>The maximum number of <code>set</code>, <code>remove</code>, or <code>clear</code> operations that can be performed each minute. This is 2 per second, providing higher throughput than writes-per-hour over a shorter period of time.</p><p>Updates that would cause this limit to be exceeded fail immediately and set $(ref:runtime.lastError).</p>"
						},
						"MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE": {
							"value": 1000000,
							"deprecated": "The storage.sync API no longer has a sustained write operation quota.",
							"description": ""
						}
					},
					"required": [
						"QUOTA_BYTES",
						"QUOTA_BYTES_PER_ITEM",
						"MAX_ITEMS",
						"MAX_WRITE_OPERATIONS_PER_HOUR",
						"MAX_WRITE_OPERATIONS_PER_MINUTE",
						"MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE"
					]
				}
			]
		},
		"local": {
			"allOf": [
				{
					"$ref": "#/types/StorageArea"
				},
				{
					"description": "Items in the <code>local</code> storage area are local to each machine.",
					"properties": {
						"QUOTA_BYTES": {
							"value": 5242880,
							"description": "The maximum amount (in bytes) of data that can be stored in local storage, as measured by the JSON stringification of every value plus every key's length. This value will be ignored if the extension has the <code>unlimitedStorage</code> permission. Updates that would cause this limit to be exceeded fail immediately and set $(ref:runtime.lastError)."
						}
					},
					"required": [
						"QUOTA_BYTES"
					]
				}
			]
		},
		"managed": {
			"allOf": [
				{
					"$ref": "#/types/StorageArea"
				},
				{
					"unsupported": true,
					"description": "Items in the <code>managed</code> storage area are set by the domain administrator, and are read-only for the extension; trying to modify this namespace results in an error."
				}
			]
		}
	},
	"definitions": {},
	"refs": {},
	"types": {
		"StorageChange": {
			"type": "object",
			"properties": {
				"oldValue": {
					"description": "The old value of the item, if there was an old value."
				},
				"newValue": {
					"description": "The new value of the item, if there is a new value."
				}
			}
		},
		"StorageArea": {
			"type": "object",
			"functions": [
				{
					"name": "get",
					"type": "function",
					"description": "Gets one or more items from storage.",
					"async": "callback",
					"parameters": [
						{
							"name": "keys",
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								{
									"type": "object",
									"description": "Storage items to return in the callback, where the values are replaced with those from storage if they exist.",
									"additionalProperties": {}
								}
							],
							"description": "A single key to get, list of keys to get, or a dictionary specifying default values (see description of the object).  An empty list or object will return an empty result object.  Pass in <code>null</code> to get the entire contents of storage.",
							"optional": true
						},
						{
							"name": "callback",
							"type": "function",
							"description": "Callback with storage items, or on failure (in which case $(ref:runtime.lastError) will be set).",
							"parameters": [
								{
									"name": "items",
									"type": "object",
									"additionalProperties": {},
									"description": "Object with items in their key-value mappings."
								}
							]
						}
					]
				},
				{
					"name": "getBytesInUse",
					"unsupported": true,
					"type": "function",
					"description": "Gets the amount of space (in bytes) being used by one or more items.",
					"async": "callback",
					"parameters": [
						{
							"name": "keys",
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "array",
									"items": {
										"type": "string"
									}
								}
							],
							"description": "A single key or list of keys to get the total usage for. An empty list will return 0. Pass in <code>null</code> to get the total usage of all of storage.",
							"optional": true
						},
						{
							"name": "callback",
							"type": "function",
							"description": "Callback with the amount of space being used by storage, or on failure (in which case $(ref:runtime.lastError) will be set).",
							"parameters": [
								{
									"name": "bytesInUse",
									"type": "integer",
									"description": "Amount of space being used in storage, in bytes."
								}
							]
						}
					]
				},
				{
					"name": "set",
					"type": "function",
					"description": "Sets multiple items.",
					"async": "callback",
					"parameters": [
						{
							"name": "items",
							"type": "object",
							"additionalProperties": {},
							"description": "<p>An object which gives each key/value pair to update storage with. Any other key/value pairs in storage will not be affected.</p><p>Primitive values such as numbers will serialize as expected. Values with a <code>typeof</code> <code>\"object\"</code> and <code>\"function\"</code> will typically serialize to <code>{}</code>, with the exception of <code>Array</code> (serializes as expected), <code>Date</code>, and <code>Regex</code> (serialize using their <code>String</code> representation).</p>"
						},
						{
							"name": "callback",
							"type": "function",
							"description": "Callback on success, or on failure (in which case $(ref:runtime.lastError) will be set).",
							"parameters": [],
							"optional": true
						}
					]
				},
				{
					"name": "remove",
					"type": "function",
					"description": "Removes one or more items from storage.",
					"async": "callback",
					"parameters": [
						{
							"name": "keys",
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "array",
									"items": {
										"type": "string"
									}
								}
							],
							"description": "A single key or a list of keys for items to remove."
						},
						{
							"name": "callback",
							"type": "function",
							"description": "Callback on success, or on failure (in which case $(ref:runtime.lastError) will be set).",
							"parameters": [],
							"optional": true
						}
					]
				},
				{
					"name": "clear",
					"type": "function",
					"description": "Removes all items from storage.",
					"async": "callback",
					"parameters": [
						{
							"name": "callback",
							"type": "function",
							"description": "Callback on success, or on failure (in which case $(ref:runtime.lastError) will be set).",
							"parameters": [],
							"optional": true
						}
					]
				}
			]
		}
	}
};

/***/ }),
/* 106 */
/***/ (function(module, exports) {

module.exports = {
	"id": "tabs",
	"description": "Use the <code>browser.tabs</code> API to interact with the browser's tab system. You can use this API to create, modify, and rearrange tabs in the browser.",
	"properties": {
		"TAB_ID_NONE": {
			"value": -1,
			"description": "An ID which represents the absence of a browser tab."
		}
	},
	"functions": [
		{
			"name": "get",
			"type": "function",
			"description": "Retrieves details about the specified tab.",
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/Tab"
								},
								{
									"name": "tab"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "getCurrent",
			"type": "function",
			"description": "Gets the tab that this script call is being made from. May be undefined if called from a non-tab context (for example: a background page or popup view).",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/Tab"
								},
								{
									"name": "tab",
									"optional": true
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "connect",
			"type": "function",
			"description": "Connects to the content script(s) in the specified tab. The $(ref:runtime.onConnect) event is fired in each content script running in the specified tab for the current extension. For more details, see $(topic:messaging)[Content Script Messaging].",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0
				},
				{
					"type": "object",
					"name": "connectInfo",
					"properties": {
						"name": {
							"type": "string",
							"description": "Will be passed into onConnect for content scripts that are listening for the connection event."
						},
						"frameId": {
							"type": "integer",
							"minimum": 0,
							"description": "Open a port to a specific $(topic:frame_ids)[frame] identified by <code>frameId</code> instead of all frames in the tab."
						}
					},
					"optional": true
				}
			],
			"returns": {
				"allOf": [
					{
						"$ref": "runtime#/types/Port"
					},
					{
						"description": "A port that can be used to communicate with the content scripts running in the specified tab. The port's $(ref:runtime.Port) event is fired if the tab closes or does not exist. "
					}
				]
			}
		},
		{
			"name": "sendRequest",
			"deprecated": "Please use $(ref:runtime.sendMessage).",
			"unsupported": true,
			"type": "function",
			"description": "Sends a single request to the content script(s) in the specified tab, with an optional callback to run when a response is sent back.  The $(ref:extension.onRequest) event is fired in each content script running in the specified tab for the current extension.",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0
				},
				{
					"name": "request"
				},
				{
					"type": "function",
					"name": "responseCallback",
					"optional": true,
					"parameters": [
						{
							"name": "response",
							"description": "The JSON response object sent by the handler of the request. If an error occurs while connecting to the specified tab, the callback will be called with no arguments and $(ref:runtime.lastError) will be set to the error message."
						}
					]
				}
			]
		},
		{
			"name": "sendMessage",
			"type": "function",
			"description": "Sends a single message to the content script(s) in the specified tab, with an optional callback to run when a response is sent back.  The $(ref:runtime.onMessage) event is fired in each content script running in the specified tab for the current extension.",
			"async": "responseCallback",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0
				},
				{
					"name": "message"
				},
				{
					"type": "object",
					"name": "options",
					"properties": {
						"frameId": {
							"type": "integer",
							"minimum": 0,
							"description": "Send a message to a specific $(topic:frame_ids)[frame] identified by <code>frameId</code> instead of all frames in the tab."
						}
					},
					"optional": true
				},
				{
					"type": "function",
					"name": "responseCallback",
					"optional": true,
					"parameters": [
						{
							"name": "response",
							"description": "The JSON response object sent by the handler of the message. If an error occurs while connecting to the specified tab, the callback will be called with no arguments and $(ref:runtime.lastError) will be set to the error message."
						}
					]
				}
			]
		},
		{
			"name": "getSelected",
			"deprecated": "Please use $(ref:tabs.query) <code>{active: true}</code>.",
			"unsupported": true,
			"type": "function",
			"description": "Gets the tab that is selected in the specified window.",
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"name": "windowId",
					"minimum": -2,
					"optional": true,
					"description": "Defaults to the $(topic:current-window)[current window]."
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/Tab"
								},
								{
									"name": "tab"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "getAllInWindow",
			"deprecated": "Please use $(ref:tabs.query) <code>{windowId: windowId}</code>.",
			"unsupported": true,
			"type": "function",
			"description": "Gets details about all tabs in the specified window.",
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"name": "windowId",
					"minimum": -2,
					"optional": true,
					"description": "Defaults to the $(topic:current-window)[current window]."
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "tabs",
							"type": "array",
							"items": {
								"$ref": "#/types/Tab"
							}
						}
					]
				}
			]
		},
		{
			"name": "create",
			"type": "function",
			"description": "Creates a new tab.",
			"async": "callback",
			"parameters": [
				{
					"type": "object",
					"name": "createProperties",
					"properties": {
						"windowId": {
							"type": "integer",
							"minimum": -2,
							"description": "The window to create the new tab in. Defaults to the $(topic:current-window)[current window]."
						},
						"index": {
							"type": "integer",
							"minimum": 0,
							"description": "The position the tab should take in the window. The provided value will be clamped to between zero and the number of tabs in the window."
						},
						"url": {
							"type": "string",
							"description": "The URL to navigate the tab to initially. Fully-qualified URLs must include a scheme (i.e. 'http://www.google.com', not 'www.google.com'). Relative URLs will be relative to the current page within the extension. Defaults to the New Tab Page."
						},
						"active": {
							"type": "boolean",
							"description": "Whether the tab should become the active tab in the window. Does not affect whether the window is focused (see $(ref:windows.update)). Defaults to <var>true</var>."
						},
						"selected": {
							"deprecated": "Please use <em>active</em>.",
							"unsupported": true,
							"type": "boolean",
							"description": "Whether the tab should become the selected tab in the window. Defaults to <var>true</var>"
						},
						"pinned": {
							"type": "boolean",
							"description": "Whether the tab should be pinned. Defaults to <var>false</var>"
						},
						"openerTabId": {
							"unsupported": true,
							"type": "integer",
							"minimum": 0,
							"description": "The ID of the tab that opened this tab. If specified, the opener tab must be in the same window as the newly created tab."
						},
						"cookieStoreId": {
							"type": "string",
							"description": "The CookieStoreId for the tab that opened this tab."
						}
					}
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/Tab"
								},
								{
									"name": "tab",
									"description": "Details about the created tab. Will contain the ID of the new tab."
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "duplicate",
			"type": "function",
			"description": "Duplicates a tab.",
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0,
					"description": "The ID of the tab which is to be duplicated."
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/Tab"
								},
								{
									"name": "tab",
									"optional": true,
									"description": "Details about the duplicated tab. The $(ref:tabs.Tab) object doesn't contain <code>url</code>, <code>title</code> and <code>favIconUrl</code> if the <code>\"tabs\"</code> permission has not been requested."
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "query",
			"type": "function",
			"description": "Gets all tabs that have the specified properties, or all tabs if no properties are specified.",
			"async": "callback",
			"parameters": [
				{
					"type": "object",
					"name": "queryInfo",
					"properties": {
						"active": {
							"type": "boolean",
							"description": "Whether the tabs are active in their windows."
						},
						"pinned": {
							"type": "boolean",
							"description": "Whether the tabs are pinned."
						},
						"audible": {
							"type": "boolean",
							"description": "Whether the tabs are audible."
						},
						"muted": {
							"type": "boolean",
							"description": "Whether the tabs are muted."
						},
						"highlighted": {
							"type": "boolean",
							"description": "Whether the tabs are highlighted."
						},
						"currentWindow": {
							"type": "boolean",
							"description": "Whether the tabs are in the $(topic:current-window)[current window]."
						},
						"lastFocusedWindow": {
							"type": "boolean",
							"description": "Whether the tabs are in the last focused window."
						},
						"status": {
							"allOf": [
								{
									"$ref": "#/types/TabStatus"
								},
								{
									"description": "Whether the tabs have completed loading."
								}
							]
						},
						"title": {
							"type": "string",
							"description": "Match page titles against a pattern."
						},
						"url": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "array",
									"items": {
										"type": "string"
									}
								}
							],
							"description": "Match tabs against one or more $(topic:match_patterns)[URL patterns]. Note that fragment identifiers are not matched."
						},
						"windowId": {
							"type": "integer",
							"minimum": -2,
							"description": "The ID of the parent window, or $(ref:windows.WINDOW_ID_CURRENT) for the $(topic:current-window)[current window]."
						},
						"windowType": {
							"allOf": [
								{
									"$ref": "#/types/WindowType"
								},
								{
									"description": "The type of window the tabs are in."
								}
							]
						},
						"index": {
							"type": "integer",
							"minimum": 0,
							"description": "The position of the tabs within their windows."
						},
						"cookieStoreId": {
							"type": "string",
							"description": "The CookieStoreId used for the tab."
						}
					}
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "result",
							"type": "array",
							"items": {
								"$ref": "#/types/Tab"
							}
						}
					]
				}
			]
		},
		{
			"name": "highlight",
			"type": "function",
			"description": "Highlights the given tabs.",
			"async": "callback",
			"parameters": [
				{
					"type": "object",
					"name": "highlightInfo",
					"properties": {
						"windowId": {
							"type": "integer",
							"description": "The window that contains the tabs.",
							"minimum": -2
						},
						"tabs": {
							"description": "One or more tab indices to highlight.",
							"anyOf": [
								{
									"type": "array",
									"items": {
										"type": "integer",
										"minimum": 0
									}
								},
								{
									"type": "integer"
								}
							]
						}
					},
					"required": [
						"tabs"
					]
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "windows#/types/Window"
								},
								{
									"name": "window",
									"description": "Contains details about the window whose tabs were highlighted."
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "update",
			"type": "function",
			"description": "Modifies the properties of a tab. Properties that are not specified in <var>updateProperties</var> are not modified.",
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0,
					"optional": true,
					"description": "Defaults to the selected tab of the $(topic:current-window)[current window]."
				},
				{
					"type": "object",
					"name": "updateProperties",
					"properties": {
						"url": {
							"type": "string",
							"description": "A URL to navigate the tab to."
						},
						"active": {
							"type": "boolean",
							"description": "Whether the tab should be active. Does not affect whether the window is focused (see $(ref:windows.update))."
						},
						"highlighted": {
							"unsupported": true,
							"type": "boolean",
							"description": "Adds or removes the tab from the current selection."
						},
						"selected": {
							"unsupported": true,
							"deprecated": "Please use <em>highlighted</em>.",
							"type": "boolean",
							"description": "Whether the tab should be selected."
						},
						"pinned": {
							"type": "boolean",
							"description": "Whether the tab should be pinned."
						},
						"muted": {
							"type": "boolean",
							"description": "Whether the tab should be muted."
						},
						"openerTabId": {
							"unsupported": true,
							"type": "integer",
							"minimum": 0,
							"description": "The ID of the tab that opened this tab. If specified, the opener tab must be in the same window as this tab."
						}
					}
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/Tab"
								},
								{
									"name": "tab",
									"optional": true,
									"description": "Details about the updated tab. The $(ref:tabs.Tab) object doesn't contain <code>url</code>, <code>title</code> and <code>favIconUrl</code> if the <code>\"tabs\"</code> permission has not been requested."
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "move",
			"type": "function",
			"description": "Moves one or more tabs to a new position within its window, or to a new window. Note that tabs can only be moved to and from normal (window.type === \"normal\") windows.",
			"async": "callback",
			"parameters": [
				{
					"name": "tabIds",
					"description": "The tab or list of tabs to move.",
					"anyOf": [
						{
							"type": "integer",
							"minimum": 0
						},
						{
							"type": "array",
							"items": {
								"type": "integer",
								"minimum": 0
							}
						}
					]
				},
				{
					"type": "object",
					"name": "moveProperties",
					"properties": {
						"windowId": {
							"type": "integer",
							"minimum": -2,
							"description": "Defaults to the window the tab is currently in."
						},
						"index": {
							"type": "integer",
							"minimum": -1,
							"description": "The position to move the window to. -1 will place the tab at the end of the window."
						}
					},
					"required": [
						"index"
					]
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": [
						{
							"name": "tabs",
							"description": "Details about the moved tabs.",
							"anyOf": [
								{
									"$ref": "#/types/Tab"
								},
								{
									"type": "array",
									"items": {
										"$ref": "#/types/Tab"
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "reload",
			"type": "function",
			"description": "Reload a tab.",
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0,
					"optional": true,
					"description": "The ID of the tab to reload; defaults to the selected tab of the current window."
				},
				{
					"type": "object",
					"name": "reloadProperties",
					"optional": true,
					"properties": {
						"bypassCache": {
							"type": "boolean",
							"description": "Whether using any local cache. Default is false."
						}
					}
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "remove",
			"type": "function",
			"description": "Closes one or more tabs.",
			"async": "callback",
			"parameters": [
				{
					"name": "tabIds",
					"description": "The tab or list of tabs to close.",
					"anyOf": [
						{
							"type": "integer",
							"minimum": 0
						},
						{
							"type": "array",
							"items": {
								"type": "integer",
								"minimum": 0
							}
						}
					]
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": []
				}
			]
		},
		{
			"name": "detectLanguage",
			"type": "function",
			"description": "Detects the primary language of the content in a tab.",
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0,
					"optional": true,
					"description": "Defaults to the active tab of the $(topic:current-window)[current window]."
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"type": "string",
							"name": "language",
							"description": "An ISO language code such as <code>en</code> or <code>fr</code>. For a complete list of languages supported by this method, see <a href='http://src.chromium.org/viewvc/chrome/trunk/src/third_party/cld/languages/internal/languages.cc'>kLanguageInfoTable</a>. The 2nd to 4th columns will be checked and the first non-NULL value will be returned except for Simplified Chinese for which zh-CN will be returned. For an unknown language, <code>und</code> will be returned."
						}
					]
				}
			]
		},
		{
			"name": "captureVisibleTab",
			"type": "function",
			"description": "Captures the visible area of the currently active tab in the specified window. You must have $(topic:declare_permissions)[&lt;all_urls&gt;] permission to use this method.",
			"permissions": [
				"<all_urls>"
			],
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"name": "windowId",
					"minimum": -2,
					"optional": true,
					"description": "The target window. Defaults to the $(topic:current-window)[current window]."
				},
				{
					"allOf": [
						{
							"$ref": "extensionTypes#/types/ImageDetails"
						},
						{
							"name": "options",
							"optional": true
						}
					]
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"type": "string",
							"name": "dataUrl",
							"description": "A data URL which encodes an image of the visible area of the captured tab. May be assigned to the 'src' property of an HTML Image element for display."
						}
					]
				}
			]
		},
		{
			"name": "executeScript",
			"type": "function",
			"description": "Injects JavaScript code into a page. For details, see the $(topic:content_scripts)[programmatic injection] section of the content scripts doc.",
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0,
					"optional": true,
					"description": "The ID of the tab in which to run the script; defaults to the active tab of the current window."
				},
				{
					"allOf": [
						{
							"$ref": "extensionTypes#/types/InjectDetails"
						},
						{
							"name": "details",
							"description": "Details of the script to run."
						}
					]
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"description": "Called after all the JavaScript has been executed.",
					"parameters": [
						{
							"name": "result",
							"optional": true,
							"type": "array",
							"items": {},
							"description": "The result of the script in every injected frame."
						}
					]
				}
			]
		},
		{
			"name": "insertCSS",
			"type": "function",
			"description": "Injects CSS into a page. For details, see the $(topic:content_scripts)[programmatic injection] section of the content scripts doc.",
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0,
					"optional": true,
					"description": "The ID of the tab in which to insert the CSS; defaults to the active tab of the current window."
				},
				{
					"allOf": [
						{
							"$ref": "extensionTypes#/types/InjectDetails"
						},
						{
							"name": "details",
							"description": "Details of the CSS text to insert."
						}
					]
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"description": "Called when all the CSS has been inserted.",
					"parameters": []
				}
			]
		},
		{
			"name": "removeCSS",
			"type": "function",
			"description": "Removes injected CSS from a page. For details, see the $(topic:content_scripts)[programmatic injection] section of the content scripts doc.",
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0,
					"optional": true,
					"description": "The ID of the tab from which to remove the injected CSS; defaults to the active tab of the current window."
				},
				{
					"allOf": [
						{
							"$ref": "extensionTypes#/types/InjectDetails"
						},
						{
							"name": "details",
							"description": "Details of the CSS text to remove."
						}
					]
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"description": "Called when all the CSS has been removed.",
					"parameters": []
				}
			]
		},
		{
			"name": "setZoom",
			"type": "function",
			"description": "Zooms a specified tab.",
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0,
					"optional": true,
					"description": "The ID of the tab to zoom; defaults to the active tab of the current window."
				},
				{
					"type": "number",
					"name": "zoomFactor",
					"description": "The new zoom factor. Use a value of 0 here to set the tab to its current default zoom factor. Values greater than zero specify a (possibly non-default) zoom factor for the tab."
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"description": "Called after the zoom factor has been changed.",
					"parameters": []
				}
			]
		},
		{
			"name": "getZoom",
			"type": "function",
			"description": "Gets the current zoom factor of a specified tab.",
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0,
					"optional": true,
					"description": "The ID of the tab to get the current zoom factor from; defaults to the active tab of the current window."
				},
				{
					"type": "function",
					"name": "callback",
					"description": "Called with the tab's current zoom factor after it has been fetched.",
					"parameters": [
						{
							"type": "number",
							"name": "zoomFactor",
							"description": "The tab's current zoom factor."
						}
					]
				}
			]
		},
		{
			"name": "setZoomSettings",
			"type": "function",
			"description": "Sets the zoom settings for a specified tab, which define how zoom changes are handled. These settings are reset to defaults upon navigating the tab.",
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"optional": true,
					"minimum": 0,
					"description": "The ID of the tab to change the zoom settings for; defaults to the active tab of the current window."
				},
				{
					"allOf": [
						{
							"$ref": "#/types/ZoomSettings"
						},
						{
							"name": "zoomSettings",
							"description": "Defines how zoom changes are handled and at what scope."
						}
					]
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"description": "Called after the zoom settings have been changed.",
					"parameters": []
				}
			]
		},
		{
			"name": "getZoomSettings",
			"type": "function",
			"description": "Gets the current zoom settings of a specified tab.",
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"optional": true,
					"minimum": 0,
					"description": "The ID of the tab to get the current zoom settings from; defaults to the active tab of the current window."
				},
				{
					"type": "function",
					"name": "callback",
					"description": "Called with the tab's current zoom settings.",
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/ZoomSettings"
								},
								{
									"name": "zoomSettings",
									"description": "The tab's current zoom settings."
								}
							]
						}
					]
				}
			]
		}
	],
	"events": [
		{
			"name": "onCreated",
			"type": "function",
			"description": "Fired when a tab is created. Note that the tab's URL may not be set at the time this event fired, but you can listen to onUpdated events to be notified when a URL is set.",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/Tab"
						},
						{
							"name": "tab",
							"description": "Details of the tab that was created."
						}
					]
				}
			]
		},
		{
			"name": "onUpdated",
			"type": "function",
			"description": "Fired when a tab is updated.",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0
				},
				{
					"type": "object",
					"name": "changeInfo",
					"description": "Lists the changes to the state of the tab that was updated.",
					"properties": {
						"status": {
							"type": "string",
							"description": "The status of the tab. Can be either <em>loading</em> or <em>complete</em>."
						},
						"url": {
							"type": "string",
							"description": "The tab's URL if it has changed."
						},
						"pinned": {
							"type": "boolean",
							"description": "The tab's new pinned state."
						},
						"audible": {
							"type": "boolean",
							"description": "The tab's new audible state."
						},
						"mutedInfo": {
							"allOf": [
								{
									"$ref": "#/types/MutedInfo"
								},
								{
									"description": "The tab's new muted state and the reason for the change."
								}
							]
						},
						"favIconUrl": {
							"type": "string",
							"description": "The tab's new favicon URL."
						}
					}
				},
				{
					"allOf": [
						{
							"$ref": "#/types/Tab"
						},
						{
							"name": "tab",
							"description": "Gives the state of the tab that was updated."
						}
					]
				}
			]
		},
		{
			"name": "onMoved",
			"type": "function",
			"description": "Fired when a tab is moved within a window. Only one move event is fired, representing the tab the user directly moved. Move events are not fired for the other tabs that must move in response. This event is not fired when a tab is moved between windows. For that, see $(ref:tabs.onDetached).",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0
				},
				{
					"type": "object",
					"name": "moveInfo",
					"properties": {
						"windowId": {
							"type": "integer",
							"minimum": 0
						},
						"fromIndex": {
							"type": "integer",
							"minimum": 0
						},
						"toIndex": {
							"type": "integer",
							"minimum": 0
						}
					},
					"required": [
						"windowId",
						"fromIndex",
						"toIndex"
					]
				}
			]
		},
		{
			"name": "onSelectionChanged",
			"deprecated": "Please use $(ref:tabs.onActivated).",
			"unsupported": true,
			"type": "function",
			"description": "Fires when the selected tab in a window changes.",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0,
					"description": "The ID of the tab that has become active."
				},
				{
					"type": "object",
					"name": "selectInfo",
					"properties": {
						"windowId": {
							"type": "integer",
							"minimum": 0,
							"description": "The ID of the window the selected tab changed inside of."
						}
					},
					"required": [
						"windowId"
					]
				}
			]
		},
		{
			"name": "onActiveChanged",
			"deprecated": "Please use $(ref:tabs.onActivated).",
			"unsupported": true,
			"type": "function",
			"description": "Fires when the selected tab in a window changes. Note that the tab's URL may not be set at the time this event fired, but you can listen to $(ref:tabs.onUpdated) events to be notified when a URL is set.",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0,
					"description": "The ID of the tab that has become active."
				},
				{
					"type": "object",
					"name": "selectInfo",
					"properties": {
						"windowId": {
							"type": "integer",
							"minimum": 0,
							"description": "The ID of the window the selected tab changed inside of."
						}
					},
					"required": [
						"windowId"
					]
				}
			]
		},
		{
			"name": "onActivated",
			"type": "function",
			"description": "Fires when the active tab in a window changes. Note that the tab's URL may not be set at the time this event fired, but you can listen to onUpdated events to be notified when a URL is set.",
			"parameters": [
				{
					"type": "object",
					"name": "activeInfo",
					"properties": {
						"tabId": {
							"type": "integer",
							"minimum": 0,
							"description": "The ID of the tab that has become active."
						},
						"windowId": {
							"type": "integer",
							"minimum": 0,
							"description": "The ID of the window the active tab changed inside of."
						}
					},
					"required": [
						"tabId",
						"windowId"
					]
				}
			]
		},
		{
			"name": "onHighlightChanged",
			"deprecated": "Please use $(ref:tabs.onHighlighted).",
			"unsupported": true,
			"type": "function",
			"description": "Fired when the highlighted or selected tabs in a window changes.",
			"parameters": [
				{
					"type": "object",
					"name": "selectInfo",
					"properties": {
						"windowId": {
							"type": "integer",
							"minimum": 0,
							"description": "The window whose tabs changed."
						},
						"tabIds": {
							"type": "array",
							"items": {
								"type": "integer",
								"minimum": 0
							},
							"description": "All highlighted tabs in the window."
						}
					},
					"required": [
						"windowId",
						"tabIds"
					]
				}
			]
		},
		{
			"name": "onHighlighted",
			"type": "function",
			"description": "Fired when the highlighted or selected tabs in a window changes.",
			"parameters": [
				{
					"type": "object",
					"name": "highlightInfo",
					"properties": {
						"windowId": {
							"type": "integer",
							"minimum": 0,
							"description": "The window whose tabs changed."
						},
						"tabIds": {
							"type": "array",
							"items": {
								"type": "integer",
								"minimum": 0
							},
							"description": "All highlighted tabs in the window."
						}
					},
					"required": [
						"windowId",
						"tabIds"
					]
				}
			]
		},
		{
			"name": "onDetached",
			"type": "function",
			"description": "Fired when a tab is detached from a window, for example because it is being moved between windows.",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0
				},
				{
					"type": "object",
					"name": "detachInfo",
					"properties": {
						"oldWindowId": {
							"type": "integer",
							"minimum": 0
						},
						"oldPosition": {
							"type": "integer",
							"minimum": 0
						}
					},
					"required": [
						"oldWindowId",
						"oldPosition"
					]
				}
			]
		},
		{
			"name": "onAttached",
			"type": "function",
			"description": "Fired when a tab is attached to a window, for example because it was moved between windows.",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0
				},
				{
					"type": "object",
					"name": "attachInfo",
					"properties": {
						"newWindowId": {
							"type": "integer",
							"minimum": 0
						},
						"newPosition": {
							"type": "integer",
							"minimum": 0
						}
					},
					"required": [
						"newWindowId",
						"newPosition"
					]
				}
			]
		},
		{
			"name": "onRemoved",
			"type": "function",
			"description": "Fired when a tab is closed.",
			"parameters": [
				{
					"type": "integer",
					"name": "tabId",
					"minimum": 0
				},
				{
					"type": "object",
					"name": "removeInfo",
					"properties": {
						"windowId": {
							"type": "integer",
							"minimum": 0,
							"description": "The window whose tab is closed."
						},
						"isWindowClosing": {
							"type": "boolean",
							"description": "True when the tab is being closed because its window is being closed."
						}
					},
					"required": [
						"windowId",
						"isWindowClosing"
					]
				}
			]
		},
		{
			"name": "onReplaced",
			"type": "function",
			"description": "Fired when a tab is replaced with another tab due to prerendering or instant.",
			"parameters": [
				{
					"type": "integer",
					"name": "addedTabId",
					"minimum": 0
				},
				{
					"type": "integer",
					"name": "removedTabId",
					"minimum": 0
				}
			]
		},
		{
			"name": "onZoomChange",
			"type": "function",
			"description": "Fired when a tab is zoomed.",
			"parameters": [
				{
					"type": "object",
					"name": "ZoomChangeInfo",
					"properties": {
						"tabId": {
							"type": "integer",
							"minimum": 0
						},
						"oldZoomFactor": {
							"type": "number"
						},
						"newZoomFactor": {
							"type": "number"
						},
						"zoomSettings": {
							"$ref": "#/types/ZoomSettings"
						}
					},
					"required": [
						"tabId",
						"oldZoomFactor",
						"newZoomFactor",
						"zoomSettings"
					]
				}
			]
		}
	],
	"definitions": {
		"Permission": {
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"activeTab",
						"tabs"
					]
				}
			]
		}
	},
	"refs": {
		"tabs#/definitions/Permission": {
			"namespace": "manifest",
			"type": "Permission"
		}
	},
	"types": {
		"MutedInfoReason": {
			"type": "string",
			"description": "An event that caused a muted state change.",
			"enum": [
				{
					"name": "user",
					"description": "A user input action has set/overridden the muted state."
				},
				{
					"name": "capture",
					"description": "Tab capture started, forcing a muted state change."
				},
				{
					"name": "extension",
					"description": "An extension, identified by the extensionId field, set the muted state."
				}
			]
		},
		"MutedInfo": {
			"type": "object",
			"description": "Tab muted state and the reason for the last state change.",
			"properties": {
				"muted": {
					"type": "boolean",
					"description": "Whether the tab is prevented from playing sound (but hasn't necessarily recently produced sound). Equivalent to whether the muted audio indicator is showing."
				},
				"reason": {
					"allOf": [
						{
							"$ref": "#/types/MutedInfoReason"
						},
						{
							"description": "The reason the tab was muted or unmuted. Not set if the tab's mute state has never been changed."
						}
					]
				},
				"extensionId": {
					"type": "string",
					"description": "The ID of the extension that changed the muted state. Not set if an extension was not the reason the muted state last changed."
				}
			},
			"required": [
				"muted"
			]
		},
		"Tab": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"minimum": -1,
					"description": "The ID of the tab. Tab IDs are unique within a browser session. Under some circumstances a Tab may not be assigned an ID, for example when querying foreign tabs using the $(ref:sessions) API, in which case a session ID may be present. Tab ID can also be set to $(ref:tabs.TAB_ID_NONE) for apps and devtools windows."
				},
				"index": {
					"type": "integer",
					"minimum": -1,
					"description": "The zero-based index of the tab within its window."
				},
				"windowId": {
					"type": "integer",
					"minimum": 0,
					"description": "The ID of the window the tab is contained within."
				},
				"openerTabId": {
					"unsupported": true,
					"type": "integer",
					"minimum": 0,
					"description": "The ID of the tab that opened this tab, if any. This property is only present if the opener tab still exists."
				},
				"selected": {
					"type": "boolean",
					"description": "Whether the tab is selected.",
					"deprecated": "Please use $(ref:tabs.Tab.highlighted).",
					"unsupported": true
				},
				"highlighted": {
					"type": "boolean",
					"description": "Whether the tab is highlighted."
				},
				"active": {
					"type": "boolean",
					"description": "Whether the tab is active in its window. (Does not necessarily mean the window is focused.)"
				},
				"pinned": {
					"type": "boolean",
					"description": "Whether the tab is pinned."
				},
				"audible": {
					"type": "boolean",
					"description": "Whether the tab has produced sound over the past couple of seconds (but it might not be heard if also muted). Equivalent to whether the speaker audio indicator is showing."
				},
				"mutedInfo": {
					"allOf": [
						{
							"$ref": "#/types/MutedInfo"
						},
						{
							"description": "Current tab muted state and the reason for the last state change."
						}
					]
				},
				"url": {
					"type": "string",
					"permissions": [
						"tabs"
					],
					"description": "The URL the tab is displaying. This property is only present if the extension's manifest includes the <code>\"tabs\"</code> permission."
				},
				"title": {
					"type": "string",
					"permissions": [
						"tabs"
					],
					"description": "The title of the tab. This property is only present if the extension's manifest includes the <code>\"tabs\"</code> permission."
				},
				"favIconUrl": {
					"type": "string",
					"permissions": [
						"tabs"
					],
					"description": "The URL of the tab's favicon. This property is only present if the extension's manifest includes the <code>\"tabs\"</code> permission. It may also be an empty string if the tab is loading."
				},
				"status": {
					"type": "string",
					"description": "Either <em>loading</em> or <em>complete</em>."
				},
				"incognito": {
					"type": "boolean",
					"description": "Whether the tab is in an incognito window."
				},
				"width": {
					"type": "integer",
					"description": "The width of the tab in pixels."
				},
				"height": {
					"type": "integer",
					"description": "The height of the tab in pixels."
				},
				"sessionId": {
					"unsupported": true,
					"type": "string",
					"description": "The session ID used to uniquely identify a Tab obtained from the $(ref:sessions) API."
				},
				"cookieStoreId": {
					"type": "string",
					"description": "The CookieStoreId used for the tab."
				}
			},
			"required": [
				"index",
				"windowId",
				"selected",
				"highlighted",
				"active",
				"pinned",
				"incognito",
				"cookieStoreId"
			]
		},
		"ZoomSettingsMode": {
			"type": "string",
			"description": "Defines how zoom changes are handled, i.e. which entity is responsible for the actual scaling of the page; defaults to <code>automatic</code>.",
			"enum": [
				{
					"name": "automatic",
					"description": "Zoom changes are handled automatically by the browser."
				},
				{
					"name": "manual",
					"description": "Overrides the automatic handling of zoom changes. The <code>onZoomChange</code> event will still be dispatched, and it is the responsibility of the extension to listen for this event and manually scale the page. This mode does not support <code>per-origin</code> zooming, and will thus ignore the <code>scope</code> zoom setting and assume <code>per-tab</code>."
				},
				{
					"name": "disabled",
					"description": "Disables all zooming in the tab. The tab will revert to the default zoom level, and all attempted zoom changes will be ignored."
				}
			]
		},
		"ZoomSettingsScope": {
			"type": "string",
			"description": "Defines whether zoom changes will persist for the page's origin, or only take effect in this tab; defaults to <code>per-origin</code> when in <code>automatic</code> mode, and <code>per-tab</code> otherwise.",
			"enum": [
				{
					"name": "per-origin",
					"description": "Zoom changes will persist in the zoomed page's origin, i.e. all other tabs navigated to that same origin will be zoomed as well. Moreover, <code>per-origin</code> zoom changes are saved with the origin, meaning that when navigating to other pages in the same origin, they will all be zoomed to the same zoom factor. The <code>per-origin</code> scope is only available in the <code>automatic</code> mode."
				},
				{
					"name": "per-tab",
					"description": "Zoom changes only take effect in this tab, and zoom changes in other tabs will not affect the zooming of this tab. Also, <code>per-tab</code> zoom changes are reset on navigation; navigating a tab will always load pages with their <code>per-origin</code> zoom factors."
				}
			]
		},
		"ZoomSettings": {
			"type": "object",
			"description": "Defines how zoom changes in a tab are handled and at what scope.",
			"properties": {
				"mode": {
					"allOf": [
						{
							"$ref": "#/types/ZoomSettingsMode"
						},
						{
							"description": "Defines how zoom changes are handled, i.e. which entity is responsible for the actual scaling of the page; defaults to <code>automatic</code>."
						}
					]
				},
				"scope": {
					"allOf": [
						{
							"$ref": "#/types/ZoomSettingsScope"
						},
						{
							"description": "Defines whether zoom changes will persist for the page's origin, or only take effect in this tab; defaults to <code>per-origin</code> when in <code>automatic</code> mode, and <code>per-tab</code> otherwise."
						}
					]
				},
				"defaultZoomFactor": {
					"type": "number",
					"description": "Used to return the default zoom level for the current tab in calls to tabs.getZoomSettings."
				}
			}
		},
		"TabStatus": {
			"type": "string",
			"enum": [
				"loading",
				"complete"
			],
			"description": "Whether the tabs have completed loading."
		},
		"WindowType": {
			"type": "string",
			"enum": [
				"normal",
				"popup",
				"panel",
				"app",
				"devtools"
			],
			"description": "The type of window."
		}
	}
};

/***/ }),
/* 107 */
/***/ (function(module, exports) {

module.exports = {
	"id": "test",
	"allowedContexts": [
		"content",
		"devtools"
	],
	"defaultContexts": [
		"content",
		"devtools"
	],
	"description": "none",
	"functions": [
		{
			"name": "notifyFail",
			"type": "function",
			"description": "Notifies the browser process that test code running in the extension failed.  This is only used for internal unit testing.",
			"parameters": [
				{
					"type": "string",
					"name": "message"
				}
			]
		},
		{
			"name": "notifyPass",
			"type": "function",
			"description": "Notifies the browser process that test code running in the extension passed.  This is only used for internal unit testing.",
			"parameters": [
				{
					"type": "string",
					"name": "message",
					"optional": true
				}
			]
		},
		{
			"name": "log",
			"type": "function",
			"description": "Logs a message during internal unit testing.",
			"parameters": [
				{
					"type": "string",
					"name": "message"
				}
			]
		},
		{
			"name": "sendMessage",
			"type": "function",
			"description": "Sends a string message to the browser process, generating a Notification that C++ test code can wait for.",
			"allowAmbiguousOptionalArguments": true,
			"parameters": [
				{
					"name": "arg1",
					"optional": true
				},
				{
					"name": "arg2",
					"optional": true
				}
			]
		},
		{
			"name": "fail",
			"type": "function",
			"parameters": [
				{
					"name": "message",
					"optional": true
				}
			]
		},
		{
			"name": "succeed",
			"type": "function",
			"parameters": [
				{
					"name": "message",
					"optional": true
				}
			]
		},
		{
			"name": "assertTrue",
			"type": "function",
			"allowAmbiguousOptionalArguments": true,
			"parameters": [
				{
					"name": "test",
					"optional": true
				},
				{
					"type": "string",
					"name": "message",
					"optional": true
				}
			]
		},
		{
			"name": "assertFalse",
			"type": "function",
			"allowAmbiguousOptionalArguments": true,
			"parameters": [
				{
					"name": "test",
					"optional": true
				},
				{
					"type": "string",
					"name": "message",
					"optional": true
				}
			]
		},
		{
			"name": "assertBool",
			"type": "function",
			"unsupported": true,
			"parameters": [
				{
					"name": "test",
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "boolean"
						}
					]
				},
				{
					"type": "boolean",
					"name": "expected"
				},
				{
					"type": "string",
					"name": "message",
					"optional": true
				}
			]
		},
		{
			"name": "checkDeepEq",
			"type": "function",
			"unsupported": true,
			"allowAmbiguousOptionalArguments": true,
			"parameters": [
				{
					"name": "expected"
				},
				{
					"name": "actual"
				}
			]
		},
		{
			"name": "assertEq",
			"type": "function",
			"allowAmbiguousOptionalArguments": true,
			"parameters": [
				{
					"name": "expected",
					"optional": true
				},
				{
					"name": "actual",
					"optional": true
				},
				{
					"type": "string",
					"name": "message",
					"optional": true
				}
			]
		},
		{
			"name": "assertNoLastError",
			"type": "function",
			"unsupported": true,
			"parameters": []
		},
		{
			"name": "assertLastError",
			"type": "function",
			"unsupported": true,
			"parameters": [
				{
					"type": "string",
					"name": "expectedError"
				}
			]
		},
		{
			"name": "assertRejects",
			"type": "function",
			"async": true,
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/Promise"
						},
						{
							"name": "promise"
						}
					]
				},
				{
					"allOf": [
						{
							"$ref": "#/types/ExpectedError"
						},
						{
							"name": "expectedError",
							"optional": true
						}
					]
				},
				{
					"name": "message",
					"type": "string",
					"optional": true
				}
			]
		},
		{
			"name": "assertThrows",
			"type": "function",
			"parameters": [
				{
					"name": "func",
					"type": "function"
				},
				{
					"allOf": [
						{
							"$ref": "#/types/ExpectedError"
						},
						{
							"name": "expectedError",
							"optional": true
						}
					]
				},
				{
					"name": "message",
					"type": "string",
					"optional": true
				}
			]
		}
	],
	"events": [
		{
			"name": "onMessage",
			"type": "function",
			"description": "Used to test sending messages to extensions.",
			"parameters": [
				{
					"type": "string",
					"name": "message"
				},
				{
					"name": "argument"
				}
			]
		}
	],
	"definitions": {},
	"refs": {},
	"types": {
		"ExpectedError": {
			"anyOf": [
				{
					"type": "string"
				},
				{
					"type": "object",
					"isInstanceOf": "RegExp",
					"additionalProperties": true
				},
				{
					"type": "function"
				}
			]
		},
		"Promise": {
			"anyOf": [
				{
					"type": "object",
					"properties": {
						"then": {
							"type": "function"
						}
					},
					"additionalProperties": true,
					"required": [
						"then"
					]
				},
				{
					"type": "object",
					"isInstanceOf": "Promise",
					"additionalProperties": true
				}
			]
		}
	}
};

/***/ }),
/* 108 */
/***/ (function(module, exports) {

module.exports = {
	"id": "theme",
	"description": "The theme API allows customizing of visual elements of the browser.",
	"permissions": [
		"manifest:theme"
	],
	"functions": [
		{
			"name": "update",
			"type": "function",
			"async": true,
			"description": "Make complete or partial updates to the theme. Resolves when the update has completed.",
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "manifest#/types/ThemeType"
						},
						{
							"name": "details",
							"description": "The properties of the theme to update."
						}
					]
				}
			]
		}
	],
	"definitions": {
		"WebExtensionManifest": {
			"properties": {
				"theme": {
					"$ref": "#/types/ThemeType"
				}
			}
		}
	},
	"refs": {
		"theme#/definitions/WebExtensionManifest": {
			"namespace": "manifest",
			"type": "WebExtensionManifest"
		}
	},
	"types": {
		"ThemeType": {
			"type": "object",
			"properties": {
				"images": {
					"type": "object",
					"properties": {
						"headerURL": {
							"type": "string"
						},
						"theme_frame": {
							"type": "string"
						}
					}
				},
				"colors": {
					"type": "object",
					"properties": {
						"accentcolor": {
							"type": "string"
						},
						"frame": {
							"type": "array",
							"items": {
								"type": "number"
							}
						},
						"tab_text": {
							"type": "array",
							"items": {
								"type": "number"
							}
						},
						"textcolor": {
							"type": "string"
						}
					}
				}
			}
		}
	}
};

/***/ }),
/* 109 */
/***/ (function(module, exports) {

module.exports = {
	"id": "topSites",
	"description": "Use the chrome.topSites API to access the top sites that are displayed on the new tab page. ",
	"permissions": [
		"topSites"
	],
	"functions": [
		{
			"name": "get",
			"type": "function",
			"description": "Gets a list of top sites.",
			"async": "callback",
			"parameters": [
				{
					"name": "callback",
					"type": "function",
					"parameters": [
						{
							"name": "results",
							"type": "array",
							"items": {
								"$ref": "#/types/MostVisitedURL"
							}
						}
					]
				}
			]
		}
	],
	"definitions": {
		"Permission": {
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"topSites"
					]
				}
			]
		}
	},
	"refs": {
		"topSites#/definitions/Permission": {
			"namespace": "manifest",
			"type": "Permission"
		}
	},
	"types": {
		"MostVisitedURL": {
			"type": "object",
			"description": "An object encapsulating a most visited URL, such as the URLs on the new tab page.",
			"properties": {
				"url": {
					"type": "string",
					"description": "The most visited URL."
				},
				"title": {
					"type": "string",
					"description": "The title of the page."
				}
			},
			"required": [
				"url"
			]
		}
	}
};

/***/ }),
/* 110 */
/***/ (function(module, exports) {

module.exports = {
	"id": "types",
	"description": "Contains types used by other schemas.",
	"definitions": {},
	"refs": {},
	"types": {
		"SettingScope": {
			"type": "string",
			"enum": [
				"regular",
				"regular_only",
				"incognito_persistent",
				"incognito_session_only"
			],
			"description": "The scope of the Setting. One of<ul><li><var>regular</var>: setting for the regular profile (which is inherited by the incognito profile if not overridden elsewhere),</li><li><var>regular_only</var>: setting for the regular profile only (not inherited by the incognito profile),</li><li><var>incognito_persistent</var>: setting for the incognito profile that survives browser restarts (overrides regular preferences),</li><li><var>incognito_session_only</var>: setting for the incognito profile that can only be set during an incognito session and is deleted when the incognito session ends (overrides regular and incognito_persistent preferences).</li></ul> Only <var>regular</var> is supported by Firefox at this time."
		},
		"LevelOfControl": {
			"type": "string",
			"enum": [
				"not_controllable",
				"controlled_by_other_extensions",
				"controllable_by_this_extension",
				"controlled_by_this_extension"
			],
			"description": "One of<ul><li><var>not_controllable</var>: cannot be controlled by any extension</li><li><var>controlled_by_other_extensions</var>: controlled by extensions with higher precedence</li><li><var>controllable_by_this_extension</var>: can be controlled by this extension</li><li><var>controlled_by_this_extension</var>: controlled by this extension</li></ul>"
		},
		"Setting": {
			"type": "object",
			"functions": [
				{
					"name": "get",
					"type": "function",
					"description": "Gets the value of a setting.",
					"async": "callback",
					"parameters": [
						{
							"name": "details",
							"type": "object",
							"description": "Which setting to consider.",
							"properties": {
								"incognito": {
									"type": "boolean",
									"description": "Whether to return the value that applies to the incognito session (default false)."
								}
							}
						},
						{
							"name": "callback",
							"type": "function",
							"parameters": [
								{
									"name": "details",
									"type": "object",
									"description": "Details of the currently effective value.",
									"properties": {
										"value": {
											"description": "The value of the setting."
										},
										"levelOfControl": {
											"allOf": [
												{
													"$ref": "#/types/LevelOfControl"
												},
												{
													"description": "The level of control of the setting."
												}
											]
										},
										"incognitoSpecific": {
											"description": "Whether the effective value is specific to the incognito session.<br/>This property will <em>only</em> be present if the <var>incognito</var> property in the <var>details</var> parameter of <code>get()</code> was true.",
											"type": "boolean"
										}
									},
									"required": [
										"value",
										"levelOfControl"
									]
								}
							]
						}
					]
				},
				{
					"name": "set",
					"type": "function",
					"description": "Sets the value of a setting.",
					"async": "callback",
					"parameters": [
						{
							"name": "details",
							"type": "object",
							"description": "Which setting to change.",
							"properties": {
								"value": {
									"description": "The value of the setting. <br/>Note that every setting has a specific value type, which is described together with the setting. An extension should <em>not</em> set a value of a different type."
								},
								"scope": {
									"allOf": [
										{
											"$ref": "#/types/SettingScope"
										},
										{
											"description": "Where to set the setting (default: regular)."
										}
									]
								}
							},
							"required": [
								"value"
							]
						},
						{
							"name": "callback",
							"type": "function",
							"description": "Called at the completion of the set operation.",
							"optional": true,
							"parameters": []
						}
					]
				},
				{
					"name": "clear",
					"type": "function",
					"description": "Clears the setting, restoring any default value.",
					"async": "callback",
					"parameters": [
						{
							"name": "details",
							"type": "object",
							"description": "Which setting to clear.",
							"properties": {
								"scope": {
									"allOf": [
										{
											"$ref": "#/types/SettingScope"
										},
										{
											"description": "Where to clear the setting (default: regular)."
										}
									]
								}
							}
						},
						{
							"name": "callback",
							"type": "function",
							"description": "Called at the completion of the clear operation.",
							"optional": true,
							"parameters": []
						}
					]
				}
			],
			"events": [
				{
					"name": "onChange",
					"type": "function",
					"description": "Fired after the setting changes.",
					"unsupported": true,
					"parameters": [
						{
							"type": "object",
							"name": "details",
							"properties": {
								"value": {
									"description": "The value of the setting after the change."
								},
								"levelOfControl": {
									"allOf": [
										{
											"$ref": "#/types/LevelOfControl"
										},
										{
											"description": "The level of control of the setting."
										}
									]
								},
								"incognitoSpecific": {
									"description": "Whether the value that has changed is specific to the incognito session.<br/>This property will <em>only</em> be present if the user has enabled the extension in incognito mode.",
									"type": "boolean"
								}
							},
							"required": [
								"value",
								"levelOfControl"
							]
						}
					]
				}
			]
		}
	}
};

/***/ }),
/* 111 */
/***/ (function(module, exports) {

module.exports = {
	"id": "url_overrides",
	"definitions": {
		"WebExtensionManifest": {
			"properties": {
				"chrome_url_overrides": {
					"type": "object",
					"properties": {
						"newtab": {
							"allOf": [
								{
									"$ref": "manifest#/types/ExtensionURL"
								},
								{
									"preprocess": "localize"
								}
							]
						},
						"home": {
							"allOf": [
								{
									"$ref": "manifest#/types/ExtensionURL"
								},
								{
									"preprocess": "localize"
								}
							]
						},
						"bookmarks": {
							"allOf": [
								{
									"$ref": "manifest#/types/ExtensionURL"
								},
								{
									"unsupported": true,
									"preprocess": "localize"
								}
							]
						},
						"history": {
							"allOf": [
								{
									"$ref": "manifest#/types/ExtensionURL"
								},
								{
									"unsupported": true,
									"preprocess": "localize"
								}
							]
						}
					}
				}
			}
		}
	},
	"refs": {
		"url_overrides#/definitions/WebExtensionManifest": {
			"namespace": "manifest",
			"type": "WebExtensionManifest"
		}
	},
	"types": {}
};

/***/ }),
/* 112 */
/***/ (function(module, exports) {

module.exports = {
	"id": "webNavigation",
	"description": "Use the <code>browser.webNavigation</code> API to receive notifications about the status of navigation requests in-flight.",
	"permissions": [
		"webNavigation"
	],
	"functions": [
		{
			"name": "getFrame",
			"type": "function",
			"description": "Retrieves information about the given frame. A frame refers to an &lt;iframe&gt; or a &lt;frame&gt; of a web page and is identified by a tab ID and a frame ID.",
			"async": "callback",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"description": "Information about the frame to retrieve information about.",
					"properties": {
						"tabId": {
							"type": "integer",
							"minimum": 0,
							"description": "The ID of the tab in which the frame is."
						},
						"processId": {
							"type": "integer",
							"description": "The ID of the process runs the renderer for this tab."
						},
						"frameId": {
							"type": "integer",
							"minimum": 0,
							"description": "The ID of the frame in the given tab."
						}
					},
					"required": [
						"tabId",
						"frameId"
					]
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"type": "object",
							"name": "details",
							"optional": true,
							"description": "Information about the requested frame, null if the specified frame ID and/or tab ID are invalid.",
							"properties": {
								"errorOccurred": {
									"unsupported": true,
									"type": "boolean",
									"description": "True if the last navigation in this frame was interrupted by an error, i.e. the onErrorOccurred event fired."
								},
								"url": {
									"type": "string",
									"description": "The URL currently associated with this frame, if the frame identified by the frameId existed at one point in the given tab. The fact that an URL is associated with a given frameId does not imply that the corresponding frame still exists."
								},
								"parentFrameId": {
									"type": "integer",
									"description": "ID of frame that wraps the frame. Set to -1 of no parent frame exists."
								}
							},
							"required": [
								"errorOccurred",
								"url",
								"parentFrameId"
							]
						}
					]
				}
			]
		},
		{
			"name": "getAllFrames",
			"type": "function",
			"description": "Retrieves information about all frames of a given tab.",
			"async": "callback",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"description": "Information about the tab to retrieve all frames from.",
					"properties": {
						"tabId": {
							"type": "integer",
							"minimum": 0,
							"description": "The ID of the tab."
						}
					},
					"required": [
						"tabId"
					]
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "details",
							"type": "array",
							"description": "A list of frames in the given tab, null if the specified tab ID is invalid.",
							"optional": true,
							"items": {
								"type": "object",
								"properties": {
									"errorOccurred": {
										"unsupported": true,
										"type": "boolean",
										"description": "True if the last navigation in this frame was interrupted by an error, i.e. the onErrorOccurred event fired."
									},
									"processId": {
										"unsupported": true,
										"type": "integer",
										"description": "The ID of the process runs the renderer for this tab."
									},
									"frameId": {
										"type": "integer",
										"description": "The ID of the frame. 0 indicates that this is the main frame; a positive value indicates the ID of a subframe."
									},
									"parentFrameId": {
										"type": "integer",
										"description": "ID of frame that wraps the frame. Set to -1 of no parent frame exists."
									},
									"url": {
										"type": "string",
										"description": "The URL currently associated with this frame."
									}
								},
								"required": [
									"errorOccurred",
									"processId",
									"frameId",
									"parentFrameId",
									"url"
								]
							}
						}
					]
				}
			]
		}
	],
	"events": [
		{
			"name": "onBeforeNavigate",
			"type": "function",
			"description": "Fired when a navigation is about to occur.",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"properties": {
						"tabId": {
							"type": "integer",
							"description": "The ID of the tab in which the navigation is about to occur."
						},
						"url": {
							"type": "string"
						},
						"processId": {
							"unsupported": true,
							"type": "integer",
							"description": "The ID of the process runs the renderer for this tab."
						},
						"frameId": {
							"type": "integer",
							"description": "0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique for a given tab and process."
						},
						"parentFrameId": {
							"type": "integer",
							"description": "ID of frame that wraps the frame. Set to -1 of no parent frame exists."
						},
						"timeStamp": {
							"type": "number",
							"description": "The time when the browser was about to start the navigation, in milliseconds since the epoch."
						}
					},
					"required": [
						"tabId",
						"url",
						"processId",
						"frameId",
						"parentFrameId",
						"timeStamp"
					]
				}
			],
			"extraParameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/EventUrlFilters"
						},
						{
							"name": "filters",
							"optional": true,
							"description": "Conditions that the URL being navigated to must satisfy. The 'schemes' and 'ports' fields of UrlFilter are ignored for this event."
						}
					]
				}
			]
		},
		{
			"name": "onCommitted",
			"type": "function",
			"description": "Fired when a navigation is committed. The document (and the resources it refers to, such as images and subframes) might still be downloading, but at least part of the document has been received from the server and the browser has decided to switch to the new document.",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"properties": {
						"tabId": {
							"type": "integer",
							"description": "The ID of the tab in which the navigation occurs."
						},
						"url": {
							"type": "string"
						},
						"processId": {
							"unsupported": true,
							"type": "integer",
							"description": "The ID of the process runs the renderer for this tab."
						},
						"frameId": {
							"type": "integer",
							"description": "0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique within a tab."
						},
						"transitionType": {
							"allOf": [
								{
									"$ref": "#/types/TransitionType"
								},
								{
									"unsupported": true,
									"description": "Cause of the navigation."
								}
							]
						},
						"transitionQualifiers": {
							"unsupported": true,
							"type": "array",
							"description": "A list of transition qualifiers.",
							"items": {
								"$ref": "#/types/TransitionQualifier"
							}
						},
						"timeStamp": {
							"type": "number",
							"description": "The time when the navigation was committed, in milliseconds since the epoch."
						}
					},
					"required": [
						"tabId",
						"url",
						"processId",
						"frameId",
						"transitionType",
						"transitionQualifiers",
						"timeStamp"
					]
				}
			],
			"extraParameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/EventUrlFilters"
						},
						{
							"name": "filters",
							"optional": true,
							"description": "Conditions that the URL being navigated to must satisfy. The 'schemes' and 'ports' fields of UrlFilter are ignored for this event."
						}
					]
				}
			]
		},
		{
			"name": "onDOMContentLoaded",
			"type": "function",
			"description": "Fired when the page's DOM is fully constructed, but the referenced resources may not finish loading.",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"properties": {
						"tabId": {
							"type": "integer",
							"description": "The ID of the tab in which the navigation occurs."
						},
						"url": {
							"type": "string"
						},
						"processId": {
							"unsupported": true,
							"type": "integer",
							"description": "The ID of the process runs the renderer for this tab."
						},
						"frameId": {
							"type": "integer",
							"description": "0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique within a tab."
						},
						"timeStamp": {
							"type": "number",
							"description": "The time when the page's DOM was fully constructed, in milliseconds since the epoch."
						}
					},
					"required": [
						"tabId",
						"url",
						"processId",
						"frameId",
						"timeStamp"
					]
				}
			],
			"extraParameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/EventUrlFilters"
						},
						{
							"name": "filters",
							"optional": true,
							"description": "Conditions that the URL being navigated to must satisfy. The 'schemes' and 'ports' fields of UrlFilter are ignored for this event."
						}
					]
				}
			]
		},
		{
			"name": "onCompleted",
			"type": "function",
			"description": "Fired when a document, including the resources it refers to, is completely loaded and initialized.",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"properties": {
						"tabId": {
							"type": "integer",
							"description": "The ID of the tab in which the navigation occurs."
						},
						"url": {
							"type": "string"
						},
						"processId": {
							"unsupported": true,
							"type": "integer",
							"description": "The ID of the process runs the renderer for this tab."
						},
						"frameId": {
							"type": "integer",
							"description": "0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique within a tab."
						},
						"timeStamp": {
							"type": "number",
							"description": "The time when the document finished loading, in milliseconds since the epoch."
						}
					},
					"required": [
						"tabId",
						"url",
						"processId",
						"frameId",
						"timeStamp"
					]
				}
			],
			"extraParameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/EventUrlFilters"
						},
						{
							"name": "filters",
							"optional": true,
							"description": "Conditions that the URL being navigated to must satisfy. The 'schemes' and 'ports' fields of UrlFilter are ignored for this event."
						}
					]
				}
			]
		},
		{
			"name": "onErrorOccurred",
			"type": "function",
			"description": "Fired when an error occurs and the navigation is aborted. This can happen if either a network error occurred, or the user aborted the navigation.",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"properties": {
						"tabId": {
							"type": "integer",
							"description": "The ID of the tab in which the navigation occurs."
						},
						"url": {
							"type": "string"
						},
						"processId": {
							"unsupported": true,
							"type": "integer",
							"description": "The ID of the process runs the renderer for this tab."
						},
						"frameId": {
							"type": "integer",
							"description": "0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique within a tab."
						},
						"error": {
							"unsupported": true,
							"type": "string",
							"description": "The error description."
						},
						"timeStamp": {
							"type": "number",
							"description": "The time when the error occurred, in milliseconds since the epoch."
						}
					},
					"required": [
						"tabId",
						"url",
						"processId",
						"frameId",
						"error",
						"timeStamp"
					]
				}
			],
			"extraParameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/EventUrlFilters"
						},
						{
							"name": "filters",
							"optional": true,
							"description": "Conditions that the URL being navigated to must satisfy. The 'schemes' and 'ports' fields of UrlFilter are ignored for this event."
						}
					]
				}
			]
		},
		{
			"name": "onCreatedNavigationTarget",
			"type": "function",
			"description": "Fired when a new window, or a new tab in an existing window, is created to host a navigation.",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"properties": {
						"sourceTabId": {
							"type": "integer",
							"description": "The ID of the tab in which the navigation is triggered."
						},
						"sourceProcessId": {
							"type": "integer",
							"description": "The ID of the process runs the renderer for the source tab."
						},
						"sourceFrameId": {
							"type": "integer",
							"description": "The ID of the frame with sourceTabId in which the navigation is triggered. 0 indicates the main frame."
						},
						"url": {
							"type": "string",
							"description": "The URL to be opened in the new window."
						},
						"tabId": {
							"type": "integer",
							"description": "The ID of the tab in which the url is opened"
						},
						"timeStamp": {
							"type": "number",
							"description": "The time when the browser was about to create a new view, in milliseconds since the epoch."
						}
					},
					"required": [
						"sourceTabId",
						"sourceProcessId",
						"sourceFrameId",
						"url",
						"tabId",
						"timeStamp"
					]
				}
			],
			"extraParameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/EventUrlFilters"
						},
						{
							"name": "filters",
							"optional": true,
							"description": "Conditions that the URL being navigated to must satisfy. The 'schemes' and 'ports' fields of UrlFilter are ignored for this event."
						}
					]
				}
			]
		},
		{
			"name": "onReferenceFragmentUpdated",
			"type": "function",
			"description": "Fired when the reference fragment of a frame was updated. All future events for that frame will use the updated URL.",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"properties": {
						"tabId": {
							"type": "integer",
							"description": "The ID of the tab in which the navigation occurs."
						},
						"url": {
							"type": "string"
						},
						"processId": {
							"unsupported": true,
							"type": "integer",
							"description": "The ID of the process runs the renderer for this tab."
						},
						"frameId": {
							"type": "integer",
							"description": "0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique within a tab."
						},
						"transitionType": {
							"allOf": [
								{
									"$ref": "#/types/TransitionType"
								},
								{
									"unsupported": true,
									"description": "Cause of the navigation."
								}
							]
						},
						"transitionQualifiers": {
							"unsupported": true,
							"type": "array",
							"description": "A list of transition qualifiers.",
							"items": {
								"$ref": "#/types/TransitionQualifier"
							}
						},
						"timeStamp": {
							"type": "number",
							"description": "The time when the navigation was committed, in milliseconds since the epoch."
						}
					},
					"required": [
						"tabId",
						"url",
						"processId",
						"frameId",
						"transitionType",
						"transitionQualifiers",
						"timeStamp"
					]
				}
			],
			"extraParameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/EventUrlFilters"
						},
						{
							"name": "filters",
							"optional": true,
							"description": "Conditions that the URL being navigated to must satisfy. The 'schemes' and 'ports' fields of UrlFilter are ignored for this event."
						}
					]
				}
			]
		},
		{
			"name": "onTabReplaced",
			"type": "function",
			"description": "Fired when the contents of the tab is replaced by a different (usually previously pre-rendered) tab.",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"properties": {
						"replacedTabId": {
							"type": "integer",
							"description": "The ID of the tab that was replaced."
						},
						"tabId": {
							"type": "integer",
							"description": "The ID of the tab that replaced the old tab."
						},
						"timeStamp": {
							"type": "number",
							"description": "The time when the replacement happened, in milliseconds since the epoch."
						}
					},
					"required": [
						"replacedTabId",
						"tabId",
						"timeStamp"
					]
				}
			]
		},
		{
			"name": "onHistoryStateUpdated",
			"type": "function",
			"description": "Fired when the frame's history was updated to a new URL. All future events for that frame will use the updated URL.",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"properties": {
						"tabId": {
							"type": "integer",
							"description": "The ID of the tab in which the navigation occurs."
						},
						"url": {
							"type": "string"
						},
						"processId": {
							"unsupported": true,
							"type": "integer",
							"description": "The ID of the process runs the renderer for this tab."
						},
						"frameId": {
							"type": "integer",
							"description": "0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique within a tab."
						},
						"transitionType": {
							"allOf": [
								{
									"$ref": "#/types/TransitionType"
								},
								{
									"unsupported": true,
									"description": "Cause of the navigation."
								}
							]
						},
						"transitionQualifiers": {
							"unsupported": true,
							"type": "array",
							"description": "A list of transition qualifiers.",
							"items": {
								"$ref": "#/types/TransitionQualifier"
							}
						},
						"timeStamp": {
							"type": "number",
							"description": "The time when the navigation was committed, in milliseconds since the epoch."
						}
					},
					"required": [
						"tabId",
						"url",
						"processId",
						"frameId",
						"transitionType",
						"transitionQualifiers",
						"timeStamp"
					]
				}
			],
			"extraParameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/EventUrlFilters"
						},
						{
							"name": "filters",
							"optional": true,
							"description": "Conditions that the URL being navigated to must satisfy. The 'schemes' and 'ports' fields of UrlFilter are ignored for this event."
						}
					]
				}
			]
		}
	],
	"definitions": {
		"Permission": {
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"webNavigation"
					]
				}
			]
		}
	},
	"refs": {
		"webNavigation#/definitions/Permission": {
			"namespace": "manifest",
			"type": "Permission"
		}
	},
	"types": {
		"TransitionType": {
			"type": "string",
			"enum": [
				"link",
				"typed",
				"auto_bookmark",
				"auto_subframe",
				"manual_subframe",
				"generated",
				"start_page",
				"form_submit",
				"reload",
				"keyword",
				"keyword_generated"
			],
			"description": "Cause of the navigation. The same transition types as defined in the history API are used. These are the same transition types as defined in the $(topic:transition_types)[history API] except with <code>\"start_page\"</code> in place of <code>\"auto_toplevel\"</code> (for backwards compatibility)."
		},
		"TransitionQualifier": {
			"type": "string",
			"enum": [
				"client_redirect",
				"server_redirect",
				"forward_back",
				"from_address_bar"
			]
		},
		"EventUrlFilters": {
			"type": "object",
			"properties": {
				"url": {
					"type": "array",
					"minItems": 1,
					"items": {
						"$ref": "events#/types/UrlFilter"
					}
				}
			},
			"required": [
				"url"
			]
		}
	}
};

/***/ }),
/* 113 */
/***/ (function(module, exports) {

module.exports = {
	"id": "webRequest",
	"description": "Use the <code>browser.webRequest</code> API to observe and analyze traffic and to intercept, block, or modify requests in-flight.",
	"permissions": [
		"webRequest"
	],
	"properties": {
		"MAX_HANDLER_BEHAVIOR_CHANGED_CALLS_PER_10_MINUTES": {
			"value": 20,
			"description": "The maximum number of times that <code>handlerBehaviorChanged</code> can be called per 10 minute sustained interval. <code>handlerBehaviorChanged</code> is an expensive function call that shouldn't be called often."
		}
	},
	"functions": [
		{
			"name": "handlerBehaviorChanged",
			"type": "function",
			"description": "Needs to be called when the behavior of the webRequest handlers has changed to prevent incorrect handling due to caching. This function call is expensive. Don't call it often.",
			"async": "callback",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": []
				}
			]
		}
	],
	"events": [
		{
			"name": "onBeforeRequest",
			"type": "function",
			"description": "Fired when a request is about to occur.",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"properties": {
						"requestId": {
							"type": "string",
							"description": "The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request."
						},
						"url": {
							"type": "string"
						},
						"method": {
							"type": "string",
							"description": "Standard HTTP method."
						},
						"frameId": {
							"type": "integer",
							"description": "The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (<code>type</code> is <code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code> indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab."
						},
						"parentFrameId": {
							"type": "integer",
							"description": "ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists."
						},
						"originUrl": {
							"type": "string",
							"description": "URL of the resource that triggered this request."
						},
						"documentUrl": {
							"type": "string",
							"description": "URL of the page into which the requested resource will be loaded."
						},
						"requestBody": {
							"type": "object",
							"description": "Contains the HTTP request body data. Only provided if extraInfoSpec contains 'requestBody'.",
							"properties": {
								"error": {
									"type": "string",
									"description": "Errors when obtaining request body data."
								},
								"formData": {
									"type": "object",
									"description": "If the request method is POST and the body is a sequence of key-value pairs encoded in UTF8, encoded as either multipart/form-data, or application/x-www-form-urlencoded, this dictionary is present and for each key contains the list of all values for that key. If the data is of another media type, or if it is malformed, the dictionary is not present. An example value of this dictionary is {'key': ['value1', 'value2']}.",
									"properties": {},
									"additionalProperties": {
										"type": "array",
										"items": {
											"type": "string"
										}
									}
								},
								"raw": {
									"type": "array",
									"items": {
										"$ref": "#/types/UploadData"
									},
									"description": "If the request method is PUT or POST, and the body is not already parsed in formData, then the unparsed request body elements are contained in this array."
								}
							}
						},
						"tabId": {
							"type": "integer",
							"description": "The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab."
						},
						"type": {
							"allOf": [
								{
									"$ref": "#/types/ResourceType"
								},
								{
									"description": "How the requested resource will be used."
								}
							]
						},
						"timeStamp": {
							"type": "number",
							"description": "The time when this signal is triggered, in milliseconds since the epoch."
						}
					},
					"required": [
						"requestId",
						"url",
						"method",
						"frameId",
						"parentFrameId",
						"tabId",
						"type",
						"timeStamp"
					]
				}
			],
			"extraParameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RequestFilter"
						},
						{
							"name": "filter",
							"description": "A set of filters that restricts the events that will be sent to this listener."
						}
					]
				},
				{
					"type": "array",
					"optional": true,
					"name": "extraInfoSpec",
					"description": "Array of extra information that should be passed to the listener function.",
					"items": {
						"$ref": "#/types/OnBeforeRequestOptions"
					}
				}
			],
			"returns": {
				"allOf": [
					{
						"$ref": "#/types/BlockingResponse"
					},
					{
						"description": "If \"blocking\" is specified in the \"extraInfoSpec\" parameter, the event listener should return an object of this type.",
						"optional": true
					}
				]
			}
		},
		{
			"name": "onBeforeSendHeaders",
			"type": "function",
			"description": "Fired before sending an HTTP request, once the request headers are available. This may occur after a TCP connection is made to the server, but before any HTTP data is sent. ",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"properties": {
						"requestId": {
							"type": "string",
							"description": "The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request."
						},
						"url": {
							"type": "string"
						},
						"method": {
							"type": "string",
							"description": "Standard HTTP method."
						},
						"frameId": {
							"type": "integer",
							"description": "The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (<code>type</code> is <code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code> indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab."
						},
						"parentFrameId": {
							"type": "integer",
							"description": "ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists."
						},
						"originUrl": {
							"type": "string",
							"description": "URL of the resource that triggered this request."
						},
						"documentUrl": {
							"type": "string",
							"description": "URL of the page into which the requested resource will be loaded."
						},
						"tabId": {
							"type": "integer",
							"description": "The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab."
						},
						"type": {
							"allOf": [
								{
									"$ref": "#/types/ResourceType"
								},
								{
									"description": "How the requested resource will be used."
								}
							]
						},
						"timeStamp": {
							"type": "number",
							"description": "The time when this signal is triggered, in milliseconds since the epoch."
						},
						"requestHeaders": {
							"allOf": [
								{
									"$ref": "#/types/HttpHeaders"
								},
								{
									"description": "The HTTP request headers that are going to be sent out with this request."
								}
							]
						}
					},
					"required": [
						"requestId",
						"url",
						"method",
						"frameId",
						"parentFrameId",
						"tabId",
						"type",
						"timeStamp"
					]
				}
			],
			"extraParameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RequestFilter"
						},
						{
							"name": "filter",
							"description": "A set of filters that restricts the events that will be sent to this listener."
						}
					]
				},
				{
					"type": "array",
					"optional": true,
					"name": "extraInfoSpec",
					"description": "Array of extra information that should be passed to the listener function.",
					"items": {
						"$ref": "#/types/OnBeforeSendHeadersOptions"
					}
				}
			],
			"returns": {
				"allOf": [
					{
						"$ref": "#/types/BlockingResponse"
					},
					{
						"description": "If \"blocking\" is specified in the \"extraInfoSpec\" parameter, the event listener should return an object of this type.",
						"optional": true
					}
				]
			}
		},
		{
			"name": "onSendHeaders",
			"type": "function",
			"description": "Fired just before a request is going to be sent to the server (modifications of previous onBeforeSendHeaders callbacks are visible by the time onSendHeaders is fired).",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"properties": {
						"requestId": {
							"type": "string",
							"description": "The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request."
						},
						"url": {
							"type": "string"
						},
						"method": {
							"type": "string",
							"description": "Standard HTTP method."
						},
						"frameId": {
							"type": "integer",
							"description": "The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (<code>type</code> is <code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code> indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab."
						},
						"parentFrameId": {
							"type": "integer",
							"description": "ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists."
						},
						"originUrl": {
							"type": "string",
							"description": "URL of the resource that triggered this request."
						},
						"documentUrl": {
							"type": "string",
							"description": "URL of the page into which the requested resource will be loaded."
						},
						"tabId": {
							"type": "integer",
							"description": "The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab."
						},
						"type": {
							"allOf": [
								{
									"$ref": "#/types/ResourceType"
								},
								{
									"description": "How the requested resource will be used."
								}
							]
						},
						"timeStamp": {
							"type": "number",
							"description": "The time when this signal is triggered, in milliseconds since the epoch."
						},
						"requestHeaders": {
							"allOf": [
								{
									"$ref": "#/types/HttpHeaders"
								},
								{
									"description": "The HTTP request headers that have been sent out with this request."
								}
							]
						}
					},
					"required": [
						"requestId",
						"url",
						"method",
						"frameId",
						"parentFrameId",
						"tabId",
						"type",
						"timeStamp"
					]
				}
			],
			"extraParameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RequestFilter"
						},
						{
							"name": "filter",
							"description": "A set of filters that restricts the events that will be sent to this listener."
						}
					]
				},
				{
					"type": "array",
					"optional": true,
					"name": "extraInfoSpec",
					"description": "Array of extra information that should be passed to the listener function.",
					"items": {
						"$ref": "#/types/OnSendHeadersOptions"
					}
				}
			]
		},
		{
			"name": "onHeadersReceived",
			"type": "function",
			"description": "Fired when HTTP response headers of a request have been received.",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"properties": {
						"requestId": {
							"type": "string",
							"description": "The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request."
						},
						"url": {
							"type": "string"
						},
						"method": {
							"type": "string",
							"description": "Standard HTTP method."
						},
						"frameId": {
							"type": "integer",
							"description": "The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (<code>type</code> is <code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code> indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab."
						},
						"parentFrameId": {
							"type": "integer",
							"description": "ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists."
						},
						"originUrl": {
							"type": "string",
							"description": "URL of the resource that triggered this request."
						},
						"documentUrl": {
							"type": "string",
							"description": "URL of the page into which the requested resource will be loaded."
						},
						"tabId": {
							"type": "integer",
							"description": "The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab."
						},
						"type": {
							"allOf": [
								{
									"$ref": "#/types/ResourceType"
								},
								{
									"description": "How the requested resource will be used."
								}
							]
						},
						"timeStamp": {
							"type": "number",
							"description": "The time when this signal is triggered, in milliseconds since the epoch."
						},
						"statusLine": {
							"type": "string",
							"description": "HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9 responses (i.e., responses that lack a status line)."
						},
						"responseHeaders": {
							"allOf": [
								{
									"$ref": "#/types/HttpHeaders"
								},
								{
									"description": "The HTTP response headers that have been received with this response."
								}
							]
						},
						"statusCode": {
							"type": "integer",
							"description": "Standard HTTP status code returned by the server."
						}
					},
					"required": [
						"requestId",
						"url",
						"method",
						"frameId",
						"parentFrameId",
						"tabId",
						"type",
						"timeStamp",
						"statusLine",
						"statusCode"
					]
				}
			],
			"extraParameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RequestFilter"
						},
						{
							"name": "filter",
							"description": "A set of filters that restricts the events that will be sent to this listener."
						}
					]
				},
				{
					"type": "array",
					"optional": true,
					"name": "extraInfoSpec",
					"description": "Array of extra information that should be passed to the listener function.",
					"items": {
						"$ref": "#/types/OnHeadersReceivedOptions"
					}
				}
			],
			"returns": {
				"allOf": [
					{
						"$ref": "#/types/BlockingResponse"
					},
					{
						"description": "If \"blocking\" is specified in the \"extraInfoSpec\" parameter, the event listener should return an object of this type.",
						"optional": true
					}
				]
			}
		},
		{
			"name": "onAuthRequired",
			"type": "function",
			"description": "Fired when an authentication failure is received. The listener has three options: it can provide authentication credentials, it can cancel the request and display the error page, or it can take no action on the challenge. If bad user credentials are provided, this may be called multiple times for the same request.",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"properties": {
						"requestId": {
							"type": "string",
							"description": "The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request."
						},
						"url": {
							"type": "string"
						},
						"method": {
							"type": "string",
							"description": "Standard HTTP method."
						},
						"frameId": {
							"type": "integer",
							"description": "The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (<code>type</code> is <code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code> indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab."
						},
						"parentFrameId": {
							"type": "integer",
							"description": "ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists."
						},
						"originUrl": {
							"type": "string",
							"description": "URL of the resource that triggered this request."
						},
						"documentUrl": {
							"type": "string",
							"description": "URL of the page into which the requested resource will be loaded."
						},
						"tabId": {
							"type": "integer",
							"description": "The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab."
						},
						"type": {
							"allOf": [
								{
									"$ref": "#/types/ResourceType"
								},
								{
									"description": "How the requested resource will be used."
								}
							]
						},
						"timeStamp": {
							"type": "number",
							"description": "The time when this signal is triggered, in milliseconds since the epoch."
						},
						"scheme": {
							"type": "string",
							"description": "The authentication scheme, e.g. Basic or Digest."
						},
						"realm": {
							"type": "string",
							"description": "The authentication realm provided by the server, if there is one."
						},
						"challenger": {
							"type": "object",
							"description": "The server requesting authentication.",
							"properties": {
								"host": {
									"type": "string"
								},
								"port": {
									"type": "integer"
								}
							},
							"required": [
								"host",
								"port"
							]
						},
						"isProxy": {
							"type": "boolean",
							"description": "True for Proxy-Authenticate, false for WWW-Authenticate."
						},
						"responseHeaders": {
							"allOf": [
								{
									"$ref": "#/types/HttpHeaders"
								},
								{
									"description": "The HTTP response headers that were received along with this response."
								}
							]
						},
						"statusLine": {
							"type": "string",
							"description": "HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9 responses (i.e., responses that lack a status line) or an empty string if there are no headers."
						},
						"statusCode": {
							"type": "integer",
							"description": "Standard HTTP status code returned by the server."
						}
					},
					"required": [
						"requestId",
						"url",
						"method",
						"frameId",
						"parentFrameId",
						"tabId",
						"type",
						"timeStamp",
						"scheme",
						"challenger",
						"isProxy",
						"statusLine",
						"statusCode"
					]
				},
				{
					"type": "function",
					"optional": true,
					"name": "callback",
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/BlockingResponse"
								},
								{
									"name": "response"
								}
							]
						}
					]
				}
			],
			"extraParameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RequestFilter"
						},
						{
							"name": "filter",
							"description": "A set of filters that restricts the events that will be sent to this listener."
						}
					]
				},
				{
					"type": "array",
					"optional": true,
					"name": "extraInfoSpec",
					"description": "Array of extra information that should be passed to the listener function.",
					"items": {
						"$ref": "#/types/OnAuthRequiredOptions"
					}
				}
			],
			"returns": {
				"allOf": [
					{
						"$ref": "#/types/BlockingResponse"
					},
					{
						"description": "If \"blocking\" is specified in the \"extraInfoSpec\" parameter, the event listener should return an object of this type.",
						"optional": true
					}
				]
			}
		},
		{
			"name": "onResponseStarted",
			"type": "function",
			"description": "Fired when the first byte of the response body is received. For HTTP requests, this means that the status line and response headers are available.",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"properties": {
						"requestId": {
							"type": "string",
							"description": "The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request."
						},
						"url": {
							"type": "string"
						},
						"method": {
							"type": "string",
							"description": "Standard HTTP method."
						},
						"frameId": {
							"type": "integer",
							"description": "The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (<code>type</code> is <code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code> indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab."
						},
						"parentFrameId": {
							"type": "integer",
							"description": "ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists."
						},
						"originUrl": {
							"type": "string",
							"description": "URL of the resource that triggered this request."
						},
						"documentUrl": {
							"type": "string",
							"description": "URL of the page into which the requested resource will be loaded."
						},
						"tabId": {
							"type": "integer",
							"description": "The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab."
						},
						"type": {
							"allOf": [
								{
									"$ref": "#/types/ResourceType"
								},
								{
									"description": "How the requested resource will be used."
								}
							]
						},
						"timeStamp": {
							"type": "number",
							"description": "The time when this signal is triggered, in milliseconds since the epoch."
						},
						"ip": {
							"type": "string",
							"description": "The server IP address that the request was actually sent to. Note that it may be a literal IPv6 address."
						},
						"fromCache": {
							"type": "boolean",
							"description": "Indicates if this response was fetched from disk cache."
						},
						"statusCode": {
							"type": "integer",
							"description": "Standard HTTP status code returned by the server."
						},
						"responseHeaders": {
							"allOf": [
								{
									"$ref": "#/types/HttpHeaders"
								},
								{
									"description": "The HTTP response headers that were received along with this response."
								}
							]
						},
						"statusLine": {
							"type": "string",
							"description": "HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9 responses (i.e., responses that lack a status line) or an empty string if there are no headers."
						}
					},
					"required": [
						"requestId",
						"url",
						"method",
						"frameId",
						"parentFrameId",
						"tabId",
						"type",
						"timeStamp",
						"fromCache",
						"statusCode",
						"statusLine"
					]
				}
			],
			"extraParameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RequestFilter"
						},
						{
							"name": "filter",
							"description": "A set of filters that restricts the events that will be sent to this listener."
						}
					]
				},
				{
					"type": "array",
					"optional": true,
					"name": "extraInfoSpec",
					"description": "Array of extra information that should be passed to the listener function.",
					"items": {
						"$ref": "#/types/OnResponseStartedOptions"
					}
				}
			]
		},
		{
			"name": "onBeforeRedirect",
			"type": "function",
			"description": "Fired when a server-initiated redirect is about to occur.",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"properties": {
						"requestId": {
							"type": "string",
							"description": "The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request."
						},
						"url": {
							"type": "string"
						},
						"method": {
							"type": "string",
							"description": "Standard HTTP method."
						},
						"frameId": {
							"type": "integer",
							"description": "The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (<code>type</code> is <code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code> indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab."
						},
						"parentFrameId": {
							"type": "integer",
							"description": "ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists."
						},
						"originUrl": {
							"type": "string",
							"description": "URL of the resource that triggered this request."
						},
						"documentUrl": {
							"type": "string",
							"description": "URL of the page into which the requested resource will be loaded."
						},
						"tabId": {
							"type": "integer",
							"description": "The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab."
						},
						"type": {
							"allOf": [
								{
									"$ref": "#/types/ResourceType"
								},
								{
									"description": "How the requested resource will be used."
								}
							]
						},
						"timeStamp": {
							"type": "number",
							"description": "The time when this signal is triggered, in milliseconds since the epoch."
						},
						"ip": {
							"type": "string",
							"description": "The server IP address that the request was actually sent to. Note that it may be a literal IPv6 address."
						},
						"fromCache": {
							"type": "boolean",
							"description": "Indicates if this response was fetched from disk cache."
						},
						"statusCode": {
							"type": "integer",
							"description": "Standard HTTP status code returned by the server."
						},
						"redirectUrl": {
							"type": "string",
							"description": "The new URL."
						},
						"responseHeaders": {
							"allOf": [
								{
									"$ref": "#/types/HttpHeaders"
								},
								{
									"description": "The HTTP response headers that were received along with this redirect."
								}
							]
						},
						"statusLine": {
							"type": "string",
							"description": "HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9 responses (i.e., responses that lack a status line) or an empty string if there are no headers."
						}
					},
					"required": [
						"requestId",
						"url",
						"method",
						"frameId",
						"parentFrameId",
						"tabId",
						"type",
						"timeStamp",
						"fromCache",
						"statusCode",
						"redirectUrl",
						"statusLine"
					]
				}
			],
			"extraParameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RequestFilter"
						},
						{
							"name": "filter",
							"description": "A set of filters that restricts the events that will be sent to this listener."
						}
					]
				},
				{
					"type": "array",
					"optional": true,
					"name": "extraInfoSpec",
					"description": "Array of extra information that should be passed to the listener function.",
					"items": {
						"$ref": "#/types/OnBeforeRedirectOptions"
					}
				}
			]
		},
		{
			"name": "onCompleted",
			"type": "function",
			"description": "Fired when a request is completed.",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"properties": {
						"requestId": {
							"type": "string",
							"description": "The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request."
						},
						"url": {
							"type": "string"
						},
						"method": {
							"type": "string",
							"description": "Standard HTTP method."
						},
						"frameId": {
							"type": "integer",
							"description": "The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (<code>type</code> is <code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code> indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab."
						},
						"parentFrameId": {
							"type": "integer",
							"description": "ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists."
						},
						"originUrl": {
							"type": "string",
							"description": "URL of the resource that triggered this request."
						},
						"documentUrl": {
							"type": "string",
							"description": "URL of the page into which the requested resource will be loaded."
						},
						"tabId": {
							"type": "integer",
							"description": "The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab."
						},
						"type": {
							"allOf": [
								{
									"$ref": "#/types/ResourceType"
								},
								{
									"description": "How the requested resource will be used."
								}
							]
						},
						"timeStamp": {
							"type": "number",
							"description": "The time when this signal is triggered, in milliseconds since the epoch."
						},
						"ip": {
							"type": "string",
							"description": "The server IP address that the request was actually sent to. Note that it may be a literal IPv6 address."
						},
						"fromCache": {
							"type": "boolean",
							"description": "Indicates if this response was fetched from disk cache."
						},
						"statusCode": {
							"type": "integer",
							"description": "Standard HTTP status code returned by the server."
						},
						"responseHeaders": {
							"allOf": [
								{
									"$ref": "#/types/HttpHeaders"
								},
								{
									"description": "The HTTP response headers that were received along with this response."
								}
							]
						},
						"statusLine": {
							"type": "string",
							"description": "HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9 responses (i.e., responses that lack a status line) or an empty string if there are no headers."
						}
					},
					"required": [
						"requestId",
						"url",
						"method",
						"frameId",
						"parentFrameId",
						"tabId",
						"type",
						"timeStamp",
						"fromCache",
						"statusCode",
						"statusLine"
					]
				}
			],
			"extraParameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RequestFilter"
						},
						{
							"name": "filter",
							"description": "A set of filters that restricts the events that will be sent to this listener."
						}
					]
				},
				{
					"type": "array",
					"optional": true,
					"name": "extraInfoSpec",
					"description": "Array of extra information that should be passed to the listener function.",
					"items": {
						"$ref": "#/types/OnCompletedOptions"
					}
				}
			]
		},
		{
			"name": "onErrorOccurred",
			"type": "function",
			"description": "Fired when an error occurs.",
			"parameters": [
				{
					"type": "object",
					"name": "details",
					"properties": {
						"requestId": {
							"type": "string",
							"description": "The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request."
						},
						"url": {
							"type": "string"
						},
						"method": {
							"type": "string",
							"description": "Standard HTTP method."
						},
						"frameId": {
							"type": "integer",
							"description": "The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (<code>type</code> is <code>main_frame</code> or <code>sub_frame</code>), <code>frameId</code> indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab."
						},
						"parentFrameId": {
							"type": "integer",
							"description": "ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists."
						},
						"originUrl": {
							"type": "string",
							"description": "URL of the resource that triggered this request."
						},
						"documentUrl": {
							"type": "string",
							"description": "URL of the page into which the requested resource will be loaded."
						},
						"tabId": {
							"type": "integer",
							"description": "The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab."
						},
						"type": {
							"allOf": [
								{
									"$ref": "#/types/ResourceType"
								},
								{
									"description": "How the requested resource will be used."
								}
							]
						},
						"timeStamp": {
							"type": "number",
							"description": "The time when this signal is triggered, in milliseconds since the epoch."
						},
						"ip": {
							"type": "string",
							"description": "The server IP address that the request was actually sent to. Note that it may be a literal IPv6 address."
						},
						"fromCache": {
							"type": "boolean",
							"description": "Indicates if this response was fetched from disk cache."
						},
						"error": {
							"type": "string",
							"description": "The error description. This string is <em>not</em> guaranteed to remain backwards compatible between releases. You must not parse and act based upon its content."
						}
					},
					"required": [
						"requestId",
						"url",
						"method",
						"frameId",
						"parentFrameId",
						"tabId",
						"type",
						"timeStamp",
						"fromCache",
						"error"
					]
				}
			],
			"extraParameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/RequestFilter"
						},
						{
							"name": "filter",
							"description": "A set of filters that restricts the events that will be sent to this listener."
						}
					]
				}
			]
		}
	],
	"definitions": {
		"Permission": {
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"webRequest",
						"webRequestBlocking"
					]
				}
			]
		}
	},
	"refs": {
		"webRequest#/definitions/Permission": {
			"namespace": "manifest",
			"type": "Permission"
		}
	},
	"types": {
		"ResourceType": {
			"type": "string",
			"enum": [
				"main_frame",
				"sub_frame",
				"stylesheet",
				"script",
				"image",
				"object",
				"xmlhttprequest",
				"xbl",
				"xslt",
				"ping",
				"beacon",
				"xml_dtd",
				"font",
				"media",
				"websocket",
				"csp_report",
				"imageset",
				"web_manifest",
				"other"
			]
		},
		"OnBeforeRequestOptions": {
			"type": "string",
			"enum": [
				"blocking",
				"requestBody"
			]
		},
		"OnBeforeSendHeadersOptions": {
			"type": "string",
			"enum": [
				"requestHeaders",
				"blocking"
			]
		},
		"OnSendHeadersOptions": {
			"type": "string",
			"enum": [
				"requestHeaders"
			]
		},
		"OnHeadersReceivedOptions": {
			"type": "string",
			"enum": [
				"blocking",
				"responseHeaders"
			]
		},
		"OnAuthRequiredOptions": {
			"type": "string",
			"enum": [
				"responseHeaders",
				"blocking",
				"asyncBlocking"
			]
		},
		"OnResponseStartedOptions": {
			"type": "string",
			"enum": [
				"responseHeaders"
			]
		},
		"OnBeforeRedirectOptions": {
			"type": "string",
			"enum": [
				"responseHeaders"
			]
		},
		"OnCompletedOptions": {
			"type": "string",
			"enum": [
				"responseHeaders"
			]
		},
		"RequestFilter": {
			"type": "object",
			"description": "An object describing filters to apply to webRequest events.",
			"properties": {
				"urls": {
					"type": "array",
					"description": "A list of URLs or URL patterns. Requests that cannot match any of the URLs will be filtered out.",
					"items": {
						"type": "string"
					},
					"minItems": 1
				},
				"types": {
					"type": "array",
					"description": "A list of request types. Requests that cannot match any of the types will be filtered out.",
					"items": {
						"$ref": "#/types/ResourceType"
					},
					"minItems": 1
				},
				"tabId": {
					"type": "integer"
				},
				"windowId": {
					"type": "integer"
				}
			},
			"required": [
				"urls"
			]
		},
		"HttpHeaders": {
			"type": "array",
			"description": "An array of HTTP headers. Each header is represented as a dictionary containing the keys <code>name</code> and either <code>value</code> or <code>binaryValue</code>.",
			"items": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name of the HTTP header."
					},
					"value": {
						"type": "string",
						"description": "Value of the HTTP header if it can be represented by UTF-8."
					},
					"binaryValue": {
						"type": "array",
						"description": "Value of the HTTP header if it cannot be represented by UTF-8, stored as individual byte values (0..255).",
						"items": {
							"type": "integer"
						}
					}
				},
				"required": [
					"name"
				]
			}
		},
		"BlockingResponse": {
			"type": "object",
			"description": "Returns value for event handlers that have the 'blocking' extraInfoSpec applied. Allows the event handler to modify network requests.",
			"properties": {
				"cancel": {
					"type": "boolean",
					"description": "If true, the request is cancelled. Used in onBeforeRequest, this prevents the request from being sent."
				},
				"redirectUrl": {
					"type": "string",
					"description": "Only used as a response to the onBeforeRequest and onHeadersReceived events. If set, the original request is prevented from being sent/completed and is instead redirected to the given URL. Redirections to non-HTTP schemes such as data: are allowed. Redirects initiated by a redirect action use the original request method for the redirect, with one exception: If the redirect is initiated at the onHeadersReceived stage, then the redirect will be issued using the GET method."
				},
				"requestHeaders": {
					"allOf": [
						{
							"$ref": "#/types/HttpHeaders"
						},
						{
							"description": "Only used as a response to the onBeforeSendHeaders event. If set, the request is made with these request headers instead."
						}
					]
				},
				"responseHeaders": {
					"allOf": [
						{
							"$ref": "#/types/HttpHeaders"
						},
						{
							"description": "Only used as a response to the onHeadersReceived event. If set, the server is assumed to have responded with these response headers instead. Only return <code>responseHeaders</code> if you really want to modify the headers in order to limit the number of conflicts (only one extension may modify <code>responseHeaders</code> for each request)."
						}
					]
				},
				"authCredentials": {
					"type": "object",
					"description": "Only used as a response to the onAuthRequired event. If set, the request is made using the supplied credentials.",
					"properties": {
						"username": {
							"type": "string"
						},
						"password": {
							"type": "string"
						}
					},
					"required": [
						"username",
						"password"
					]
				}
			}
		},
		"UploadData": {
			"type": "object",
			"properties": {
				"bytes": {
					"description": "An ArrayBuffer with a copy of the data."
				},
				"file": {
					"type": "string",
					"description": "A string with the file's path and name."
				}
			},
			"description": "Contains data uploaded in a URL request."
		}
	}
};

/***/ }),
/* 114 */
/***/ (function(module, exports) {

module.exports = {
	"id": "windows",
	"description": "Use the <code>browser.windows</code> API to interact with browser windows. You can use this API to create, modify, and rearrange windows in the browser.",
	"properties": {
		"WINDOW_ID_NONE": {
			"value": -1,
			"description": "The windowId value that represents the absence of a browser window."
		},
		"WINDOW_ID_CURRENT": {
			"value": -2,
			"description": "The windowId value that represents the $(topic:current-window)[current window]."
		}
	},
	"functions": [
		{
			"name": "get",
			"type": "function",
			"description": "Gets details about a window.",
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"name": "windowId",
					"minimum": -2
				},
				{
					"type": "object",
					"name": "getInfo",
					"optional": true,
					"description": "",
					"properties": {
						"populate": {
							"type": "boolean",
							"description": "If true, the $(ref:windows.Window) object will have a <var>tabs</var> property that contains a list of the $(ref:tabs.Tab) objects. The <code>Tab</code> objects only contain the <code>url</code>, <code>title</code> and <code>favIconUrl</code> properties if the extension's manifest file includes the <code>\"tabs\"</code> permission."
						},
						"windowTypes": {
							"type": "array",
							"items": {
								"$ref": "#/types/WindowType"
							},
							"description": "If set, the $(ref:windows.Window) returned will be filtered based on its type. If unset the default filter is set to <code>['app', 'normal', 'panel', 'popup']</code>, with <code>'app'</code> and <code>'panel'</code> window types limited to the extension's own windows."
						}
					}
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/Window"
								},
								{
									"name": "window"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "getCurrent",
			"type": "function",
			"description": "Gets the $(topic:current-window)[current window].",
			"async": "callback",
			"parameters": [
				{
					"type": "object",
					"name": "getInfo",
					"optional": true,
					"description": "",
					"properties": {
						"populate": {
							"type": "boolean",
							"description": "If true, the $(ref:windows.Window) object will have a <var>tabs</var> property that contains a list of the $(ref:tabs.Tab) objects. The <code>Tab</code> objects only contain the <code>url</code>, <code>title</code> and <code>favIconUrl</code> properties if the extension's manifest file includes the <code>\"tabs\"</code> permission."
						},
						"windowTypes": {
							"type": "array",
							"items": {
								"$ref": "#/types/WindowType"
							},
							"description": "If set, the $(ref:windows.Window) returned will be filtered based on its type. If unset the default filter is set to <code>['app', 'normal', 'panel', 'popup']</code>, with <code>'app'</code> and <code>'panel'</code> window types limited to the extension's own windows."
						}
					}
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/Window"
								},
								{
									"name": "window"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "getLastFocused",
			"type": "function",
			"description": "Gets the window that was most recently focused &mdash; typically the window 'on top'.",
			"async": "callback",
			"parameters": [
				{
					"type": "object",
					"name": "getInfo",
					"optional": true,
					"description": "",
					"properties": {
						"populate": {
							"type": "boolean",
							"description": "If true, the $(ref:windows.Window) object will have a <var>tabs</var> property that contains a list of the $(ref:tabs.Tab) objects. The <code>Tab</code> objects only contain the <code>url</code>, <code>title</code> and <code>favIconUrl</code> properties if the extension's manifest file includes the <code>\"tabs\"</code> permission."
						},
						"windowTypes": {
							"type": "array",
							"items": {
								"$ref": "#/types/WindowType"
							},
							"description": "If set, the $(ref:windows.Window) returned will be filtered based on its type. If unset the default filter is set to <code>['app', 'normal', 'panel', 'popup']</code>, with <code>'app'</code> and <code>'panel'</code> window types limited to the extension's own windows."
						}
					}
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/Window"
								},
								{
									"name": "window"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "getAll",
			"type": "function",
			"description": "Gets all windows.",
			"async": "callback",
			"parameters": [
				{
					"type": "object",
					"name": "getInfo",
					"optional": true,
					"description": "",
					"properties": {
						"populate": {
							"type": "boolean",
							"description": "If true, each $(ref:windows.Window) object will have a <var>tabs</var> property that contains a list of the $(ref:tabs.Tab) objects for that window. The <code>Tab</code> objects only contain the <code>url</code>, <code>title</code> and <code>favIconUrl</code> properties if the extension's manifest file includes the <code>\"tabs\"</code> permission."
						},
						"windowTypes": {
							"type": "array",
							"items": {
								"$ref": "#/types/WindowType"
							},
							"description": "If set, the $(ref:windows.Window) returned will be filtered based on its type. If unset the default filter is set to <code>['app', 'normal', 'panel', 'popup']</code>, with <code>'app'</code> and <code>'panel'</code> window types limited to the extension's own windows."
						}
					}
				},
				{
					"type": "function",
					"name": "callback",
					"parameters": [
						{
							"name": "windows",
							"type": "array",
							"items": {
								"$ref": "#/types/Window"
							}
						}
					]
				}
			]
		},
		{
			"name": "create",
			"type": "function",
			"description": "Creates (opens) a new browser with any optional sizing, position or default URL provided.",
			"async": "callback",
			"parameters": [
				{
					"type": "object",
					"name": "createData",
					"properties": {
						"url": {
							"description": "A URL or array of URLs to open as tabs in the window. Fully-qualified URLs must include a scheme (i.e. 'http://www.google.com', not 'www.google.com'). Relative URLs will be relative to the current page within the extension. Defaults to the New Tab Page.",
							"anyOf": [
								{
									"type": "string",
									"format": "relativeUrl"
								},
								{
									"type": "array",
									"items": {
										"type": "string",
										"format": "relativeUrl"
									}
								}
							]
						},
						"tabId": {
							"type": "integer",
							"minimum": 0,
							"description": "The id of the tab for which you want to adopt to the new window."
						},
						"left": {
							"type": "integer",
							"description": "The number of pixels to position the new window from the left edge of the screen. If not specified, the new window is offset naturally from the last focused window. This value is ignored for panels."
						},
						"top": {
							"type": "integer",
							"description": "The number of pixels to position the new window from the top edge of the screen. If not specified, the new window is offset naturally from the last focused window. This value is ignored for panels."
						},
						"width": {
							"type": "integer",
							"minimum": 0,
							"description": "The width in pixels of the new window, including the frame. If not specified defaults to a natural width."
						},
						"height": {
							"type": "integer",
							"minimum": 0,
							"description": "The height in pixels of the new window, including the frame. If not specified defaults to a natural height."
						},
						"focused": {
							"unsupported": true,
							"type": "boolean",
							"description": "If true, opens an active window. If false, opens an inactive window."
						},
						"incognito": {
							"type": "boolean",
							"description": "Whether the new window should be an incognito window."
						},
						"type": {
							"allOf": [
								{
									"$ref": "#/types/CreateType"
								},
								{
									"description": "Specifies what type of browser window to create. The 'panel' and 'detached_panel' types create a popup unless the '--enable-panels' flag is set."
								}
							]
						},
						"state": {
							"allOf": [
								{
									"$ref": "#/types/WindowState"
								},
								{
									"description": "The initial state of the window. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'."
								}
							]
						},
						"allowScriptsToClose": {
							"type": "boolean",
							"description": "Allow scripts to close the window."
						}
					},
					"optional": true
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/Window"
								},
								{
									"name": "window",
									"description": "Contains details about the created window.",
									"optional": true
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "update",
			"type": "function",
			"description": "Updates the properties of a window. Specify only the properties that you want to change; unspecified properties will be left unchanged.",
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"name": "windowId",
					"minimum": -2
				},
				{
					"type": "object",
					"name": "updateInfo",
					"properties": {
						"left": {
							"type": "integer",
							"description": "The offset from the left edge of the screen to move the window to in pixels. This value is ignored for panels."
						},
						"top": {
							"type": "integer",
							"description": "The offset from the top edge of the screen to move the window to in pixels. This value is ignored for panels."
						},
						"width": {
							"type": "integer",
							"minimum": 0,
							"description": "The width to resize the window to in pixels. This value is ignored for panels."
						},
						"height": {
							"type": "integer",
							"minimum": 0,
							"description": "The height to resize the window to in pixels. This value is ignored for panels."
						},
						"focused": {
							"type": "boolean",
							"description": "If true, brings the window to the front. If false, brings the next window in the z-order to the front."
						},
						"drawAttention": {
							"type": "boolean",
							"description": "If true, causes the window to be displayed in a manner that draws the user's attention to the window, without changing the focused window. The effect lasts until the user changes focus to the window. This option has no effect if the window already has focus. Set to false to cancel a previous draw attention request."
						},
						"state": {
							"allOf": [
								{
									"$ref": "#/types/WindowState"
								},
								{
									"description": "The new state of the window. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'."
								}
							]
						}
					}
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": [
						{
							"allOf": [
								{
									"$ref": "#/types/Window"
								},
								{
									"name": "window"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "remove",
			"type": "function",
			"description": "Removes (closes) a window, and all the tabs inside it.",
			"async": "callback",
			"parameters": [
				{
					"type": "integer",
					"name": "windowId",
					"minimum": 0
				},
				{
					"type": "function",
					"name": "callback",
					"optional": true,
					"parameters": []
				}
			]
		}
	],
	"events": [
		{
			"name": "onCreated",
			"type": "function",
			"description": "Fired when a window is created.",
			"filters": [
				{
					"name": "windowTypes",
					"type": "array",
					"items": {
						"$ref": "#/types/WindowType"
					},
					"description": "Conditions that the window's type being created must satisfy. By default it will satisfy <code>['app', 'normal', 'panel', 'popup']</code>, with <code>'app'</code> and <code>'panel'</code> window types limited to the extension's own windows."
				}
			],
			"parameters": [
				{
					"allOf": [
						{
							"$ref": "#/types/Window"
						},
						{
							"name": "window",
							"description": "Details of the window that was created."
						}
					]
				}
			]
		},
		{
			"name": "onRemoved",
			"type": "function",
			"description": "Fired when a window is removed (closed).",
			"filters": [
				{
					"name": "windowTypes",
					"type": "array",
					"items": {
						"$ref": "#/types/WindowType"
					},
					"description": "Conditions that the window's type being removed must satisfy. By default it will satisfy <code>['app', 'normal', 'panel', 'popup']</code>, with <code>'app'</code> and <code>'panel'</code> window types limited to the extension's own windows."
				}
			],
			"parameters": [
				{
					"type": "integer",
					"name": "windowId",
					"minimum": 0,
					"description": "ID of the removed window."
				}
			]
		},
		{
			"name": "onFocusChanged",
			"type": "function",
			"description": "Fired when the currently focused window changes. Will be $(ref:windows.WINDOW_ID_NONE) if all browser windows have lost focus. Note: On some Linux window managers, WINDOW_ID_NONE will always be sent immediately preceding a switch from one browser window to another.",
			"filters": [
				{
					"name": "windowTypes",
					"type": "array",
					"items": {
						"$ref": "#/types/WindowType"
					},
					"description": "Conditions that the window's type being removed must satisfy. By default it will satisfy <code>['app', 'normal', 'panel', 'popup']</code>, with <code>'app'</code> and <code>'panel'</code> window types limited to the extension's own windows."
				}
			],
			"parameters": [
				{
					"type": "integer",
					"name": "windowId",
					"minimum": -1,
					"description": "ID of the newly focused window."
				}
			]
		}
	],
	"definitions": {},
	"refs": {},
	"types": {
		"WindowType": {
			"type": "string",
			"description": "The type of browser window this is. Under some circumstances a Window may not be assigned type property, for example when querying closed windows from the $(ref:sessions) API.",
			"enum": [
				"normal",
				"popup",
				"panel",
				"app",
				"devtools"
			]
		},
		"WindowState": {
			"type": "string",
			"description": "The state of this browser window. Under some circumstances a Window may not be assigned state property, for example when querying closed windows from the $(ref:sessions) API.",
			"enum": [
				"normal",
				"minimized",
				"maximized",
				"fullscreen",
				"docked"
			]
		},
		"Window": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"minimum": 0,
					"description": "The ID of the window. Window IDs are unique within a browser session. Under some circumstances a Window may not be assigned an ID, for example when querying windows using the $(ref:sessions) API, in which case a session ID may be present."
				},
				"focused": {
					"type": "boolean",
					"description": "Whether the window is currently the focused window."
				},
				"top": {
					"type": "integer",
					"description": "The offset of the window from the top edge of the screen in pixels. Under some circumstances a Window may not be assigned top property, for example when querying closed windows from the $(ref:sessions) API."
				},
				"left": {
					"type": "integer",
					"description": "The offset of the window from the left edge of the screen in pixels. Under some circumstances a Window may not be assigned left property, for example when querying closed windows from the $(ref:sessions) API."
				},
				"width": {
					"type": "integer",
					"description": "The width of the window, including the frame, in pixels. Under some circumstances a Window may not be assigned width property, for example when querying closed windows from the $(ref:sessions) API."
				},
				"height": {
					"type": "integer",
					"description": "The height of the window, including the frame, in pixels. Under some circumstances a Window may not be assigned height property, for example when querying closed windows from the $(ref:sessions) API."
				},
				"tabs": {
					"type": "array",
					"items": {
						"$ref": "tabs#/types/Tab"
					},
					"description": "Array of $(ref:tabs.Tab) objects representing the current tabs in the window."
				},
				"incognito": {
					"type": "boolean",
					"description": "Whether the window is incognito."
				},
				"type": {
					"allOf": [
						{
							"$ref": "#/types/WindowType"
						},
						{
							"description": "The type of browser window this is."
						}
					]
				},
				"state": {
					"allOf": [
						{
							"$ref": "#/types/WindowState"
						},
						{
							"description": "The state of this browser window."
						}
					]
				},
				"alwaysOnTop": {
					"type": "boolean",
					"description": "Whether the window is set to be always on top."
				},
				"sessionId": {
					"type": "string",
					"description": "The session ID used to uniquely identify a Window obtained from the $(ref:sessions) API."
				}
			},
			"required": [
				"focused",
				"incognito",
				"alwaysOnTop"
			]
		},
		"CreateType": {
			"type": "string",
			"description": "Specifies what type of browser window to create. The 'panel' and 'detached_panel' types create a popup unless the '--enable-panels' flag is set.",
			"enum": [
				"normal",
				"popup",
				"panel",
				"detached_panel"
			]
		}
	}
};

/***/ }),
/* 115 */
/***/ (function(module, exports) {

module.exports = require("ajv");

/***/ }),
/* 116 */
/***/ (function(module, exports) {

module.exports = require("bunyan");

/***/ }),
/* 117 */
/***/ (function(module, exports) {

module.exports = require("chalk");

/***/ }),
/* 118 */
/***/ (function(module, exports) {

module.exports = require("cheerio");

/***/ }),
/* 119 */
/***/ (function(module, exports) {

module.exports = require("columnify");

/***/ }),
/* 120 */
/***/ (function(module, exports) {

module.exports = require("crx-parser");

/***/ }),
/* 121 */
/***/ (function(module, exports) {

module.exports = require("dispensary");

/***/ }),
/* 122 */
/***/ (function(module, exports) {

module.exports = require("es6-promisify");

/***/ }),
/* 123 */
/***/ (function(module, exports) {

module.exports = require("eslint");

/***/ }),
/* 124 */
/***/ (function(module, exports) {

module.exports = require("esprima");

/***/ }),
/* 125 */
/***/ (function(module, exports) {

module.exports = require("postcss");

/***/ }),
/* 126 */
/***/ (function(module, exports) {

module.exports = require("readline");

/***/ }),
/* 127 */
/***/ (function(module, exports) {

module.exports = require("semver");

/***/ }),
/* 128 */
/***/ (function(module, exports) {

module.exports = require("url");

/***/ }),
/* 129 */
/***/ (function(module, exports) {

module.exports = require("xmldom");

/***/ }),
/* 130 */
/***/ (function(module, exports) {

module.exports = require("yargs");

/***/ })
/******/ ]);
//# sourceMappingURL=addons-linter.js.map